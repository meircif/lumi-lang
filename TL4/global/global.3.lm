## TL4 compiler - Global compiler data

## Access values
var Int ACCESS-UNDEFINED(0)
var Int ACCESS-COPY(1)
var Int ACCESS-USER(2)
var Int ACCESS-OWNER(3)
var Int ACCESS-VAR(4)


static Global
  ## stores all user defined nodes
  owner SyntaxTreeRoot root
  
  ## stores all built-in nodes
  owner GlobalNodes builtins
  
  ## stores all language operators
  owner List{Operator} operators
  
  ## maps all global-scope nodes
  owner ModuleMembers global-module
  
  ## maps all language operators
  owner NameMap{Operator} operator-map
  
  ## maps all modules
  owner NameMap{ModuleMembers} module-map
  
  ## maps access number to its name
  owner Array{String} access-names
  
  ## the currently parsed input file object
  owner File input-file
  
  ## the currently written output file object
  owner File output-file
  
  ## holds the name of the input-file and the line number of the code currently
  ## been worked with
  user String input-file-name
  user ModuleMembers current-module
  var Int input-file-index
  var Int line-number
  
  ## test functions list
  owner NameMap{SyntaxTreeTestFunction} test-functions
  owner String tested-module
  var Bool is-new-mocked
  var Bool is-delete-mocked
  
  ## input reading state
  owner String input-buffer
  var Char input-end
  var Int input-spaces
  var Bool got-new-line
  var Bool save-input
  
  ## built-in types
  owner TypeData type-char
  owner TypeData type-bool
  owner TypeData type-int
  owner TypeData type-empty
  owner TypeData type-func
  owner TypeData type-ref
  owner TypeData type-string
  owner TypeData type-array
  owner TypeData type-long
  owner TypeData type-type
  owner TypeData type-base
  owner TypeData type-generic
  owner TypeData type-module
  owner TypeData type-file
  owner TypeData type-sys
  
  func inst init()
    self.got-new-line := false
    self.save-input := false
    self.is-new-mocked := false
    self.is-delete-mocked := false
    self.tested-module := _
    new SyntaxTreeRoot in self.root
    self.root.init()
    new GlobalNodes in self.builtins
    self.builtins.init()
    new List{Operator} in self.operators
    new String{102400} in self.input-buffer
    new NameMap{SyntaxTreeTestFunction} in self.test-functions
    new ModuleMembers in self.global-module
    self.global-module.init(user _)
    new NameMap{ModuleMembers} in self.module-map
    self.init-operator-map()
    self.init-builtin-types()
    new Array{5:String{16}} in self.access-names
    self.access-names[ACCESS-UNDEFINED].copy(user "undefined")
    self.access-names[ACCESS-COPY].copy(user "copy")
    self.access-names[ACCESS-USER].copy(user "user")
    self.access-names[ACCESS-OWNER].copy(user "owner")
    self.access-names[ACCESS-VAR].copy(user "var")
  
  func inst init-operator-map()
    new NameMap{Operator} in self.operator-map
    self.add-operator-copy(user "+", copy 0, copy 0)
    self.add-operator-copy(user "-", copy 0, copy 0)
    self.add-operator-copy(user "*", copy 0, copy 1)
    self.add-operator(user "div", user "/", copy 0, copy 1)
    self.add-operator(user "mod", user "%", copy 0, copy 1)
    self.add-operator(user "=", user "==", copy 1, copy 0)
    self.add-operator-copy(user "!=", copy 1, copy 0)
    self.add-operator-copy(user ">", copy 1, copy 0)
    self.add-operator-copy(user "<", copy 1, copy 0)
    self.add-operator-copy(user ">=", copy 1, copy 0)
    self.add-operator-copy(user "<=", copy 1, copy 0)
    self.add-operator(user "is", user "==", copy 1, copy 0)
    self.add-operator(user "is-not", user "!=", copy 1, copy 0)
    self.add-operator(user "not", user "!", copy 2, copy 0)
    self.add-operator(user "or", user "||", copy 3, copy 0)
    self.add-operator(user "and", user "&&", copy 3, copy 1)
    self.add-operator(user ":=", user "=", copy 4, copy 0)
    self.add-operator-copy(user "+=", copy 4, copy 1)
    self.add-operator-copy(user "-=", copy 4, copy 2)
  
  func inst add-operator(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index)
    new Operator operator
    operator.init(user name, user c-name, copy order, copy group-index)
    self.operator-map.add(user operator.name, user operator)
    self.operators.add(owner operator)
  
  func inst add-operator-copy(
      user String name,
      copy Int order,
      copy Int group-index)
    self.add-operator(user name, user name, copy order, copy group-index)
  
  func inst init-builtin-types()
    self.add-builtin-type(user "Char", copy true):(owner self.type-char)
    self.add-builtin-type(user "Bool", copy true):(owner self.type-bool)
    self.add-builtin-type(user "Int", copy true):(owner self.type-int)
    self.add-builtin-type(user "Empty Symbol", copy false):(
        owner self.type-empty)
    self.add-builtin-type(user "Func", copy true):(owner self.type-func)
    self.add-builtin-type(user "Ref", copy true):(owner self.type-ref)
    self.add-builtin-type(user "String", copy false):(owner self.type-string)
    self.add-builtin-type(user "Array", copy false):(owner self.type-array)
    self.add-builtin-type(user "Long", copy false):(owner self.type-long)
    self.add-builtin-type(user "Type Name", copy false):(owner self.type-type)
    self.add-builtin-type(user "Base Symbol", copy false):(owner self.type-base)
    self.add-builtin-type(user "Generic Type", copy false):(
        owner self.type-generic)
    self.type-generic.is-dynamic := true
    self.add-builtin-type(user "Module Name", copy false):(
        owner self.type-module)
    self.add-builtin-type(user "File", copy false):(owner self.type-file)
    self.type-file.create-disallowed := true
    self.add-builtin-type(user "Sys", copy false):(owner self.type-sys)
    self.type-sys.create-disallowed := true
    
    user FunctionArguments arguments
    
    # Int
    self.add-builtin-method(user glob.type-int, user "str"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "str")
    
    # Bool
    self.add-builtin-global-variable(user glob.type-bool, user "true")
    self.add-builtin-global-variable(user glob.type-bool, user "false")
    
    # String
    self.add-builtin-field(
        user glob.type-string, user "length", user glob.type-int, user _)
    self.add-builtin-field(
        user glob.type-string, user "max-length", user glob.type-int, user _)
    
    self.add-builtin-method(user glob.type-string, user "new"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "other")
    
    self.add-builtin-method(user glob.type-string, user "clear"):(
        user arguments)
    
    self.add-builtin-method(user glob.type-string, user "equal"):(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "pattern")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "equal")
    
    self.add-builtin-method(user glob.type-string, user "get"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "index")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-string, user "append"):(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-string, user "concat"):(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "other")
    
    self.add-builtin-method(user glob.type-string, user "concat-int"):(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "number")
    
    self.add-builtin-method(user glob.type-string, user "find"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "pattern")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-int, user "index")
    
    self.add-builtin-method(user glob.type-string, user "has"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "equal")
    
    # Array
    self.add-builtin-field(
        user glob.type-array, user "length", user glob.type-int, user _)
    
    # Long
    self.add-builtin-field(
        user glob.type-long, user "", user glob.type-int, user _)
    
    self.add-builtin-method(user glob.type-long, user "new")
    
    self.add-builtin-method(user glob.type-long, user "copy"):(user arguments)
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "res")
    
    self.add-builtin-method(user glob.type-long, user "set"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "value")
        
    self.add-builtin-method(user glob.type-long, user "int"):(user arguments)
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-int, user "value")
        
    self.add-builtin-method(user glob.type-long, user "add"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "value")
        
    self.add-builtin-method(user glob.type-long, user "mul"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "value")
        
    self.add-builtin-method(user glob.type-long, user "parse"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "text")
        
    self.add-builtin-method(user glob.type-long, user "hex"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "text")
        
    self.add-builtin-global-function(user "long-add"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "a")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "b")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "res")
        
    self.add-builtin-global-function(user "long-sub"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "a")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "b")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "res")
        
    self.add-builtin-global-function(user "long-mul"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "a")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "b")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "res")
        
    self.add-builtin-global-function(user "long-div"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "n")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "d")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "q")
        
    self.add-builtin-global-function(user "long-mod"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "n")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "d")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-long, user "r")
        
    self.add-builtin-global-function(user "long-equal"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "a")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "b")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "res")
        
    self.add-builtin-global-function(user "long-larger"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "a")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-long, user "b")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "res")
    
    # File
    self.add-builtin-global-function(user "file-open-read"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "name")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-file, user "file")
    
    self.add-builtin-global-function(user "file-open-write"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "name")
    self.add-builtin-output(
        user arguments, copy ACCESS-OWNER, user glob.type-file, user "file")
    
    self.add-builtin-global-function(user "file-close"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-OWNER, user glob.type-file, user "file")
    
    self.add-builtin-method(user glob.type-file, user "getc"):(user arguments)
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "is-eof")
    
    self.add-builtin-method(user glob.type-file, user "putc"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-file, user "write"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "text")
    
    # Sys
    self.add-builtin-field(
        user glob.type-sys,
        user "argv",
        user glob.type-array,
        user glob.type-string)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stdout",
        user glob.type-file,
        user _)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stdin",
        user glob.type-file,
        user _)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stderr",
        user glob.type-file,
        user _)
    
    self.add-builtin-method(user glob.type-sys, user "print"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "text")
        
    self.add-builtin-method(user glob.type-sys, user "println"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "text")
    
    self.add-builtin-method(user glob.type-sys, user "getchar"):(user arguments)
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "is-eof")
        
    self.add-builtin-method(user glob.type-sys, user "getline"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "line")
    
    self.add-builtin-method(user glob.type-sys, user "exit"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-COPY, user glob.type-int, user "status")
    
    self.add-builtin-method(user glob.type-sys, user "system"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "command")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-int, user "status")
    
    self.add-builtin-method(user glob.type-sys, user "getenv"):(user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "name")
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user glob.type-string, user "value")
    self.add-builtin-output(
        user arguments, copy ACCESS-VAR, user glob.type-bool, user "exists")
    
    self.add-builtin-global-variable(user glob.type-sys, user "sys")
  
  func inst add-builtin-type(user String name, copy Bool is-primitive):(
      owner TypeData type-data)
    new TypeData in type-data
    string-new-copy(user name):(owner type-data.name)
    type-data.is-primitive := is-primitive
    type-data.is-ordered := true
    type-data.init()
    self.global-module.type-map.add(user type-data.name, user type-data)
    self.builtins.types.add(owner type-data)
  
  func inst add-builtin-global-variable(
      user TypeData variable-type, user String name)
    self.add-builtin-variable(
        user name, user variable-type, user _, user _, user self.builtins)
    user SyntaxTreeVariable variable(self.builtins.variables.last.item)
    self.global-module.variable-map.add(user variable.name, user variable)
  
  func inst add-builtin-field(
      user TypeData builtin-type,
      user String name,
      user TypeData field-type,
      user TypeData field-subtype)
    self.add-builtin-variable(
        user name,
        user field-type,
        user field-subtype,
        user builtin-type,
        user builtin-type)
  
  func inst add-builtin-variable(
      user String name,
      user TypeData variable-type,
      user TypeData variable-subtype,
      user TypeData parent-type,
      user SyntaxTreeBranch branch)
    new SyntaxTreeVariable variable
    string-new-copy(user name):(owner variable.name)
    if variable-type.is-primitive
      variable.access := ACCESS-VAR
    else
      variable.access := ACCESS-USER
    variable-type.m-new-type-instance():(owner variable.type-instance)
    if ? variable-subtype
      variable.type-instance.add-subtype-copy(user variable-subtype)
    variable.parent-type := parent-type
    branch.variables.add(owner variable)
  
  func inst add-builtin-global-function(user String name):(
      user FunctionArguments arguments)
    self.add-builtin-function(user name, user _, user glob.builtins):(
        user arguments)
    user SyntaxTreeFunction function(self.builtins.functions.last.item)
    self.global-module.function-map.add(user function.name, user function)
  
  func inst add-builtin-method(user TypeData builtin-type, user String name):(
      user FunctionArguments arguments)
    self.add-builtin-function(user name, user builtin-type, user builtin-type):(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy ACCESS-USER, user builtin-type, user "self")
  
  func inst add-builtin-function(
      user String name,
      user TypeData parent-type,
      user SyntaxTreeNamespace namespace):(
      user FunctionArguments arguments)
    new SyntaxTreeFunction function
    function.init()
    string-new-copy(user name):(owner function.name)
    function.parent-type := parent-type
    new FunctionArguments in function.arguments
    function.arguments.init()
    arguments := function.arguments
    namespace.functions.add(owner function)
  
  func inst add-builtin-parameter(
      user FunctionArguments arguments,
      copy Int access,
      user TypeData parameter-type,
      user String name)
    self.add-builtin-argument(
        user arguments.parameters,
        copy false,
        copy access,
        user parameter-type,
        user name)
  
  func inst add-builtin-output(
      user FunctionArguments arguments,
      copy Int access,
      user TypeData output-type,
      user String name)
    self.add-builtin-argument(
        user arguments.outputs,
        copy true,
        copy access,
        user output-type,
        user name)
  
  func inst add-builtin-argument(
      user List{Argument} argument-list,
      copy Bool is-output,
      copy Int access,
      user TypeData argument-type,
      user String name)
    new DeclarationArgument argument
    argument.access := access
    argument.is-output := is-output
    new SyntaxTreeVariable in argument.variable
    string-new-copy(user name):(owner argument.variable.name)
    argument.variable.access := access
    argument-type.m-new-type-instance():(
        owner argument.variable.type-instance)
    argument-list.add(owner argument)
  
  func inst find-type(user String name):(user TypeData type-data)
    if ? self.current-module
      if ? self.current-module.type-map.find(user name):(user type-data)
        return
    self.global-module.type-map.find(user name):(user type-data)
  
  func inst find-variable(user String name):(user SyntaxTreeVariable variable)
    if ? self.current-module.variable-map.find(user name):(user variable)
      return
    self.global-module.variable-map.find(user name):(user variable)
  
  func inst find-function(user String name):(user SyntaxTreeFunction function)
    if ? self.current-module.function-map.find(user name):(user function)
      return
    self.global-module.function-map.find(user name):(user function)

var Global glob
