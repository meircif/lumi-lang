## TL4 compiler - Syntax tree node branch

## A basic branch node in the syntax tree - a node with chldren nodes
class SyntaxTreeBranch(SyntaxTreeNode)
  var Int indentation-spaces
  owner List{SyntaxTreeVariable} variables
  
  func inst init()
    new List{SyntaxTreeVariable} in self.variables
  
  func inst parse-block-children(
      user TypeData parent-type, user SyntaxTreeBlock parent-block):(
      copy Char end)
    if end != '\n'
      self.m-syntax-error-c(user "expected block in a new line, got", copy end)
    self.init()
    self.parse-children(user parent-type, user parent-block):(copy end)
    if end != 127
      glob.save-input := true
  
  func inst parse-children(
      user TypeData parent-type, user SyntaxTreeBlock parent-block):(
      copy Char end)
    var Int my-line-number(self.line-number)
    do
      user String keyword
      var Int spaces
      read-until(user " .([{?", copy true):(user keyword, copy end, copy spaces)
      # ignore empty lines
      if keyword.length > 0 or end != '\n'
        self.set-location()
        
        if not self.parse-if-comment(user keyword):(copy end)
          if spaces > self.indentation-spaces
            self.m-syntax-error-indentation(
                copy spaces, copy self.indentation-spaces)
          
          while spaces = self.indentation-spaces and end != 127
          
          if not self.parse-if-common(
              user keyword, user parent-type, user parent-block):(copy end)
            self.parse-child(user keyword):(copy end)
        
        while end != 127
        if not glob.save-input and end != '\n'
          self.m-syntax-error-c(
              user "expected new-line in line end, got", copy end)
    
    self.line-number := my-line-number
  
  func inst parse-if-comment(user String keyword):(
      copy Char end, copy Bool is-parsed)
    is-parsed := true
    if keyword.equal(user ";") and end = ' '
      user String text
      read-until(user "", copy false):(user text, copy end)
    else-if keyword.equal(user "~~~") and end = ' '
      var Int count
      do
        var Char ch
        read-c():(copy ch)
        if ch = '~'
          count += 1
        else
          count := 0
        while ch != 127 and count < 3
      read-c():(copy end)
    else-if keyword.length = 0 and end = '['
      if read-c() != ';'
        self.m-syntax-error-msg(user "unexpected \"[\"")
      var Char prev('\0')
      do
        var Char curr
        read-c():(copy curr)
        while curr != 127 and (curr != ']' or prev != ';')
        prev := curr
      read-c():(copy end)
    else
      is-parsed := false
  
  func dynamic parse-if-common(
      user String keyword,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block):(
      copy Char end,
      copy Bool is-parsed)
    is-parsed := end = ' '
    
    user List{SyntaxTreeVariable} variables(self.variables)
    if ? parent-block
      variables := parent-block.get-function().variables
      if ? glob.tested-module
        if glob.current-module.name.equal(user glob.tested-module) and
            not keyword.equal(user "else") and not keyword.equal(user "else-if")
          parent-block.code-nodes.add(
              owner SyntaxTreeCoverage.init-new(var _, user parent-block))
    
    if not is-parsed
      return
    
    else-if keyword.equal(user "var")
      variables.add(owner SyntaxTreeVariable.parse-new(
          var _,
          copy ACCESS-VAR,
          copy true,
          user parent-type,
          user parent-block):(
          copy end))
    else-if keyword.equal(user "user")
      variables.add(owner SyntaxTreeVariable.parse-new(
          var _,
          copy ACCESS-USER,
          copy false,
          user parent-type,
          user parent-block):(
          copy end))
    else-if keyword.equal(user "owner")
      variables.add(owner SyntaxTreeVariable.parse-new(
          var _,
          copy ACCESS-OWNER,
          copy false,
          user parent-type,
          user parent-block):(
          copy end))
      
    else
      is-parsed := false
  
  func dynamic parse-child(user String keyword):(copy Char end)
    raise
  
  func dynamic find-variable(user String name, user String module-name):(
      user SyntaxTreeVariable variable)
    if ? base.find-variable(user name, user module-name):(user variable)
      return
    variable := _
    user ListNode{SyntaxTreeVariable} child(self.variables.first)
    do
      while ? child
      while not (? child.item.find-variable(user name, user _):(user variable))
      child := child.next
  
  func dynamic link-types()
    self.link-children-types(user self.variables)
  
  func dynamic analyze()
    self.analyze-children(user self.variables)
  
  func dynamic write()
    self.write-children(user self.variables)
  
  func inst write-spaces()
    write-spaces(copy self.indentation-spaces)
  
  func inst write-cleanup(user TypeData type-data)
    user ListNode{SyntaxTreeVariable} var-node(self.variables.last)
    do
      while ? var-node
      if not var-node.item.type-instance.type-data.is-primitive
        self.write-variable-cleanup(user var-node.item, user type-data)
      var-node := var-node.prev
  
  func inst write-variable-cleanup(
      user SyntaxTreeVariable variable, user TypeData type-data)
    user TypeData item-type-data(variable.type-instance.type-data)
    if item-type-data = glob.type-array
      item-type-data := variable.type-instance.parameters.first.item.type-data
    if variable.access = ACCESS-OWNER and not item-type-data.is-primitive
      self.write-owner-reference-cleanup(
          user variable, user type-data, user item-type-data)
    else-if ? type-data and variable.access = ACCESS-VAR
      write(user "    ")
      item-type-data.write-cname()
      write(user "_Del(&(self->")
      write-cname(user variable.name)
      write(user "));\n")
      return
    write(user "    LUMI_")
    if variable.access = ACCESS-VAR
      write(user "var_")
    else-if variable.access = ACCESS-OWNER
      write(user "owner_")
    write(user "dec_ref(")
    if ? type-data
      write(user "self->")
    write-cname(user variable.name)
    write(user "_Refman);\n")
  
  func inst write-owner-reference-cleanup(
      user SyntaxTreeVariable variable,
      user TypeData type-data,
      user TypeData item-type-data)
    write(user "    ")
    if variable.type-instance.type-data = type-data
      if type-data.is-dynamic
        write(user "DYN_")
      write(user "SELF_REF_DEL(")
      type-data.write-cname()
      write(user ", ")
      if type-data.is-dynamic
        user TypeData base-type(type-data)
        do
          while ? base-type.base-type
          write(user "_base.")
          base-type := base-type.base-type.type-data
        write(user "_, ")
      type-data := _
    else-if variable.type-instance.type-data.is-dynamic
      write(user "if (")
      if ? type-data
        write(user "self->")
      write-cname(user variable.name)
      write(user "_Dynamic != NULL) ")
      if ? type-data
        write(user "self->")
      write-cname(user variable.name)
      write(user "_Dynamic->")
      user TypeData base-data(item-type-data)
      do
        while ? base-data.base-type
        base-data := base-data.base-type.type-data
        while base-data.is-dynamic
        write(user "_base.")
      write(user "_del(")
    else-if variable.type-instance.type-data = glob.type-array
      write(user "ARRAY_DEL(")
      item-type-data.write-cname()
      write(user ", ")
    else
      item-type-data.write-cname()
      write(user "_Del(")
    if ? type-data
      write(user "self->")
    write-cname(user variable.name)
    write(user ")")
    if variable.type-instance.type-data != glob.type-array
      write(user ";")
    write(user "\n")


## A basic namespace node in the syntax tree
class SyntaxTreeNamespace(SyntaxTreeBranch)
  owner List{SyntaxTreeFunction} functions
  
  func inst init()
    base.init()
    new List{SyntaxTreeFunction} in self.functions
  
  func inst parse-if-function(
      user String keyword, user TypeData parent-type):(
      copy Char end, copy Bool is-func)
    keyword.equal(user "func"):(copy is-func)
    if is-func
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"func\", got", copy end)
      self.functions.add(owner SyntaxTreeFunction.parse-new(
          var _, user parent-type):(copy end))
  
  func dynamic link-types()
    base.link-types()
    self.link-children-types(user self.functions)
  
  func dynamic analyze()
    base.analyze()
    self.analyze-children(user self.functions)
  
  func inst write-functions-declaration()
    user ListNode{SyntaxTreeFunction} child(self.functions.first)
    do
      while ? child
      child.item.write-declaration()
      child := child.next
