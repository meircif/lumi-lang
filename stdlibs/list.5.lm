~~~ Generic lists ~~~
module ds


~~~ Generic single link list ~~~
struct List{Generic}
    strong ListNode?{Generic} first

    ~~~ Add item to list end ~~~
    func temp ! append(owner Generic item)
        temp ListNode{Generic} last
        if-error last := self.first
            self.prepend(owner item)
        else
            loop
                temp ListNode?{Generic} next(temp last.next)
                if-error last := next
                    break
            last.next := ListNode{Generic}(owner item, strong _)!

    ~~~ Add item to list start ~~~
    func temp ! prepend(owner Generic item)
        new ListNode{Generic} node(owner item, strong self.first)!
        self.first := node!

    func user is-empty()->(var Bool empty)
        empty := not self.first?

    ~~~ Get and remove first item, fail if list is empty ~~~
    func temp ! pop()->(owner Generic? item)
        owner ListNode{Generic} first
        if-error first := self.first
            raise "list empty"
        self.first := first.next
        item := first.item


~~~ Iterate over the list ~~~
class ListIterator{Generic}
    weak ListNode?{Generic} curr

    new(user List list)
        self.curr := list.first

    func dynamic user ! step()->(user Generic? item, var Bool has-another-item)
        has-another-item := self.curr?
        item := _
        if self.curr?
            item := self.curr!.item
            self.curr := self.curr!.next


~~~ Single node in the list ~~~
struct ListNode{Generic}
    strong ListNode?{Generic} next
    owner Generic? item

    new(owner Generic item, strong ListNode?{Generic} next)
        self.next := next
        self.item := item
