~~~ TL5 compiler - Function arguments ~~~
module tl5-compiler


~~~ Basic function argument ~~~
class Argument(SyntaxTreeNode)
    var Int access
    var Bool is-output
    var Bool is-native

    new()
        self.set-location()
    
    func dynamic copy-new()->(owner DeclarationArgument new-argument)
        raise
    
    func inst copy(user Argument other)
        other.input-file-name := self.input-file-name
        other.line-number := self.line-number
        other.access := self.access
        other.is-output := self.is-output
        other.is-native := self.is-native
    
    func inst parse(
            user String access-str,
            copy Bool is-output,
            copy Bool is-native,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        self.is-output := is-output
        self.is-native := is-native
        self.get-access(user access-str)->(var self.access)
        self.parse-value(user node, user code-node, copy indentation-spaces)
    
    func dynamic parse-value(
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        raise
    
    func dynamic get-type-instance()->(user TypeInstance type-instance)
        raise
    
    func inst compare(
            user Argument other,
            user TypeInstance actual-params,
            copy Int bases,
            copy Bool check-same,
            copy Bool print-error)
        if self.access != other.access
            assert print-error
            self.syntax-error2(
                    user "expected access",
                    user glob.access-names[other.access],
                    user ", got",
                    user glob.access-names[self.access])
        if check-same
            self.check-same-type-as(
                    user other,
                    user actual-params,
                    copy bases,
                    copy print-error)
    
    func dynamic check-same-type-as(
            user Argument other,
            user TypeInstance actual-params,
            copy Int bases,
            copy Bool print-error)
        user SyntaxTreeNode node
        if print-error
            node := self
        self.get-type-instance().check-equal(
                user other.get-type-instance(), user node)
    
    func dynamic get-variable()->(user SyntaxTreeVariable variable)
        raise
    
    func dynamic get-output()->(user Expression output)
        raise
    
    func dynamic take-value()->(owner Expression value)
        raise
    
    func dynamic write-preactions()
        raise
    
    func dynamic write-postactions()
        raise


class ArgumentFactory
    var Int dummy
    
    func dynamic new-argument()->(owner Argument new-argument)
        raise


~~~ All function parameters and outputs ~~~
class FunctionArguments(SyntaxTreeNode)
    var List{Argument} parameters
    var List{Argument} outputs
    var Bool has-error
    
    new()
        self.set-location()
    
    func inst copy-new()->(owner FunctionArguments new-arguments)
        new-arguments := FunctionArguments()
        self.copy-new-args(user self.parameters, user new-arguments.parameters)
        self.copy-new-args(user self.outputs, user new-arguments.outputs)
        new-arguments.has-error := self.has-error
    
    func inst copy-new-args(
            user List{Argument} arguments, user List{Argument} new-arguments)
        for argument in arguments.iter()
            new-arguments.add(owner argument.copy-new())
    
    func inst parse(
            user ArgumentFactory argument-factory,
            copy Bool is-native,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        self.parse-args(
                user self.parameters,
                user argument-factory,
                copy is-native,
                user node,
                user code-node,
                copy indentation-spaces)
        if glob.last-char = '-'
            self.read-expect(user ">(")
            self.parse-args(
                    user self.outputs,
                    user argument-factory,
                    copy is-native,
                    user node,
                    user code-node,
                    copy indentation-spaces)
    
    func inst add-self-parameter(
            user TypeData type-data, copy Int access, copy Bool conditional)
        new DeclarationArgument self-args
        self-args.access := access
        self-args.variable := SyntaxTreeVariable(user _)
        self-args.variable.access := self-args.access
        string-new-copy(user "self")->(owner self-args.variable.name)
        type-data.self-type-instance()->(owner self-args.variable.type-instance)
        self-args.variable.type-instance.conditional := conditional
        self.parameters.prepend(owner self-args)
    
    func inst parse-args(
            user List{Argument} arguments,
            user ArgumentFactory argument-factory,
            copy Bool is-native,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        owner Argument argument
        user String access-str
        var Bool is-output(copy arguments is self.outputs)
        read-until(user " )", copy false)->(user access-str)
        if glob.last-char = '\n' and access-str.length = 0
            self.read-line-break-spaces(copy indentation-spaces)
            read-until(user " ", copy false)->(user access-str)
        if glob.last-char != ')' or access-str.length > 0
            do
                if access-str.length = 0
                    self.syntax-error-c(user "expected access, got")
                self.expect-space(user access-str)
                argument-factory.new-argument()->(owner argument)
                argument.parse(
                        user access-str,
                        copy is-output,
                        copy is-native,
                        user node,
                        user code-node,
                        copy indentation-spaces)
                arguments.add(owner argument)
                while glob.last-char = ','
                read-c()
                if glob.last-char = '\n'
                    self.read-line-break-spaces(copy indentation-spaces)
                else-if glob.last-char != ' '
                    self.syntax-error-c(
                            user "expected space or new-line after \",\", got")
                read-until(user " ", copy false)->(user access-str)
        read-c()
    
    func dynamic link-types()
        self.link-children-types(user self.parameters)
        self.link-children-types(user self.outputs)
    
    func dynamic analyze()
        self.analyze-children(user self.parameters)
        self.analyze-children(user self.outputs)

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.check-children-memory(user self.parameters, user refs)
        self.check-children-memory(user self.outputs, user refs)
    
    func inst get-result-type()->(var Int access, user TypeInstance result-type)
        if self.outputs.last?
            self.outputs.last.item.get-type-instance()->(user result-type)
            access := self.outputs.last.item.access
        else
            result-type := _
            access := Access.VAR
    
    func inst get-output()->(user Expression output)
        if self.outputs.last?
            self.outputs.last.item.get-output()->(user output)
    
    func dynamic find-variable(user String name, user String module-name)->(
            user SyntaxTreeVariable variable)
        self.find-variable-args(user self.parameters, user name)->(
                user variable)
        if not variable?
            self.find-variable-args(user self.outputs, user name)->(
                    user variable)
    
    func inst find-variable-args(
            user List{Argument} arguments, user String name)->(
            user SyntaxTreeVariable variable)
        for argument in arguments.iter()
            while not argument.get-variable().get-if-equal(user name)->(
                    user variable)?
    
    func inst check-calling(
            user FunctionArguments other,
            user TypeInstance actual-params,
            copy Int bases)->(
            var Bool output-omitted)
        self.compare(
                user other,
                user actual-params,
                copy bases,
                copy true,
                copy false,
                copy true)->(
                var output-omitted)

    func inst check-same-as(user FunctionArguments other, copy Bool print-error)
        self.compare(
                user other,
                user _,
                copy 0,
                copy false,
                copy false,
                copy print-error)

    func inst check-override(
            user FunctionArguments other,
            user TypeInstance actual-params,
            copy Int bases)
        self.compare(
                user other,
                user actual-params,
                copy bases,
                copy false,
                copy true,
                copy true)
    
    func inst compare(
            user FunctionArguments other,
            user TypeInstance actual-params,
            copy Int bases,
            copy Bool check-calling,
            copy Bool check-override,
            copy Bool print-error)->(
            var Bool output-omitted)
        if not check-calling and self.has-error != other.has-error
            self.syntax-error-msg(user "non matching error result")
        var ListIterator{Argument} my-iter(user self.parameters)
        var ListIterator{Argument} other-iter(user other.parameters)
        var Bool check-param-same(copy not check-override)
        for parameter in my-iter
            while other-iter.has()
            parameter.compare(
                    user other-iter.get(),
                    user actual-params,
                    copy bases,
                    copy check-param-same,
                    copy print-error)
            check-param-same := true
            other-iter.next()
        if my-iter.has()
            assert print-error
            self.syntax-error-msg(user "too many parameters")
        if other-iter.has()
            assert print-error
            self.syntax-error-msg(user "too few parameters")
        
        my-iter.new(user self.outputs)
        other-iter.new(user other.outputs)
        for output in my-iter
            while other-iter.has()
            output.compare(
                    user other-iter.get(),
                    user actual-params,
                    copy bases,
                    copy true,
                    copy print-error)
            other-iter.next()
        if my-iter.has()
            assert print-error
            self.syntax-error-msg(user "too many outputs")
        if other-iter.has()
            output-omitted := not other-iter.get().is-native
            if check-calling
                other-iter.next()
            if other-iter.has()
                assert print-error
                self.syntax-error-msg(user "too few outputs")
    
    func inst write-preactions()
        self.write-args-preactions(user self.parameters)
        self.write-args-preactions(user self.outputs)
    
    func inst write-args-preactions(user List{Argument} arguments)
        for argument in arguments.iter()
            argument.write-preactions()
    
    func dynamic write()
        self.write-if-decleration(copy true)
    
    func dynamic write-call()
        self.write-if-decleration(copy false)
    
    func inst write-if-decleration(copy Bool is-decleration)
        ; (`params...`, `outputs...`)
        write(user "(")
        if self.parameters.first?
            self.write-args(user self.parameters)
        if self.outputs.first?
            if self.parameters.first?
                write(user ", ")
            self.write-args(user self.outputs)
        else-if not self.parameters.first? and is-decleration
            write(user "void")
        write(user ")")
    
    func inst write-args(user List{Argument} arguments)
        var ListIterator{Argument} iter(user arguments)
        do
            iter.get().write()
            iter.next()
            while iter.has()
            write(user ", ")
    
    func inst write-pointer-start()
        if self.has-error
            write(user "Returncode (*")
        else
            write(user "void (*")
    
    func inst write-pointer(user String name)
        self.write-pointer-start()
        if name?
            write-cname(user name)
        write(user ")")
        self.write()
    
    func inst write-postactions()
        for parameter in self.parameters.iter()
            parameter.write-postactions()
