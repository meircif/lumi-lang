~~~ TL5 compiler - Type instance ~~~
module tl5-compiler

~~~ Specific usage of a type including the assigned subtypes and values ~~~
struct TypeInstance
    var ExpressionValue length-owner
    owner String name
    owner String module-name
    owner List{TypeInstance} parameters
    owner FunctionArguments arguments
    owner ReferencePath reference-path
    user TypeData type-data
    user ExpressionValue length
    var Bool conditional
    
    ~~~ Return a new deep-copy of self ~~~
    func copy-new()->(owner TypeInstance type-instance)
        if self?
            type-instance := TypeInstance()
            self.copy(user type-instance)
        else
            type-instance := _
                
    func copy(user TypeInstance other)
        other.type-data := self.type-data
        other.length := self.length
        other.conditional := self.conditional
        string-new-copy(user self.name)->(owner other.name)
        if self.module-name?
            string-new-copy(user self.module-name)->(owner other.module-name)
        if self.parameters?
            other.parameters := List{TypeInstance}()
            for parameter in self.parameters.iter()
                other.parameters.add(owner parameter.copy-new())
        if self.arguments?
            self.arguments.copy-new()->(owner other.arguments)
        if self.reference-path?
            self.reference-path.copy-new()->(owner other.reference-path)
    
    func parse(
            user String ends,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        user String name
        read-until(user string-new-concat(user ends, user "?.{"), copy false)->(
                user name)
        if glob.last-char = '.'
            string-new-copy(user name)->(owner self.module-name)
            read-until(
                    user string-new-concat(user ends, user "?{"), copy false)->(
                    user name)
        if glob.last-char = '?'
            self.conditional := true
            read-c()
        self.parse-name(
                user name, user node, user code-node, copy indentation-spaces)
    
    func parse-name(
            user String name,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        string-new-copy(user name)->(owner self.name)
        if glob.last-char = '{'
            if self.name.equal(user "Func")
                self.arguments := FunctionArguments()
                read-c()
                if glob.last-char = ':'
                    self.arguments.has-error := true
                    read-c()
                if glob.last-char != '('
                    node.syntax-error-c(
                            user "expected \"(\" inside Function type, got")
                var DeclarationArgumentFactory argument-factory
                self.arguments.parse(
                        user argument-factory,
                        copy false,
                        user node,
                        user code-node,
                        copy indentation-spaces)
            else-if code-node? and self.name.equal(user "String")
                self.length-owner.new(user "}", user code-node)
                self.length := self.length-owner
            else
                var Bool has-sub-type(copy true)
                var Bool is-array(copy self.name.equal(user "Array"))
                if code-node? and is-array
                    self.length-owner.new(user ":}", user code-node)
                    self.length := self.length-owner
                    if glob.last-char != ':' and glob.last-char != '}'
                        node.syntax-error-c(
                                user "expected \":\" or \"} after array \
                                length\", got")
                    has-sub-type := glob.last-char = ':'
                if has-sub-type
                    if not is-array
                        code-node := _
                    self.parameters := List{TypeInstance}()
                    do
                        new TypeInstance sub-type
                        sub-type.parse(
                                user ":}",
                                user node,
                                user code-node,
                                copy indentation-spaces)
                        self.parameters.add(owner sub-type)
                        while glob.last-char = ':'
                        if is-array
                            node.syntax-error-msg(
                                    user "more than one subtype for array")
            if glob.last-char != '}'
                node.syntax-error-c(user "expected \"}\" after sub-types, got")
            read-c()
    
    func add-subtype-copy(user TypeData type-data)
        if not self.parameters?
            self.parameters := List{TypeInstance}()
        self.parameters.add(owner type-data.new-type-instance())
    
    func analyze(user SyntaxTreeNode node)
        self.analyze-part(user node, copy true, copy true, copy false)
    
    func link-types(user SyntaxTreeNode node)
        self.analyze-part(user node, copy true, copy false, copy true)
    
    func analyze-lengths(user SyntaxTreeNode node, copy Bool constant-length)
        self.analyze-part(
                user node, copy false, copy true, copy constant-length)
    
    func analyze-part(
            user SyntaxTreeNode node,
            copy Bool check-types,
            copy Bool check-length,
            copy Bool constant-length)
        if check-types
            if not self.type-data?
                node.find-type(user self.name, user self.module-name)->(
                        user self.type-data)
            if self.arguments?
                self.arguments.link-types()
        if check-length
            if self.length-owner.parsed()
                node.analyze-expression(user self.length, user glob.type-int)
                if constant-length
                    var Int length-value
                    if not self.length.get-constant-value()->(var length-value)
                        node.syntax-error-msg(
                                user "sequence length is not constant")
                    if length-value <= 0
                        node.syntax-error-msg(
                                user "sequence length is not positive")
                self.length.check-no-error()
            if self.arguments?
                self.arguments.analyze()
        if self.parameters?
            for sub-type in self.parameters.iter()
                sub-type.analyze-part(
                        user node,
                        copy check-types,
                        copy check-length,
                        copy constant-length)
        if check-types
            self.check-parameters(user node)
    
    func check-parameters(user SyntaxTreeNode node)
        if self.type-data is glob.type-array
            if not self.parameters?
                node.syntax-error-msg(user "missing subtype for array")
            if self.parameters.first.item.type-data.constructor?
                node.syntax-error(
                        user "array of type with constructor",
                        user self.parameters.first.item.type-data.name)
            if self.parameters.first.item.type-data is glob.type-generic
                node.syntax-error-msg(
                        user "generic arrays not supported")
        else-if self.parameters?
            if not self.type-data.parameters?
                node.syntax-error(
                        user "parameter given for type with no parameters",
                        user self.type-data.name)
            var ListIterator{String} param-iter(user self.type-data.parameters)
            for sub-type in self.parameters.iter()
                if not param-iter.has()
                    node.syntax-error(
                            user "too many parameters given for type",
                            user self.type-data.name)
                if self.type-data is glob.type-pointer
                    if sub-type.type-data.is-dynamic
                        node.syntax-error(
                                user "dynamic pointed type",
                                user sub-type.type-data.name)
                else-if sub-type.type-data.is-primitive
                    node.syntax-error(
                            user "unsupported primitive parameter type",
                            user sub-type.type-data.name)
                if sub-type.type-data is glob.type-array
                    node.syntax-error-msg(
                            user "array as parameter type is unsupported")
                if sub-type.type-data is glob.type-string
                    node.syntax-error-msg(
                            user "string as parameter type is unsupported")
                param-iter.next()
            if param-iter.has()
                node.syntax-error(
                        user "too few parameter given for type",
                        user self.type-data.name)
        else-if self.type-data is glob.type-func and not self.arguments?
            node.syntax-error-msg(user "missing arguments in function type")
    
    func can-be-assigned-to(user TypeInstance target)->(var Bool can)
        can := false
        try
            self.check-assign-to(
                    copy Access.VAR, user target, copy Access.VAR, user _)
            can := true
    
    func check-assign-from(copy Int access, user SyntaxTreeNode node)->(
            owner Expression value)
        if value.access = Access.OWNER and access = Access.STRONG
            value.check-error-propagated(
                    user "ignoring initialization error check")
        node.check-expression-errors(
                copy not self.conditional and
                self.type-data is-not glob.type-ref,
                copy access != Access.WEAK)->(
                owner value)
        var Int bases
        value.result-type.check-assign-to(
                copy value.access, user self, copy access, user node)->(
                var bases)
        if bases > 0
            value := UpCastExpression(owner value, copy bases)
    
    func check-assign-to(
            copy Int self-access,
            user TypeInstance target,
            copy Int target-access,
            user SyntaxTreeNode node)->(
            var Int bases)
        bases := 0
        if not self?
            assert node?
            node.syntax-error-msg(user "cannot assign void expression")
        if self.type-data is glob.type-empty and
                (not target.type-data.is-primitive or
                target.type-data is glob.type-func)
            if not target.conditional
                assert node?
                node.syntax-error(
                        user "assigning empty into non-conditional type",
                        user target.type-data.name)
            return
        if target.type-data is glob.type-ref and not self.type-data.is-primitive
            return
        if access-is-owner(copy target-access)
            if not access-is-owner(copy self-access)
                assert node?
                node.syntax-error(
                        user "assigning into an owner a non-owner access",
                        user glob.access-names[self-access])
            if self.type-data is-not target.type-data and
                    self.type-data is-not glob.type-empty and
                    not target.type-data.is-primitive and
                    not target.type-data.is-dynamic
                assert node?
                node.syntax-error2(
                        user "passing ownership of type",
                        user self.type-data.name,
                        user "into static type",
                        user target.type-data.name)
            if self.reference-path?
                if self.reference-path.field? and
                        not self.reference-path.is-conditional()
                    assert node?
                    node.syntax-error-ref(
                            user "cannot move non-conditional owner field",
                            user self.reference-path)
        if (access-is-only-var(copy target-access) and
                access-is-user(copy self-access)) or
                (target-access = Access.S-VAR and self-access = Access.VAR)
            assert node?
            node.syntax-error2(
                    user "cannot assign value with access",
                    user glob.access-names[self-access],
                    user "into value with access",
                    user glob.access-names[target-access])
        if target-access = Access.WEAK and
                not access-has-refman(copy self-access)
            assert node?
            node.syntax-error(
                    user "assigning into a weak reference an illegal access",
                    user glob.access-names[self-access])
        if self.type-data is glob.type-pointer and
                target.type-data is glob.type-pointer
            return
        if self.type-data is glob.type-generic and
                target.type-data is glob.type-generic
            if not self.name.equal(user target.name)
                assert node?
                node.syntax-error2(
                        user "cannot assign generic subtype",
                        user self.name,
                        user "into different generic subtype",
                        user target.name)
        if self.type-data is glob.type-string and
                target.type-data is glob.type-array and target.parameters? and
                not access-is-owner(copy target-access)
            if target.parameters.first.item.type-data is glob.type-char
                return
        user TypeInstance self-type-instance(user self)
        owner TypeInstance base-type-instance
        do
            while not target.type-data.is-same(
                    user self-type-instance.type-data)
            if not self-type-instance.type-data.base-type?
                assert node?
                node.syntax-error2(
                        user "cannot assign",
                        user self.type-data.name,
                        user "into",
                        user target.type-data.name)
            owner TypeInstance prev-base-type-instance(owner base-type-instance)
            self-type-instance.type-data.base-type.new-replace-params-extended(
                    user self-type-instance, copy false)->(
                    owner base-type-instance)
            self-type-instance := base-type-instance
            bases += 1
        if self.conditional and not target.conditional
            assert node?
            node.syntax-error(
                    user "assigning conditional into non-conditional type",
                    user target.type-data.name)
        
        if self.arguments?
            self.arguments.check-same-as(user target.arguments, copy node?)
        
        if target.type-data.is-primitive or target.type-data is glob.type-array
            self-type-instance.check-sub-equal(user target, user node)
        else
            self-type-instance.check-sub-assign-to(user target, user node)
    
    func check-sub-assign-to(
            user TypeInstance target, user SyntaxTreeNode node)
        if not target.parameters?
            return
        var ListIterator{TypeInstance} target-iter(user target.parameters)
        self.check-has-subytpe(user target-iter.get(), user node)
        for my-sub-type in self.parameters.iter()
            while target-iter.has()
            my-sub-type.check-assign-to(
                    copy Access.VAR,
                    user target-iter.get(),
                    copy Access.VAR,
                    user node)
            target-iter.next()
    
    func check-has-subytpe(
            user TypeInstance target-sub-type, user SyntaxTreeNode node)
        if not self.parameters?
            assert node?
            node.syntax-error2(
                    user "cannot assign type",
                    user self.type-data.name,
                    user "with no parameter into same type with parameter",
                    user target-sub-type.type-data.name)
    
    func check-equal(user TypeInstance other, user SyntaxTreeNode node)
        if self.type-data is-not other.type-data
            assert node?
            node.syntax-error2(
                    user "non matching types",
                    user self.type-data.name,
                    user "and",
                    user other.type-data.name)
        if self.conditional != other.conditional
            assert node?
            node.syntax-error(
                    user "conditionals not matching in type",
                    user self.type-data.name)
        self.check-sub-equal(user other, user node)
    
    func check-sub-equal(user TypeInstance target, user SyntaxTreeNode node)
        if not target.parameters?
            return
        var ListIterator{TypeInstance} target-iter(user target.parameters)
        self.check-has-subytpe(user target-iter.get(), user node)
        for my-sub-type in self.parameters.iter()
            while target-iter.has()
            user TypeInstance target-sub-type
            target-iter.get()->(user target-sub-type)
            if my-sub-type.type-data is-not target-sub-type.type-data
                assert node?
                node.syntax-error2(
                        user "non matching subtypes",
                        user my-sub-type.type-data.name,
                        user "and",
                        user target-sub-type.type-data.name)
            my-sub-type.check-sub-equal(user target-sub-type, user node)
            target-iter.next()
        
    func check-sequence(user SyntaxTreeNode node)
        if (self.type-data is glob.type-array or
                self.type-data is glob.type-string) and not self.length?
            assert node?
            node.syntax-error-msg(user "missing length for sequence")
        if self.type-data is glob.type-array
            if self.parameters.first.item.type-data is glob.type-string and
                    not self.parameters.first.item.length?
                assert node?
                node.syntax-error-msg(user "missing length for sequence")
    
    func get-array-data-type-depth()->(
            user TypeInstance data-type, var Int depth)
        data-type := self
        depth := 0
        do
            while data-type.type-data is glob.type-array
            while data-type.parameters?
            data-type := data-type.parameters.first.item
            while data-type.type-data is glob.type-array or
                    data-type.type-data is glob.type-string
            depth += 1
    
    ~~~ Create a copy of self type-instance with generic parameters replaced by
    actual types based on `actual-params`. ~~~
    func new-replace-params(user TypeInstance actual-params)->(
            owner TypeInstance type-instance)
        self.new-replace-params-extended(user actual-params, copy true)->(
                owner type-instance)
    
    func new-replace-params-extended(
            user TypeInstance actual-params, copy Bool replace-bases)->(
            owner TypeInstance type-instance)
        self.copy-new()->(owner type-instance)
        if type-instance?
            type-instance.replace-type-parameters(
                    user actual-params, copy replace-bases)
    
    func replace-type-parameters(
            user TypeInstance actual-params, copy Bool replace-bases)
        if not actual-params?
            return
        if replace-bases and actual-params.type-data.base-type?
            owner TypeInstance base-type
            actual-params.type-data.base-type.new-replace-params-extended(
                    user actual-params, copy false)->(owner base-type)
            self.replace-type-parameters(user base-type, copy true)
        if self.type-data is glob.type-generic and actual-params.parameters? and
                actual-params.type-data.parameters?
            var ListIterator{String} dec-iter(
                    user actual-params.type-data.parameters)
            for inst-param in actual-params.parameters.iter()
                while dec-iter.has()
                if dec-iter.get().equal(user self.name)
                    var Bool conditional(copy self.conditional)
                    inst-param.copy(user self)
                    self.conditional := conditional
                    break
                dec-iter.next()
        if self.parameters?
            for parameter in self.parameters.iter()
                parameter.replace-type-parameters(
                        user actual-params, copy replace-bases)
                
    func write-cname()
        if self.type-data is glob.type-pointer
            if self.parameters?
                self.parameters.first.item.write-cname()
                write(user "*")
            else
                write(user "void*")
        else
            self.type-data.write-cname()
