~~~ TL5 compiler - Type instance ~~~
module tl5-compiler


~~~ Specific usage of a type including the assigned parameters and values ~~~
struct TypeInstance
    var ExpressionValue length-owner
    owner String name
    owner String module-name
    owner List{TypeInstance} parameters
    owner IntRange int-range
    owner FunctionArguments arguments
    owner ReferencePath reference-path
    user TypeData type-data
    user ExpressionValue length
    var Bool conditional
    
    ~~~ Return a new deep-copy of self ~~~
    func copy-new()->(owner TypeInstance type-instance)
        type-instance := TypeInstance()
        self.copy(user type-instance)
                
    func copy(user TypeInstance other)
        other.type-data := self.type-data
        other.length := self.length
        other.conditional := self.conditional
        string-new-copy(user self.name)->(owner other.name)
        if self.module-name?
            string-new-copy(user self.module-name)->(owner other.module-name)
        if self.parameters?
            other.parameters := List{TypeInstance}()
            for parameter in self.parameters.iter()
                other.parameters.add(owner parameter.copy-new())
        if self.int-range?
            self.int-range.copy-new()->(owner other.int-range)
        if self.arguments?
            self.arguments.copy-new()->(owner other.arguments)
        if self.reference-path?
            self.reference-path.copy-new()->(owner other.reference-path)
    
    func parse(
            user String ends,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        user String name
        read-until(user string-new-concat(user ends, user "?.{"), copy false)->(
                user name)
        if glob.last-char = '.'
            string-new-copy(user name)->(owner self.module-name)
            read-until(
                    user string-new-concat(user ends, user "?{"), copy false)->(
                    user name)
        if glob.last-char = '?'
            self.conditional := true
            read-c()
        self.parse-name(
                user name, user node, user code-node, copy indentation-spaces)
    
    func parse-name(
            user String name,
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        string-new-copy(user name)->(owner self.name)
        if glob.last-char != '{'
            return
        if self.name.equal(user "Func")
            self.arguments := FunctionArguments()
            read-c()
            if glob.last-char = ':'
                self.arguments.has-error := true
                read-c()
            if glob.last-char != '('
                node.syntax-error-c(
                        user "expected \"(\" inside Function type, got")
            var DeclarationArgumentFactory argument-factory
            self.arguments.parse(
                    user argument-factory,
                    copy false,
                    user node,
                    user code-node,
                    copy indentation-spaces)
        else-if self.name.equal(user "Int")
            self.int-range := IntRange()
            self.int-range.parse(user node, user code-node)
        else-if code-node? and self.name.equal(user "Buffer")
            self.length-owner.new(user "}", user node, user code-node)
            self.length := self.length-owner
        else-if self.name.equal(user "Array")
            self.length-owner.new(user ":}", user node, user code-node)
            self.length := self.length-owner
            if glob.last-char = ':'
                self.parameters := List{TypeInstance}()
                self.parse-new-sub-type(
                        user node, user code-node, copy indentation-spaces)
        else
            self.parameters := List{TypeInstance}()
            do
                self.parse-new-sub-type(
                        user node, user code-node, copy indentation-spaces)
                while glob.last-char = ':'
        if glob.last-char != '}'
            node.syntax-error-c(user "expected \"}\" after sub-types, got")
        read-c()
    
    func parse-new-sub-type(
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        new TypeInstance sub-type
        sub-type.parse(
                user ":}",
                user node,
                user code-node,
                copy indentation-spaces)
        self.parameters.add(owner sub-type)
    
    func add-subtype-copy(user TypeData type-data)
        if not self.parameters?
            self.parameters := List{TypeInstance}()
        self.parameters.add(owner type-data.new-type-instance())
    
    func set-expected-type()->(owner TypeInstance expected)
        if expected?
            return
        if self.int-range?
            expected := TypeInstance()
            self.int-range.copy-new()->(owner expected.int-range)
    
    func set-int-constant(user SyntaxTreeNode node, user Long value)
        if not self.int-range?
            self.int-range := IntRange()
        value.copy()->(owner self.int-range.min-value)
        value.copy()->(owner self.int-range.max-value)
        self.int-range.set-sign-and-bits(user node)
    
    func set-int-range()
        self.type-data.module.int-map.find(user self.name).copy-new()->(
                owner self.int-range)
    
    func is-non-zero-integer()->(var Bool non-zero)
        non-zero := self.int-range?
        if non-zero
            non-zero := self.int-range.min-value.sign() > 0 or
                    self.int-range.max-value.sign() < 0

    func link-types(user SyntaxTreeNode node)
        if not self.type-data?
            if self.module-name?
                if self.module-name.equal(user "cdef") and
                        self.name.equal(user "CharP")
                    self.type-data := glob.type-pointer
                    self.parameters := List{TypeInstance}()
                    new TypeInstance c-char
                    string-new-copy(user "cdef")->(owner c-char.module-name)
                    string-new-copy(user "Char")->(owner c-char.name)
                    self.parameters.add(owner c-char)
            else-if self.name.equal(user "Buffer")
                self.type-data := glob.type-array
                if self.length?
                    self.parameters := List{TypeInstance}()
                    self.parameters.add(
                            owner glob.type-byte.new-type-instance())
                else
                    self.length := self.length-owner
                    new TypeExpression length(user _)
                    length.set(owner glob.type-byte.new-type-instance())
                    self.length.expression := length
            if not self.type-data?
                node.check-type(user self.name, user self.module-name)->(
                        user self.type-data)
            if self.conditional and self.type-data is glob.type-pointer
                node.syntax-error(
                        user "cannot use \"?\" on primitive type",
                        user self.type-data.name)
        if self.type-data.is-int-like and not self.int-range?
            self.set-int-range()
        if self.type-data is glob.type-pointer
            self.conditional := true
        if self.type-data is glob.type-array and not self.parameters? and
                self.length?
            if self.length-owner.parsed()
                node.analyze-expression(user self.length, user glob.type-type)
                self.parameters := self.length.result-type.parameters
                self.length.result-type := self
                self.length-owner.expression := _
                self.add-default-length-type()
            else
                self.parameters := List{TypeInstance}()
                user TypeInstance result(user self.length.result-type)
                self.parameters.add(
                        owner result.parameters.first.item.copy-new())
                self.parameters.add(
                        owner result.parameters.first.next.item.copy-new())
            self.length := _
        if self.arguments?
            self.arguments.link-types()
        if self.parameters?
            for sub-type in self.parameters.iter()
                sub-type.link-types(user node)
        self.link-parameters(user node)
    
    func add-default-length-type()
        new TypeInstance uint32
        uint32.type-data := glob.type-int
        string-new-copy(user "Uint32")->(owner uint32.name)
        uint32.set-int-range()
        self.parameters.add(owner uint32)
    
    func link-parameters(user SyntaxTreeNode node)
        if self.type-data is glob.type-array
            if not self.parameters?
                node.syntax-error-msg(user "missing subtype for array")
            user TypeData item-type(user self.parameters.first.item.type-data)
            if item-type.constructor?
                node.syntax-error(
                        user "array of type with constructor",
                        user item-type.name)
            if item-type is glob.type-generic
                node.syntax-error-msg(
                        user "generic arrays not supported")
            if item-type.is-dynamic and not item-type.is-struct
                node.syntax-error(
                        user "array of type without structure",
                        user item-type.name)
        else-if self.parameters?
            if not self.type-data.parameters?
                node.syntax-error(
                        user "parameter given for type with no parameters",
                        user self.type-data.name)
            var ListIterator{String} param-iter(user self.type-data.parameters)
            for sub-type in self.parameters.iter()
                if not param-iter.has()
                    node.syntax-error(
                            user "too many parameters given for type",
                            user self.type-data.name)
                if self.type-data is glob.type-pointer
                    if sub-type.type-data.is-dynamic
                        node.syntax-error(
                                user "dynamic pointed type",
                                user sub-type.type-data.name)
                else-if sub-type.conditional
                    node.syntax-error(
                            user "conditional parameter type",
                            user sub-type.type-data.name)
                if sub-type.type-data is glob.type-array
                    node.syntax-error-msg(
                            user "array as parameter type is unsupported")
                param-iter.next()
            if param-iter.has()
                node.syntax-error(
                        user "too few parameter given for type",
                        user self.type-data.name)
        else-if self.type-data is glob.type-func and not self.arguments?
            node.syntax-error-msg(user "missing arguments in function type")
    
    func analyze(user SyntaxTreeNode node)
        self.link-types(user node)
        self.analyze-after-link(user node, copy false)
    
    func analyze-after-link(user SyntaxTreeNode node, copy Bool constant-length)
        if self.int-range?
            self.int-range.set-values(user node)
        if self.type-data is glob.type-array and self.length?
            if self.length-owner.parsed()
                self.length.analyze()
            owner TypeInstance length-type
            if self.length.result-type.type-data is glob.type-type and
                    self.length-owner.parsed()
                length-type := self.length.result-type.parameters.first.item
                if length-type.int-range?
                    if length-type.int-range.min-value.sign() < 0
                        assert node?
                        node.syntax-error-long(
                                user "negative array length minimum",
                                user length-type.int-range.min-value)
                self.length.result-type := length-type
                self.length-owner.expression := _
                self.length := _
            else
                self.length.result-type.copy-new()->(owner length-type)
                if not self.length.parsed()
                    self.length := _
                else-if length-type.int-range?
                    if length-type.int-range.max-value.sign() > 0 and
                            length-type.int-range.min-value.sign() < 0
                        length-type.int-range.min-value := Long()
                        length-type.int-range.set-sign-and-bits(user node)
            if length-type.type-data is-not glob.type-int
                assert node?
                node.syntax-error(
                        user "expected integer as array length, got",
                        user length-type.type-data.name)
            self.parameters.add(owner length-type)
        if self.length?
            if constant-length
                user Long length-value
                self.length.get-constant-value()->(user length-value)
                if not length-value?
                    assert node?
                    node.syntax-error-msg(
                            user "sequence length is not constant")
                if length-value.sign() <= 0
                    assert node?
                    node.syntax-error-msg(
                            user "sequence length is not positive")
            else
                user IntRange range(user self.length.result-type.int-range)
                if range.max-value.sign() <= 0
                    assert node?
                    node.syntax-error-long(
                            user "sequence length never positive with \
                            maximum value of",
                            user range.max-value)
            self.length.check-no-error()
        if self.arguments?
            self.arguments.analyze()
        if self.parameters?
            for sub-type in self.parameters.iter()
                sub-type.analyze-after-link(user node, copy constant-length)
    
    func can-be-assigned-to(user TypeInstance target)->(var Bool can)
        can := false
        var Int self-access(copy Access.USER)
        if self.type-data.is-primitive
            self-access := Access.VAR
        var Int target-access(copy Access.USER)
        if target.type-data.is-primitive
            target-access := Access.VAR
        try
            self.check-assign-to(
                    copy self-access, user target, copy target-access, user _)
            can := true
    
    func check-assign-from(copy Int access, user SyntaxTreeNode node)->(
            owner Expression value)
        if value.access = Access.OWNER and access = Access.STRONG
            value.check-error-propagated(
                    user "ignoring initialization error check")
        if self.type-data is glob.type-array and self.parameters? and
                value.result-type.type-data is glob.type-string
            if self.parameters.first.item.type-data is glob.type-byte
                self.func-wrap(user "bytes")->(owner value)
        var Bool check-conditional(copy not self.conditional and
                self.type-data is-not glob.type-ref)
        var Bool check-weak(copy not access-has-refman(copy access))
        var Bool check-length
        self.need-length-check-from(user value.result-type)->(var check-length)
        node.check-expression-errors(
                copy check-conditional,
                copy check-weak,
                copy not check-length)->(
                owner value)
        if check-length
            value := CheckArrayLengthExpression(
                    owner value, user self, copy access-is-owner(copy access))
            value.analyze()
        var Int bases
        value.result-type.check-assign-to(
                copy value.access, user self, copy access, user node)->(
                var bases)
        if bases > 0
            value := UpCastExpression(owner value, copy bases)
    
    func need-length-check-from(user TypeInstance value-type)->(
            var Bool check-length)
        check-length := false
        user TypeInstance target(user self)
        user TypeInstance value(user value-type)
        do
            while value.type-data is glob.type-array and value.parameters? and
                    target.type-data is glob.type-array and target.parameters?
            target.need-range-check-from(user value)->(var check-length)
            while not check-length
            target := target.parameters.first.item
            value := value.parameters.first.item
    
    func need-range-check-from(user TypeInstance value-type)->(
            var Bool check-range)
        self.parameters.first.next.item.int-range.need-check-from(
                user value-type.parameters.first.next.item.int-range)->(
                var check-range)
    
    func func-wrap(user String name)->(owner Expression value)
        user Expression orig-value(user value)
        value.error-expected := false
        new FieldExpression field(
                user value.code-node,
                owner value,
                owner string-new-copy(user name))
        new FunctionObjectCallExpression call(user field.code-node)
        call.function-object := field
        call.arguments := FunctionArguments()
        value := call
        value.restructure()->(owner value)
        value.analyze()
        value.error-propagated := orig-value.error-propagated
        value.error-expected := value.error-propagated and
                not orig-value.error-checked
    
    func check-assign-to(
            copy Int self-access,
            user TypeInstance target,
            copy Int target-access,
            user SyntaxTreeNode node)->(
            var Int bases)
        bases := 0
        
        if self.check-assign-to-before-access-pass(user target, user node)
            return
        self.check-assign-to-access(
                copy self-access, user target, copy target-access, user node)
        if self.check-assign-to-after-access-pass(
                user target, copy target-access)
            return
        
        self.check-assign-to-before-type-check(
                user target, copy target-access, user node)
        user TypeInstance matched-type
        owner TypeInstance base-type-instance
        self.check-assign-to-type-check(user target, user node)->(
                user matched-type, owner base-type-instance, var bases)
        self.check-assign-to-after-type-check(
                user target, user matched-type, user node)
    
    func check-assign-to-before-access-pass(
            user TypeInstance target, user SyntaxTreeNode node)->(
            var Bool passed)
        passed := true
        if self.type-data is glob.type-empty and target.type-data.is-ref()
            if not target.conditional
                assert node?
                node.syntax-error(
                        user "assigning empty into non-conditional type",
                        user target.type-data.name)
            return
        if target.type-data is glob.type-ref and not self.type-data.is-primitive
            return
        if target.type-data is glob.type-pointer
            if self.type-data is glob.type-pointer
                return
            if self.type-data.is-ref()
                if not target.parameters?
                    return
                user TypeInstance value(user self)
                if self.type-data is glob.type-array
                    value := self.parameters.first.item
                if value.can-be-assigned-to(user target.parameters.first.item)
                    return
        passed := false
    
    func check-assign-to-access(
            copy Int self-access,
            user TypeInstance target,
            copy Int target-access,
            user SyntaxTreeNode node)
        if access-is-owner(copy target-access)
            if not access-is-owner(copy self-access)
                assert node?
                node.syntax-error(
                        user "assigning into an owner a non-owner access",
                        user glob.access-names[self-access])
            if self.type-data is-not target.type-data and
                    self.type-data is-not glob.type-empty and
                    not target.type-data.is-primitive and
                    not target.type-data.is-dynamic and
                    not target.type-data is glob.type-file
                assert node?
                node.syntax-error2(
                        user "passing ownership of type",
                        user self.type-data.name,
                        user "into static type",
                        user target.type-data.name)
            if self.reference-path?
                if not self.reference-path.is-conditional()
                    if self.reference-path.field?
                        assert node?
                        node.syntax-error-ref(
                                user "cannot move non-conditional owner field",
                                user self.reference-path)
                    if not self.reference-path.variable.parent?
                        assert node?
                        node.syntax-error-ref(
                                user "cannot move non-conditional global owner",
                                user self.reference-path)
        if (not access-is-user(copy target-access) and
                access-is-user(copy self-access) and
                not target.type-data is glob.type-pointer) or
                (target-access = Access.S-VAR and self-access = Access.VAR)
            assert node?
            node.syntax-error2(
                    user "cannot assign value with access",
                    user glob.access-names[self-access],
                    user "into value with access",
                    user glob.access-names[target-access])
        if target-access = Access.WEAK and
                not access-has-refman(copy self-access)
            assert node?
            node.syntax-error(
                    user "assigning into a weak reference an illegal access",
                    user glob.access-names[self-access])
            
    func check-assign-to-after-access-pass(
            user TypeInstance target, copy Int target-access)->(
            var Bool passed)
        passed := true
        if self.type-data is glob.type-file-read-write-text and
                (target.type-data is glob.type-file or
                target.type-data is glob.type-file-read-text or
                target.type-data is glob.type-file-write-text)
            return
        if self.type-data is glob.type-file-read-write-binary and
                (target.type-data is glob.type-file or
                target.type-data is glob.type-file-read-binary or
                target.type-data is glob.type-file-write-binary)
            return
        if target.type-data is glob.type-file and
                (self.type-data is glob.type-file-read-text or
                self.type-data is glob.type-file-read-binary or
                self.type-data is glob.type-file-write-text or
                self.type-data is glob.type-file-write-binary)
            return
        passed := false

    func check-assign-to-before-type-check(
            user TypeInstance target,
            copy Int target-access,
            user SyntaxTreeNode node)
        if target.int-range? and self.int-range?
            target.int-range.check-assign-from(user self.int-range, user node)
        if self.type-data is glob.type-generic and
                target.type-data is glob.type-generic
            if not self.name.equal(user target.name)
                assert node?
                node.syntax-error2(
                        user "cannot assign generic subtype",
                        user self.name,
                        user "into different generic subtype",
                        user target.name)
        user Long target-length
        user Long value-length
        target.length.get-constant-value()->(user target-length)
        self.length.get-constant-value()->(user value-length)
        if target-length? and value-length? and
                self.type-data is glob.type-array
            if access-is-owner(copy target-access)
                if not long-equal(user target-length, user value-length)
                    assert node?
                    node.syntax-error-long2(
                            user "cannot assign array owner of length",
                            user value-length,
                            user "into array owner of different length",
                            user target-length)
            else-if long-larger(user target-length, user value-length)
                assert node?
                node.syntax-error-long2(
                        user "cannot assign array of length",
                        user value-length,
                        user "into array of larger length",
                        user target-length)
        else-if self.type-data is glob.type-array and self.parameters? and
                target.type-data is glob.type-array and target.parameters?
            target.parameters.first.next.item.int-range.check-assign-from(
                    user self.parameters.first.next.item.int-range,
                    user node)
                    
    func check-assign-to-type-check(
            user TypeInstance target,
            user SyntaxTreeNode node)->(
            user TypeInstance matched-type,
            owner TypeInstance base-type-instance,
            var Int bases)
        matched-type := self
        do
            while not target.type-data.is-same(user matched-type.type-data)
            while not matched-type.type-data.supported-dynamics.find(
                    user target.type-data.name)?
            if not matched-type.type-data.base-type?
                assert node?
                node.syntax-error2(
                        user "cannot assign",
                        user self.type-data.name,
                        user "into",
                        user target.type-data.name)
            owner TypeInstance prev-base-type-instance(owner base-type-instance)
            matched-type.type-data.base-type.new-replace-params-extended(
                    user matched-type, copy false)->(owner base-type-instance)
            matched-type := base-type-instance
            bases += 1
    
    func check-assign-to-after-type-check(
            user TypeInstance target,
            user TypeInstance matched-type,
            user SyntaxTreeNode node)
        if self.arguments?
            self.arguments.check-same-as(user target.arguments, copy node?)
        
        matched-type.check-sub-assign-to-switch(user target, user node)
    
    func check-sub-assign-to-switch(
            user TypeInstance target, user SyntaxTreeNode node)
        if self.type-data.is-primitive
            self.check-sub-equal(user target, user node)
        else-if self.type-data is glob.type-array
            self.check-array-sub-assign-to(user target, user node)
        else
            self.check-sub-assign-to(user target, user node)
    
    func check-sub-assign-to(
            user TypeInstance target, user SyntaxTreeNode node)
        if not target.parameters?
            return
        var ListIterator{TypeInstance} target-iter(user target.parameters)
        self.check-has-subytpe(user target-iter.get(), user node)
        for my-sub-type in self.parameters.iter()
            while target-iter.has()
            my-sub-type.check-assign-to(
                    copy Access.VAR,
                    user target-iter.get(),
                    copy Access.VAR,
                    user node)
            target-iter.next()
        
    func check-array-sub-assign-to(
            user TypeInstance target, user SyntaxTreeNode node)
        user TypeInstance target-sub-type(user target.parameters.first.item)
        self.check-has-subytpe(user target-sub-type, user node)
        user TypeInstance my-sub-type(user self.parameters.first.item)
        if my-sub-type.type-data is-not target-sub-type.type-data
            assert node?
            node.syntax-error2(
                    user "non matching array subtypes",
                    user my-sub-type.type-data.name,
                    user "and",
                    user target-sub-type.type-data.name)
        my-sub-type.int-range.check-equal(
                user target-sub-type.int-range, user node)
        user Long target-length
        user Long value-length
        target-sub-type.length.get-constant-value()->(user target-length)
        my-sub-type.length.get-constant-value()->(user value-length)
        if target-length? and value-length?
            if not long-equal(user target-length, user value-length)
                assert node?
                node.syntax-error-long2(
                        user "non matching sub-array length",
                        user value-length,
                        user "and",
                        user target-length)
        my-sub-type.check-sub-assign-to-switch(user target-sub-type, user node)
    
    func check-has-subytpe(
            user TypeInstance target-sub-type, user SyntaxTreeNode node)
        if not self.parameters?
            assert node?
            node.syntax-error2(
                    user "cannot assign type",
                    user self.type-data.name,
                    user "with no parameter into same type with parameter",
                    user target-sub-type.type-data.name)
        
    func is-equal(user TypeInstance other)->(var Bool equal)
        equal := false
        try
            self.check-equal(user other, user _)
            equal := true
    
    func check-equal(user TypeInstance other, user SyntaxTreeNode node)
        if self.type-data is-not other.type-data
            assert node?
            node.syntax-error2(
                    user "non matching types",
                    user self.type-data.name,
                    user "and",
                    user other.type-data.name)
        if self.conditional != other.conditional
            assert node?
            node.syntax-error(
                    user "conditionals not matching in type",
                    user self.type-data.name)
        self.int-range.check-equal(user other.int-range, user node)
        if self.type-data is glob.type-array
            user Long self-length
            user Long other-length
            self.length.get-constant-value()->(user self-length)
            other.length.get-constant-value()->(user other-length)
            if self-length? != other-length?
                assert node?
                node.syntax-error-msg(user "non matching length dynamic")
            if self-length? and other-length?
                if not long-equal(user self-length, user other-length)
                    assert node?
                    node.syntax-error-long2(
                            user "non matching length",
                            user self-length,
                            user "and",
                            user other-length)
        self.check-sub-equal(user other, user node)
    
    func check-sub-equal(user TypeInstance target, user SyntaxTreeNode node)
        var ListIterator{TypeInstance} target-iter(user target.parameters)
        var ListIterator{TypeInstance} my-iter(user self.parameters)
        for my-sub-type in my-iter
            while target-iter.has()
            user TypeInstance target-sub-type
            target-iter.get()->(user target-sub-type)
            my-sub-type.check-equal(user target-sub-type, user node)
            target-iter.next()
        
    func check-sequence(user SyntaxTreeNode node)
        if self.type-data is glob.type-array and not self.length?
            assert node?
            node.syntax-error-msg(user "missing length for array")
        for sub-type in self.parameters.iter()
            sub-type.check-sequence(user node)
    
    func get-array-data-type-depth()->(
            user TypeInstance data-type, var Int depth)
        data-type := self
        depth := 0
        do
            while data-type.type-data is glob.type-array
            while data-type.parameters?
            data-type := data-type.parameters.first.item
            while data-type.type-data is glob.type-array
            depth += 1
    
    ~~~ Create a copy of self type-instance with generic parameters replaced by
    actual types based on `actual-params`. ~~~
    func new-replace-params(user TypeInstance actual-params)->(
            owner TypeInstance type-instance)
        self.new-replace-params-extended(user actual-params, copy true)->(
                owner type-instance)
    
    func new-replace-params-extended(
            user TypeInstance actual-params, copy Bool replace-bases)->(
            owner TypeInstance type-instance)
        self.copy-new()->(owner type-instance)
        type-instance.replace-type-parameters(
                user actual-params, copy replace-bases)
    
    func replace-type-parameters(
            user TypeInstance actual-params, copy Bool replace-bases)
        if not actual-params?
            return
        if replace-bases and actual-params.type-data.base-type?
            owner TypeInstance base-type
            actual-params.type-data.base-type.new-replace-params-extended(
                    user actual-params, copy false)->(owner base-type)
            self.replace-type-parameters(user base-type, copy true)
        if self.type-data is glob.type-generic and actual-params.parameters? and
                actual-params.type-data.parameters?
            var ListIterator{String} dec-iter(
                    user actual-params.type-data.parameters)
            for inst-param in actual-params.parameters.iter()
                while dec-iter.has()
                if dec-iter.get().equal(user self.name)
                    var Bool conditional(copy self.conditional)
                    inst-param.copy(user self)
                    self.conditional := conditional
                    break
                dec-iter.next()
        if self.parameters?
            for parameter in self.parameters.iter()
                parameter.replace-type-parameters(
                        user actual-params, copy replace-bases)
                
    func write-cname()
        if self.type-data is glob.type-int and self.int-range?
            self.int-range.write-cname()
        else-if self.type-data is glob.type-pointer
            if self.parameters?
                self.parameters.first.item.write-cname()
            else
                write(user "void")
            write(user "*")
        else
            self.type-data.write-cname()
