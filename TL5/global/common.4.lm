~~~ TL5 compiler - Common stuff ~~~
module tl5-compiler


const Int INDENTATION-SPACES 4


func get-sys-argv()->(user Array{String} argv)
    argv := sys.argv


~~~ Create a new copy of given string ~~~
func string-new-copy(user String text)->(owner String new-text)
    if not text?
        new-text := _
        return
    new-text := String{text.length + 1}()
    new-text.new(user text)


~~~ Create a new string that is a concatenation of the 2 given strings ~~~
func string-new-concat(user String first, user String second)->(
        owner String new-text)
    new-text := String{first.length + second.length + 1}(user first)
    new-text.concat(user second)


func print-msg-with-item(user String text, user String item)
    sys.print(user text)
    sys.print(user " \"")
    sys.print(user item)
    sys.print(user "\"")

func print-msg-with-long(user String text, user Long number)
    var String{128} number-str
    number.str(user number-str)
    print-msg-with-item(user text, user number-str)


enum NameGroup
    DEFAULT
    TYPE
    CONSTANT

func is-legal-name(user String name, copy Int name-type)->(var Bool is-legal)
    is-legal := false
    if name.length <= 0 or (name-type != NameGroup.DEFAULT and name.length <= 1)
        return
    var Char ch(copy name[0])
    var Int first(copy 1)
    if name-type != NameGroup.DEFAULT
        if ch < 'A' or ch > 'Z'
            return
        ch := name[1]
        first := 2
    if name-type = NameGroup.CONSTANT
        if (ch < 'A' or ch > 'Z') and ch != '-'
            return
    else-if ch < 'a' or ch > 'z'
        return
    for n in first:name.length
        var Char prev(copy ch)
        ch := name[n]
        if not ((ch >= '0' and ch <= '9') or
                (name-type != NameGroup.CONSTANT and ch >= 'a' and ch <= 'z') or
                (name-type != NameGroup.DEFAULT and ch >= 'A' and ch <= 'Z') or
                (name-type != NameGroup.TYPE and ch = '-' and prev != '-'))
            return
    is-legal := true
