module tl5-compiler

func write-output-header-code()
    write-global(user "#ifdef _MSC_VER\n")
    write-global(user "#define _CRT_SECURE_NO_WARNINGS\n")
    write-global(user "#endif\n")
    write-global(user "\n")
    write-global(user "#include <stdio.h>\n")
    write-global(user "#include <stdlib.h>\n")
    write-global(user "#include <string.h>\n")
    write-global(user "#include <stdint.h>\n")
    write-global(user "\n")
    write-global(user "#ifndef UINT8_MAX\n")
    write-global(user "#define UINT8_MAX 0xff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef INT8_MAX\n")
    write-global(user "#define INT8_MAX 0x7f\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef UINT16_MAX\n")
    write-global(user "#define UINT16_MAX 0xffff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef INT16_MAX\n")
    write-global(user "#define INT16_MAX 0x7fff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef UINT32_MAX\n")
    write-global(user "#define UINT32_MAX 0xffffffff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef INT32_MAX\n")
    write-global(user "#define INT32_MAX 0x7fffffff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef UINT64_MAX\n")
    write-global(user "#define UINT64_MAX 0xffffffffffffffff\n")
    write-global(user "#endif\n")
    write-global(user "#ifndef INT64_MAX\n")
    write-global(user "#define INT64_MAX 0x7fffffffffffffff\n")
    write-global(user "#endif\n")
    write-global(user "\n")
    write-global(user "/* builtin type defines */\n")
    write-global(user "\n")
    write-global(user "typedef uint32_t Char;\n")
    write-global(user "typedef uint8_t Byte;\n")
    write-global(user "typedef uint8_t Bool;\n")
    write-global(user "\n")
    write-global(user "enum Bool {\n")
    write-global(user "  false = 0,\n")
    write-global(user "  true = 1\n")
    write-global(user "};\n")
    write-global(user "\n")
    write-global(user "typedef enum Return_Code {\n")
    write-global(user "  OK = EXIT_SUCCESS,\n")
    write-global(user "  ERR = EXIT_FAILURE,\n")
    write-global(user "  FAIL = EXIT_FAILURE > EXIT_SUCCESS? EXIT_FAILURE + 1 : EXIT_SUCCESS + 1\n")
    write-global(user "} Return_Code;\n")
    write-global(user "\n")
    write-global(user "typedef struct Ref_Manager {\n")
    write-global(user "  size_t count;\n")
    write-global(user "  void* value;\n")
    write-global(user "  void* ref;\n")
    write-global(user "} Ref_Manager;\n")
    write-global(user "\n")
    write-global(user "typedef struct String {\n")
    write-global(user "  Byte* bytes;\n")
    write-global(user "  uint32_t length;\n")
    write-global(user "} String;\n")
    write-global(user "\n")
    write-global(user "typedef struct File {\n")
    write-global(user "  FILE* fobj;\n")
    write-global(user "} File;\n")
    write-global(user "\n")
    write-global(user "typedef File FileReadText;\n")
    write-global(user "typedef File FileReadBinary;\n")
    write-global(user "typedef File FileWriteText;\n")
    write-global(user "typedef File FileWriteBinary;\n")
    write-global(user "typedef File FileReadWriteText;\n")
    write-global(user "typedef File FileReadWriteBinary;\n")
    write-global(user "\n")
    write-global(user "#define VAR_POINTER(type, name) \\\n")
    write-global(user "  type name##_Var; \\\n")
    write-global(user "  type* name = &name##_Var;\n")
    write-global(user "#define VAR_REFMAN(type, name) \\\n")
    write-global(user "  VAR_POINTER(type, name) \\\n")
    write-global(user "  VAR_POINTER(Ref_Manager, name##_Refman)\n")
    write-global(user "\n")
    write-global(user "String* sys_M_argv = NULL;\n")
    write-global(user "uint32_t sys_M_argv_Length = 0;\n")
    write-global(user "VAR_POINTER(Ref_Manager, sys_M_argv_Refman)\n")
    write-global(user "VAR_REFMAN(File, sys_M_stdin)\n")
    write-global(user "VAR_REFMAN(File, sys_M_stdout)\n")
    write-global(user "VAR_REFMAN(File, sys_M_stderr)\n")
    write-global(user "\n")
    write-global(user "typedef void* Ref;\n")
    write-global(user "\n")
    write-global(user "typedef char cdef_M_Char;\n")
    write-global(user "typedef signed char cdef_M_Schar;\n")
    write-global(user "typedef unsigned char cdef_M_Uchar;\n")
    write-global(user "typedef short cdef_M_Short;\n")
    write-global(user "typedef unsigned short cdef_M_Ushort;\n")
    write-global(user "typedef int cdef_M_Int;\n")
    write-global(user "typedef unsigned int cdef_M_Uint;\n")
    write-global(user "typedef long cdef_M_Long;\n")
    write-global(user "typedef unsigned long cdef_M_Ulong;\n")
    write-global(user "typedef size_t cdef_M_Size;\n")
    write-global(user "typedef float cdef_M_Float;\n")
    write-global(user "typedef double cdef_M_Double;\n")
    write-global(user "typedef long double cdef_M_LongDouble;\n")
    write-global(user "\n")
    write-global(user "typedef void (*Dynamic_Del)(void*, void*);\n")
    write-global(user "\n")
    write-global(user "typedef void Generic_Type;\n")
    write-global(user "typedef struct Generic_Type_Dynamic { Dynamic_Del _del; } Generic_Type_Dynamic;\n")
    write-global(user "\n")
    write-global(user "typedef long Line_Count;\n")
    write-global(user "\n")
    write-global(user "typedef struct File_Coverage {\n")
    write-global(user "  char const* filename;\n")
    write-global(user "  Line_Count lines_number;\n")
    write-global(user "  Line_Count* line_count;\n")
    write-global(user "} File_Coverage;\n")
    write-global(user "\n")
    write-global(user "typedef struct Error_Message {\n")
    write-global(user "  Byte* str;\n")
    write-global(user "  unsigned length;\n")
    write-global(user "} Error_Message;\n")
    write-global(user "\n")
    write-global(user "typedef struct Error_Messages {\n")
    write-global(user "  Error_Message empty_object;\n")
    write-global(user "  Error_Message outdated_weak_reference;\n")
    write-global(user "  Error_Message object_memory;\n")
    write-global(user "  Error_Message managed_object_memory;\n")
    write-global(user "  Error_Message integer_overflow;\n")
    write-global(user "  Error_Message slice_index;\n")
    write-global(user "  Error_Message array_too_short;\n")
    write-global(user "  Error_Message file_not_opened;\n")
    write-global(user "  Error_Message file_read_failed;\n")
    write-global(user "  Error_Message file_write_failed;\n")
    write-global(user "  Error_Message zero_division;\n")
    write-global(user "  Error_Message loop_limit;\n")
    write-global(user "} Error_Messages;\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* macros */\n")
    write-global(user "\n")
    write-global(user "#define START_TRACE(line, cleanup, value, format, message, message_length) { \\\n")
    write-global(user "  LUMI_trace_print( \\\n")
    write-global(user "      format, \\\n")
    write-global(user "      LUMI_FILE_NAME, \\\n")
    write-global(user "      line, \\\n")
    write-global(user "      LUMI_FUNC_NAME, \\\n")
    write-global(user "      message, \\\n")
    write-global(user "      message_length); \\\n")
    write-global(user "  LUMI_err = value; \\\n")
    write-global(user "  LUMI_loop_depth = 0; \\\n")
    write-global(user "  goto cleanup; }\n")
    write-global(user "\n")
    write-global(user "#define RAISE(line, cleanup, message) { \\\n")
    write-global(user "  START_TRACE( \\\n")
    write-global(user "      line, \\\n")
    write-global(user "      cleanup, \\\n")
    write-global(user "      ERR, \\\n")
    write-global(user "      LUMI_raise_format, \\\n")
    write-global(user "      LUMI_error_messages.message.str, \\\n")
    write-global(user "      LUMI_error_messages.message.length) }\n")
    write-global(user "\n")
    write-global(user "#define USER_RAISE(line, cleanup, message, message_length) \\\n")
    write-global(user "  START_TRACE( \\\n")
    write-global(user "      line, \\\n")
    write-global(user "      cleanup, \\\n")
    write-global(user "      ERR, \\\n")
    write-global(user "      LUMI_raise_format, \\\n")
    write-global(user "      message, \\\n")
    write-global(user "      message_length)\n")
    write-global(user "\n")
    write-global(user "#define TEST_FAIL(line, cleanup, message_length, message) \\\n")
    write-global(user "  START_TRACE( \\\n")
    write-global(user "      line, cleanup, FAIL, LUMI_assert_format, (Byte*)message, message_length)\n")
    write-global(user "\n")
    write-global(user "#define TEST_ASSERT(line, cleanup, condition) if (!(condition)) \\\n")
    write-global(user "  TEST_FAIL(line, cleanup, 21, \"condition is not true\")\n")
    write-global(user "\n")
    write-global(user "#define TEST_FAIL_NULL(line, cleanup) \\\n")
    write-global(user "  START_TRACE(line, cleanup, FAIL, LUMI_assert_format, NULL, 0)\n")
    write-global(user "\n")
    write-global(user "#define CHECK(line, cleanup) if (LUMI_err != OK) { \\\n")
    write-global(user "  LUMI_trace_print( \\\n")
    write-global(user "      LUMI_traceline_format, LUMI_FILE_NAME, line, LUMI_FUNC_NAME, \\\n")
    write-global(user "      NULL, 0); \\\n")
    write-global(user "  LUMI_loop_depth = 0; \\\n")
    write-global(user "  goto cleanup; }\n")
    write-global(user "\n")
    write-global(user "#define IGNORE_ERRORS(call) \\\n")
    write-global(user "  ++LUMI_trace_ignore_count; (void)call; --LUMI_trace_ignore_count;\n")
    write-global(user "\n")
    write-global(user "#define CHECK_REF(line, cleanup, ref) \\\n")
    write-global(user "  if (ref == NULL) RAISE(line, cleanup, empty_object)\n")
    write-global(user "\n")
    write-global(user "#define CHECK_REFMAN(line, cleanup, refman) \\\n")
    write-global(user "  if (refman != NULL && (refman)->value == NULL) \\\n")
    write-global(user "    RAISE(line, cleanup, outdated_weak_reference)\n")
    write-global(user "\n")
    write-global(user "#define CHECK_REF_REFMAN(line, cleanup, ref, refman) \\\n")
    write-global(user "  CHECK_REF(line, cleanup, ref) \\\n")
    write-global(user "  if ((refman)->value == NULL) RAISE(line, cleanup, outdated_weak_reference)\n")
    write-global(user "\n")
    write-global(user "#define MAIN_PROXY(func) int main(int argc, char* argv[]) { \\\n")
    write-global(user "  return func(argc, argv); \\\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define MAIN_FUNC MAIN_PROXY(LUMI_main)\n")
    write-global(user "#define TEST_MAIN_FUNC MAIN_PROXY(LUMI_test_main)\n")
    write-global(user "#define USER_MAIN_HEADER Return_Code LUMI_user_main(void)\n")
    write-global(user "\n")
    write-global(user "#define ARRAY_DEL(Type, array, length) if (array != NULL) { \\\n")
    write-global(user "  uint32_t LUMI_n = 0; \\\n")
    write-global(user "  for (; LUMI_n < length; ++LUMI_n) \\\n")
    write-global(user "    Type##_Del(array + LUMI_n, NULL); \\\n")
    write-global(user "  }\n")
    write-global(user "\n")
    write-global(user "#define ARRAY_DEL_DYN(Type, array, length) if (array != NULL) { \\\n")
    write-global(user "  uint32_t LUMI_n = 0; \\\n")
    write-global(user "  for (; LUMI_n < length; ++LUMI_n) \\\n")
    write-global(user "    Type##_Del(array + LUMI_n, &Type##_dynamic); \\\n")
    write-global(user "  }\n")
    write-global(user "\n")
    write-global(user "#define SELF_REF_DEL(Type, field, _) \\\n")
    write-global(user "while (self->field != NULL) { \\\n")
    write-global(user "  Type* value = self->field; \\\n")
    write-global(user "  self->field = value->field; \\\n")
    write-global(user "  value->field = NULL; \\\n")
    write-global(user "  Type##_Del(value, NULL); \\\n")
    write-global(user "  free(value); \\\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define SELF_REF_DEL_STR(Type, field, _) \\\n")
    write-global(user "while (self->field != NULL) { \\\n")
    write-global(user "  Type* value = self->field; \\\n")
    write-global(user "  Ref_Manager* value_Refman = self->field##_Refman; \\\n")
    write-global(user "  self->field = value->field; \\\n")
    write-global(user "  self->field##_Refman = value->field##_Refman; \\\n")
    write-global(user "  value->field = NULL; \\\n")
    write-global(user "  value->field##_Refman = NULL; \\\n")
    write-global(user "  Type##_Del(value, NULL); \\\n")
    write-global(user "  LUMI_owner_dec_ref(value_Refman); \\\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define SELF_REF_DEL_DYN(Type, bases, field, field_Dynamic) \\\n")
    write-global(user "while (self->field != NULL) { \\\n")
    write-global(user "  Type* value = self->field; \\\n")
    write-global(user "  Type##_Dynamic* value_Dynamic = self->field_Dynamic; \\\n")
    write-global(user "  self->field = value->field; \\\n")
    write-global(user "  self->field_Dynamic = value->field_Dynamic; \\\n")
    write-global(user "  value->field = NULL; \\\n")
    write-global(user "  value->field_Dynamic = NULL; \\\n")
    write-global(user "  value_Dynamic->bases##del(value, value_Dynamic); \\\n")
    write-global(user "  free(value); \\\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define SELF_REF_DEL_STR_DYN(Type, bases, field, field_Dynamic) \\\n")
    write-global(user "while (self->field != NULL) { \\\n")
    write-global(user "  Type* value = self->field; \\\n")
    write-global(user "  Ref_Manager* value_Refman = self->field##_Refman; \\\n")
    write-global(user "  Type##_Dynamic* value_Dynamic = self->field_Dynamic; \\\n")
    write-global(user "  self->field = value->field; \\\n")
    write-global(user "  self->field##_Refman = value->field##_Refman; \\\n")
    write-global(user "  self->field_Dynamic = value->field_Dynamic; \\\n")
    write-global(user "  value->field = NULL; \\\n")
    write-global(user "  value->field##_Refman = NULL; \\\n")
    write-global(user "  value->field_Dynamic = NULL; \\\n")
    write-global(user "  value_Dynamic->bases##del(value, value_Dynamic); \\\n")
    write-global(user "  LUMI_owner_dec_ref(value_Refman); \\\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define INIT_VAR_REFMAN(line, cleanup, name) \\\n")
    write-global(user "  name##_Refman = LUMI_new_ref(&name); \\\n")
    write-global(user "  if (name##_Refman == NULL) { RAISE(line, cleanup, managed_object_memory) }\n")
    write-global(user "\n")
    write-global(user "#define INIT_NEW_REFMAN(line, cleanup, name) \\\n")
    write-global(user "  name##_Refman = LUMI_new_ref(name); \\\n")
    write-global(user "  if (name##_Refman == NULL) { \\\n")
    write-global(user "    free(name); \\\n")
    write-global(user "    name = NULL; \\\n")
    write-global(user "    RAISE(line, cleanup, managed_object_memory) }\n")
    write-global(user "\n")
    write-global(user "#define INIT_NEW(line, cleanup, name, type, size) \\\n")
    write-global(user "  name = LUMI_alloc(sizeof(type) * size); \\\n")
    write-global(user "  if (name == NULL) RAISE(line, cleanup, object_memory)\n")
    write-global(user "\n")
    write-global(user "#define INIT_NEW_LEN_ARRAY(line, cleanup, name, type, length, value_size) \\\n")
    write-global(user "  name##_Length = length; \\\n")
    write-global(user "  INIT_NEW_ARRAY(line, cleanup, name, type, name##_Length, value_size)\n")
    write-global(user "\n")
    write-global(user "#define INIT_NEW_ARRAY(line, cleanup, name, type, length, value_size) \\\n")
    write-global(user "  INIT_NEW(line, cleanup, name, type, length * value_size)\n")
    write-global(user "\n")
    write-global(user "#define SAFE_SUM_LARGER(a, b, c) a > c || b > c - a\n")
    write-global(user "\n")
    write-global(user "#define NULL_OR_VALUE(base, value) base != NULL? value: NULL\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* traceback */\n")
    write-global(user "\n")
    write-global(user "#define CRAISE(message) { \\\n")
    write-global(user "  LUMI_C_trace_print(__LINE__, LUMI_FUNC_NAME, (Byte*)message); \\\n")
    write-global(user "  return ERR; }\n")
    write-global(user "#define CCHECK(err) { \\\n")
    write-global(user "  Return_Code LUMI_cerr = err; \\\n")
    write-global(user "  if (LUMI_cerr != OK) return LUMI_cerr; }\n")
    write-global(user "\n")
    write-global(user "char* LUMI_raise_format = \"Error raised in %s:%lu %s()\\n\";\n")
    write-global(user "char* LUMI_assert_format = \"Assert failed in %s:%lu %s()\\n\";\n")
    write-global(user "char* LUMI_traceline_format = \"  called from %s:%lu %s()\\n\";\n")
    write-global(user "FILE* LUMI_trace_stream = NULL;\n")
    write-global(user "size_t LUMI_trace_ignore_count = 0;\n")
    write-global(user "Byte* LUMI_expected_error = NULL;\n")
    write-global(user "size_t LUMI_expected_error_trace_ignore_count = 0;\n")
    write-global(user "Generic_Type_Dynamic* dynamic_Void = NULL;\n")
    write-global(user "void LUMI_nop_Del(void* _, void* __) {}\n")
    write-global(user "Generic_Type_Dynamic LUMI_nop_dynamic = { LUMI_nop_Del };\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "#define ERROR_MESAGE(message) {(Byte*)message, sizeof(message) - 1}\n")
    write-global(user "\n")
    write-global(user "Error_Messages LUMI_error_messages = {\n")
    write-global(user "  ERROR_MESAGE(\"empty object used\"),\n")
    write-global(user "  ERROR_MESAGE(\"outdated weak reference used\"),\n")
    write-global(user "  ERROR_MESAGE(\"insufficient memory for object dynamic allocation\"),\n")
    write-global(user "  ERROR_MESAGE(\"insufficient memory for managed object\"),\n")
    write-global(user "  ERROR_MESAGE(\"integer overflow\"),\n")
    write-global(user "  ERROR_MESAGE(\"slice index out of bounds\"),\n")
    write-global(user "  ERROR_MESAGE(\"array too short\"),\n")
    write-global(user "  ERROR_MESAGE(\"file not opened\"),\n")
    write-global(user "  ERROR_MESAGE(\"file read failed\"),\n")
    write-global(user "  ERROR_MESAGE(\"file write failed\"),\n")
    write-global(user "  ERROR_MESAGE(\"zero division\"),\n")
    write-global(user "  ERROR_MESAGE(\"loop limit reached\")\n")
    write-global(user "};\n")
    write-global(user "\n")
    write-global(user "enum {\n")
    write-global(user "  LUMI_DEBUG_NOTHING = 0,\n")
    write-global(user "  LUMI_DEBUG_FAIL,\n")
    write-global(user "  LUMI_DEBUG_SUCCESS\n")
    write-global(user "};\n")
    write-global(user "int lumi_debug_value = LUMI_DEBUG_NOTHING;\n")
    write-global(user "\n")
    write-global(user "void LUMI_trace_print(\n")
    write-global(user "    char const* format,\n")
    write-global(user "    char const* filename,\n")
    write-global(user "    Line_Count line,\n")
    write-global(user "    char const* funcname,\n")
    write-global(user "    Byte const* message,\n")
    write-global(user "    uint32_t message_length) {\n")
    write-global(user "  if (LUMI_trace_ignore_count == 0) {\n")
    write-global(user "    if (message != NULL) {\n")
    write-global(user "      fprintf(\n")
    write-global(user "          LUMI_trace_stream,\n")
    write-global(user "          \"Error: %.*s\\n  \",\n")
    write-global(user "          message_length,\n")
    write-global(user "          message);\n")
    write-global(user "    }\n")
    write-global(user "    fprintf(LUMI_trace_stream, format, filename, line, funcname);\n")
    write-global(user "  }\n")
    write-global(user "  else if (LUMI_expected_error != NULL &&\n")
    write-global(user "      LUMI_expected_error_trace_ignore_count == LUMI_trace_ignore_count &&\n")
    write-global(user "      format != LUMI_traceline_format) {\n")
    write-global(user "    uint32_t n;\n")
    write-global(user "    if (message == NULL) {\n")
    write-global(user "      LUMI_expected_error = NULL;\n")
    write-global(user "      if (LUMI_trace_ignore_count == 1) {\n")
    write-global(user "        fprintf(\n")
    write-global(user "            LUMI_trace_stream,\n")
    write-global(user "            \"Assert failed: error with no message raised\\n  \");\n")
    write-global(user "      }\n")
    write-global(user "      return;\n")
    write-global(user "    }\n")
    write-global(user "    for (n = 0; n <= message_length; ++n) {\n")
    write-global(user "      if (((n == message_length)? '\\0': message[n]) !=\n")
    write-global(user "          LUMI_expected_error[n]) {\n")
    write-global(user "        LUMI_expected_error = NULL;\n")
    write-global(user "        if (LUMI_trace_ignore_count == 1) {\n")
    write-global(user "          fprintf(\n")
    write-global(user "              LUMI_trace_stream,\n")
    write-global(user "              \"Assert failed: unexpected error message \\\"%.*s\\\"\\n  \",\n")
    write-global(user "              message_length,\n")
    write-global(user "              message);\n")
    write-global(user "        }\n")
    write-global(user "        return;\n")
    write-global(user "      }\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "/* like strnlen */\n")
    write-global(user "uint32_t cstring_length(Byte* cstring) {\n")
    write-global(user "  uint32_t length = 0;\n")
    write-global(user "  while (cstring[length] != '\\0' && length < UINT32_MAX - 1) {\n")
    write-global(user "    ++length;\n")
    write-global(user "  }\n")
    write-global(user "  return length;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void LUMI_C_trace_print(Line_Count line, char const* funcname, Byte* message) {\n")
    write-global(user "  LUMI_trace_print(\n")
    write-global(user "      LUMI_raise_format,\n")
    write-global(user "      \"builtin\",\n")
    write-global(user "      line,\n")
    write-global(user "      funcname,\n")
    write-global(user "      message,\n")
    write-global(user "      cstring_length(message));\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* main */\n")
    write-global(user "\n")
    write-global(user "Return_Code LUMI_user_main(void);\n")
    write-global(user "Return_Code set_sys(int argc, char* argv[]);\n")
    write-global(user "#define SET_SYS err = set_sys(argc, argv); if (err != OK) return err;\n")
    write-global(user "\n")
    write-global(user "int LUMI_main(int argc, char* argv[]) {\n")
    write-global(user "  Return_Code err;\n")
    write-global(user "  LUMI_trace_stream = stderr;\n")
    write-global(user "  SET_SYS\n")
    write-global(user "  err = LUMI_user_main();\n")
    write-global(user "  if (err != OK) {\n")
    write-global(user "    fprintf(stderr, \"  called from executable start\\n\");\n")
    write-global(user "  }\n")
    write-global(user "  return err;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* tests */\n")
    write-global(user "\n")
    write-global(user "int LUMI_test_main(int argc, char* argv[]) {\n")
    write-global(user "  Return_Code err;\n")
    write-global(user "  LUMI_trace_stream = stdout;\n")
    write-global(user "  SET_SYS\n")
    write-global(user "  printf(\"Running tests:\\n\");\n")
    write-global(user "  err = LUMI_user_main();\n")
    write-global(user "  if (err == OK) {\n")
    write-global(user "    printf(\"Tests passed\\n\");\n")
    write-global(user "  }\n")
    write-global(user "  else {\n")
    write-global(user "    printf(\"Tests failed\\n\");\n")
    write-global(user "    return ERR;\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "Bool LUMI_run_test(char* test_name, Return_Code (*test_func)(void)) {\n")
    write-global(user "  Return_Code err;\n")
    write-global(user "  printf(\"testing %s... \", test_name);\n")
    write-global(user "  fflush(stdout);\n")
    write-global(user "  err = test_func();\n")
    write-global(user "  if (err == OK) {\n")
    write-global(user "    printf(\"OK\\n\");\n")
    write-global(user "    return true;\n")
    write-global(user "  }\n")
    write-global(user "  return false;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "unsigned calc_coverage(File_Coverage* files_coverage, size_t files_number) {\n")
    write-global(user "  size_t n;\n")
    write-global(user "  size_t all_lines = 0;\n")
    write-global(user "  size_t covered_lines = 0;\n")
    write-global(user "  for (n = 0; n < files_number; ++n) {\n")
    write-global(user "    Line_Count line;\n")
    write-global(user "    for (line = 0; line < files_coverage[n].lines_number; ++line) {\n")
    write-global(user "      if (files_coverage[n].line_count[line] >= 0) {\n")
    write-global(user "        ++all_lines;\n")
    write-global(user "      }\n")
    write-global(user "      if (files_coverage[n].line_count[line] > 0) {\n")
    write-global(user "        ++covered_lines;\n")
    write-global(user "      }\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  return covered_lines * 100 / all_lines;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void make_coverage_xml(File_Coverage* files_coverage, size_t files_number) {\n")
    write-global(user "  size_t n;\n")
    write-global(user "  FILE* xml = NULL;\n")
    write-global(user "  xml = fopen(\"cobertura.xml\", \"w\");\n")
    write-global(user "  if (xml == NULL) {\n")
    write-global(user "    return;\n")
    write-global(user "  }\n")
    write-global(user "  fputs(\"<?xml version=\\\"1.0\\\" ?>\\n\", xml);\n")
    write-global(user "  fputs(\n")
    write-global(user "    \"<!DOCTYPE coverage SYSTEM 'https://raw.githubusercontent.com/cobertura/\"\n")
    write-global(user "    \"cobertura/master/cobertura/src/site/htdocs/xml/coverage-loose.dtd'>\\n\",\n")
    write-global(user "    xml);\n")
    write-global(user "  fputs(\"<coverage timestamp=\\\"0\\\" version=\\\"lumi 0.0.5\\\">\\n\", xml);\n")
    write-global(user "  fputs(\" <packages>\\n\", xml);\n")
    write-global(user "\n")
    write-global(user "  for (n = 0; n < files_number; ++n) {\n")
    write-global(user "    Line_Count line;\n")
    write-global(user "    fputs(\"  <package name=\\\"\\\">\\n\", xml);\n")
    write-global(user "    fputs(\"   <classes>\\n\", xml);\n")
    write-global(user "    fprintf(\n")
    write-global(user "      xml,\n")
    write-global(user "      \"    <class name=\\\"%s\\\" filename=\\\"%s\\\">\\n\",\n")
    write-global(user "      files_coverage[n].filename,\n")
    write-global(user "      files_coverage[n].filename);\n")
    write-global(user "    fputs(\"     <methods/>\\n\", xml);\n")
    write-global(user "    fputs(\"     <lines>\\n\", xml);\n")
    write-global(user "\n")
    write-global(user "    for (line = 0; line < files_coverage[n].lines_number; ++line) {\n")
    write-global(user "      if (files_coverage[n].line_count[line] >= 0) {\n")
    write-global(user "        fprintf(\n")
    write-global(user "          xml,\n")
    write-global(user "          \"      <line branch=\\\"false\\\" hits=\\\"%ld\\\" number=\\\"%ld\\\"/>\\n\",\n")
    write-global(user "          files_coverage[n].line_count[line],\n")
    write-global(user "          line);\n")
    write-global(user "      }\n")
    write-global(user "    }\n")
    write-global(user "\n")
    write-global(user "    fputs(\"     </lines>\\n\", xml);\n")
    write-global(user "    fputs(\"    </class>\\n\", xml);\n")
    write-global(user "    fputs(\"   </classes>\\n\", xml);\n")
    write-global(user "    fputs(\"  </package>\\n\", xml);\n")
    write-global(user "  }\n")
    write-global(user "\n")
    write-global(user "  fputs(\" </packages>\\n\", xml);\n")
    write-global(user "  fputs(\"</coverage>\\n\", xml);\n")
    write-global(user "  fclose(xml);\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "Bool LUMI_test_coverage(File_Coverage* files_coverage, size_t files_number) {\n")
    write-global(user "  size_t n;\n")
    write-global(user "  unsigned coverage;\n")
    write-global(user "  Bool generate_xml = false;\n")
    write-global(user "  if (sys_M_argv != NULL && sys_M_argv_Refman->value != NULL &&\n")
    write-global(user "      sys_M_argv_Length > 1 && sys_M_argv[1].length > 1) {\n")
    write-global(user "    String* arg = sys_M_argv + 1;\n")
    write-global(user "    generate_xml = arg->bytes[0] == '-' && arg->bytes[1] == 'x';\n")
    write-global(user "  }\n")
    write-global(user "  printf(\"testing code coverage... \");\n")
    write-global(user "  coverage = calc_coverage(files_coverage, files_number);\n")
    write-global(user "  if (coverage == 100) {\n")
    write-global(user "    printf(\"100%%\\n\");\n")
    write-global(user "    if (generate_xml) {\n")
    write-global(user "      make_coverage_xml(files_coverage, files_number);\n")
    write-global(user "    }\n")
    write-global(user "    return true;\n")
    write-global(user "  }\n")
    write-global(user "\n")
    write-global(user "  printf(\"%u%% - failed, lines not covered:\\n\", coverage);\n")
    write-global(user "  for (n = 0; n < files_number; ++n) {\n")
    write-global(user "    coverage = calc_coverage(files_coverage + n, 1);\n")
    write-global(user "    if (coverage < 100) {\n")
    write-global(user "      Line_Count line;\n")
    write-global(user "      Line_Count first_uncovered;\n")
    write-global(user "      Bool prev_uncovered = false;\n")
    write-global(user "      printf(\"  %s(%u%%):\", files_coverage[n].filename, coverage);\n")
    write-global(user "      for (line = 0; line < files_coverage[n].lines_number; ++line) {\n")
    write-global(user "        if (files_coverage[n].line_count[line] == 0) {\n")
    write-global(user "          if (!prev_uncovered) {\n")
    write-global(user "            first_uncovered = line;\n")
    write-global(user "            prev_uncovered = true;\n")
    write-global(user "          }\n")
    write-global(user "        }\n")
    write-global(user "        else if (prev_uncovered) {\n")
    write-global(user "          printf(\" %ld\", first_uncovered);\n")
    write-global(user "          if (first_uncovered < line - 1) {\n")
    write-global(user "            printf(\"-%ld\", line - 1);\n")
    write-global(user "          }\n")
    write-global(user "          prev_uncovered = false;\n")
    write-global(user "        }\n")
    write-global(user "      }\n")
    write-global(user "      printf(\"\\n\");\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  if (generate_xml) {\n")
    write-global(user "    make_coverage_xml(files_coverage, files_number);\n")
    write-global(user "  }\n")
    write-global(user "  return false;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* reference counting */\n")
    write-global(user "\n")
    write-global(user "void new_Mock(Bool*);\n")
    write-global(user "Return_Code delete_Mock(Ref);\n")
    write-global(user "\n")
    write-global(user "void* LUMI_alloc(size_t size) {\n")
    write-global(user "  Bool allocate_success = true;\n")
    write-global(user "  new_Mock(&allocate_success);\n")
    write-global(user "  if (allocate_success) {\n")
    write-global(user "    return calloc(1, size);\n")
    write-global(user "  }\n")
    write-global(user "  return NULL;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "Ref_Manager* LUMI_new_ref(void* value) {\n")
    write-global(user "  Ref_Manager* ref = NULL;\n")
    write-global(user "  Bool allocate_success = true;\n")
    write-global(user "  new_Mock(&allocate_success);\n")
    write-global(user "  if (allocate_success) {\n")
    write-global(user "    ref = malloc(sizeof(Ref_Manager));\n")
    write-global(user "    if (ref != NULL) {\n")
    write-global(user "      ref->count = 1;\n")
    write-global(user "      ref->value = value;\n")
    write-global(user "      ref->ref = value;\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  return ref;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void LUMI_inc_ref(Ref_Manager* ref) {\n")
    write-global(user "  if (ref != NULL) {\n")
    write-global(user "    ++ref->count;\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void dec_ref(Ref_Manager* ref) {\n")
    write-global(user "  --ref->count;\n")
    write-global(user "  if (ref->count == 0) {\n")
    write-global(user "    IGNORE_ERRORS( delete_Mock(ref->ref); )\n")
    write-global(user "    free(ref);\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void LUMI_dec_ref(Ref_Manager* ref) {\n")
    write-global(user "  if (ref != NULL) {\n")
    write-global(user "    dec_ref(ref);\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void LUMI_var_dec_ref(Ref_Manager* ref) {\n")
    write-global(user "  if (ref != NULL) {\n")
    write-global(user "    ref->value = NULL;\n")
    write-global(user "    dec_ref(ref);\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void LUMI_owner_dec_ref(Ref_Manager* ref) {\n")
    write-global(user "  if (ref != NULL) {\n")
    write-global(user "    free(ref->value);\n")
    write-global(user "    ref->value = NULL;\n")
    write-global(user "    dec_ref(ref);\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "/* Pointer */\n")
    write-global(user "\n")
    write-global(user "#define cdef_M_Pointer_set_point_to(pointer, value, _) pointer = &value\n")
    write-global(user "#define cdef_M_Pointer_get_pointed_at(pointer, index) pointer[index]\n")
    write-global(user "#define cdef_M_Pointer_get_ref_at(pointer, index) (pointer + index)\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* Int */\n")
    write-global(user "\n")
    write-global(user "void String_clear(String* self);\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"Int.str\"\n")
    write-global(user "Return_Code Int_str(uint64_t abs, Bool is_neg, String* str, Bool is_append) {\n")
    write-global(user "  uint64_t tmp;\n")
    write-global(user "  uint64_t swaped = 0;\n")
    write-global(user "  uint32_t digits = 1;\n")
    write-global(user "  Byte* bytes = NULL;\n")
    write-global(user "  tmp = abs;\n")
    write-global(user "  while (tmp > 9) {\n")
    write-global(user "    ++digits;\n")
    write-global(user "    swaped = swaped * 10 + tmp % 10;\n")
    write-global(user "    tmp /= 10;\n")
    write-global(user "  }\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL) {\n")
    write-global(user "    bytes = NULL;\n")
    write-global(user "  } else if (is_append) {\n")
    write-global(user "    bytes = realloc(str->bytes, str->length + digits + is_neg + 1);\n")
    write-global(user "  } else {\n")
    write-global(user "    bytes = malloc(digits + is_neg + 1);\n")
    write-global(user "  }\n")
    write-global(user "  if (bytes == NULL) CRAISE(LUMI_error_messages.object_memory.str)\n")
    write-global(user "  if (!is_append) {\n")
    write-global(user "    String_clear(str);\n")
    write-global(user "  }\n")
    write-global(user "  str->bytes = bytes;\n")
    write-global(user "  if (is_append) {\n")
    write-global(user "    bytes += str->length;\n")
    write-global(user "    str->length += digits + is_neg;\n")
    write-global(user "  }\n")
    write-global(user "  else {\n")
    write-global(user "    str->length = digits + is_neg;\n")
    write-global(user "  }\n")
    write-global(user "  if (is_neg) {\n")
    write-global(user "    *bytes = '-';\n")
    write-global(user "    ++bytes;\n")
    write-global(user "  }\n")
    write-global(user "  *bytes = '0' + tmp;\n")
    write-global(user "  while (digits > 1) {\n")
    write-global(user "    ++bytes;\n")
    write-global(user "    *bytes = '0' + swaped % 10;\n")
    write-global(user "    swaped /= 10;\n")
    write-global(user "    --digits;\n")
    write-global(user "  }\n")
    write-global(user "  bytes[1] = '\\0';\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define Int_strU(value, str) Int_str(value, false, str, false)\n")
    write-global(user "#define Int_strS(value, str) Int_strS_append(value, str, false)\n")
    write-global(user "#define Int_strS_append(value, str, is_append) \\\n")
    write-global(user "    Int_str((value) < 0? -(value): (value), (value) < 0, str, is_append)\n")
    write-global(user "\n")
    write-global(user "#define CHECK_MIN_ADD(a, b) ((a < 0) && (b < 0) && (-a > INT64_MAX + b))\n")
    write-global(user "#define CHECK_MAX_ADD(a, b, limit) ((a > 0) && (b > 0) && (a > limit - b))\n")
    write-global(user "\n")
    write-global(user "#define CHECK_MIN_SUB(a, b) \\\n")
    write-global(user "  ((b > 0) && ((int64_t)a < (int64_t)(-INT64_MAX + b)))\n")
    write-global(user "#define CHECK_MAX_SUB(a, b, limit) ((a > 0) && (b < 0) && (a > limit + b))\n")
    write-global(user "\n")
    write-global(user "#define CHECK_MIN_MUL(a, b) \\\n")
    write-global(user "  ((a < 0) && (b > INT64_MAX / (-a))) || ((b < 0) && (a > INT64_MAX / (-b)))\n")
    write-global(user "#define CHECK_MAX_MUL(a, b, limit) \\\n")
    write-global(user "  ((a > 0) && (b > limit / a)) || ((b < 0) && (-a > limit / (-b)))\n")
    write-global(user "  \n")
    write-global(user "#define CLAMPED_ADD_UU_LIMIT(a, b, max, LIMIT) \\\n")
    write-global(user "  ((a > LIMIT - b) || (a + b > max))? max: (a + b)\n")
    write-global(user "#define CLAMPED_ADD_UU(a, b, min, max) \\\n")
    write-global(user "  CLAMPED_ADD_UU_LIMIT(a, b, max, UINT64_MAX)\n")
    write-global(user "#define CLAMPED_ADD_US(a, b, min, max) (b > 0)? \\\n")
    write-global(user "  (CLAMPED_ADD_UU(a, b, min, max)): (((-b > a) || (a + b < min))? min: (a + b))\n")
    write-global(user "#define CLAMPED_ADD_SU(a, b, min, max) \\\n")
    write-global(user "  (a > 0)? (CLAMPED_ADD_UU(a, b, min, max)): ((a + b > max)? max: (a + b))\n")
    write-global(user "#define CLAMPED_ADD_SS(a, b, min, max) (b > 0)? \\\n")
    write-global(user "  (CLAMPED_ADD_UU_LIMIT(a, b, max, INT64_MAX)): \\\n")
    write-global(user "  (((a < INT64_MIN - b) || (a + b < min))? min: (a + b))\n")
    write-global(user "\n")
    write-global(user "#define CLAMPED_SUB_SN_LIMIT(a, b, max, LIMIT) \\\n")
    write-global(user "  (((a > LIMIT + b) || (a - b > max))? max: (a - b))\n")
    write-global(user "#define CLAMPED_SUB_UU(a, b, min, max) ((a < b) || (a - b < min))? min: (a - b)\n")
    write-global(user "#define CLAMPED_SUB_US(a, b, min, max) (b > 0)? \\\n")
    write-global(user "  (CLAMPED_SUB_UU(a, b, min, max)): CLAMPED_SUB_SN_LIMIT(a, b, max, UINT64_MAX)\n")
    write-global(user "#define CLAMPED_SUB_SU(a, b, min, max) \\\n")
    write-global(user "  ((a < (int64_t)(INT64_MIN + b)) || (a - b < min))? min: (a - b)\n")
    write-global(user "#define CLAMPED_SUB_SS(a, b, min, max) (b > 0)? \\\n")
    write-global(user "  (CLAMPED_SUB_SU(a, b, min, max)): CLAMPED_SUB_SN_LIMIT(a, b, max, INT64_MAX)\n")
    write-global(user "\n")
    write-global(user "#define CLAMPED_MUL_UP_LIMIT(a, b, max, CMP_LIMIT) \\\n")
    write-global(user "  (((a CMP_LIMIT / b) || (a * b > max))? max: (a * b))\n")
    write-global(user "#define CLAMPED_MUL_UP(a, b, max) CLAMPED_MUL_UP_LIMIT(a, b, max, > UINT64_MAX)\n")
    write-global(user "#define CLAMPED_MUL_UN(a, b, min, cmp) \\\n")
    write-global(user "  (((a cmp INT64_MIN / b) || (a * b < min))? min: (a * b))\n")
    write-global(user "#define CLAMPED_MUL_UU(a, b, min, max) (a == 0 || b == 0)? min: \\\n")
    write-global(user "  CLAMPED_MUL_UP(a, b, max)\n")
    write-global(user "#define CLAMPED_MUL_US(a, b, min, max) (a == 0 || b == 0)? min: \\\n")
    write-global(user "  ((b > 0)? CLAMPED_MUL_UP(a, b, max): CLAMPED_MUL_UN(a, b, min, >=))\n")
    write-global(user "#define CLAMPED_MUL_SU(a, b, min, max) (a == 0 || b == 0)? (max < 0? max: 0): \\\n")
    write-global(user "  (a > 0)? CLAMPED_MUL_UP(a, b, max): CLAMPED_MUL_UN(a, b, min, >=)\n")
    write-global(user "#define CLAMPED_MUL_SS(a, b, min, max) (a == 0 || b == 0)? (max < 0? max: 0): \\\n")
    write-global(user "  ((a > 0)? \\\n")
    write-global(user "    ((b > 0)? CLAMPED_MUL_UP_LIMIT(a, b, max, > INT64_MAX): \\\n")
    write-global(user "      CLAMPED_MUL_UN(a, b, min, >=)): \\\n")
    write-global(user "    ((b > 0)? CLAMPED_MUL_UN(a, b, min, <=): \\\n")
    write-global(user "      CLAMPED_MUL_UP_LIMIT(a, b, max, < INT64_MAX)))\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* Buffer */\n")
    write-global(user "\n")
    write-global(user "void cdef_M_copy_to_buffer(\n")
    write-global(user "    Byte* source, Byte* target, uint32_t target_length) {\n")
    write-global(user "  if (source != NULL) {\n")
    write-global(user "    memcpy(target, source, target_length);\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* String */\n")
    write-global(user "\n")
    write-global(user "Byte String_empty_string[1] = {'\\0'};\n")
    write-global(user "\n")
    write-global(user "void String_Del(String* self, void* _) {\n")
    write-global(user "  if (self == NULL) return;\n")
    write-global(user "  if (self->bytes != String_empty_string) {\n")
    write-global(user "    free(self->bytes);\n")
    write-global(user "  }\n")
    write-global(user "  self->bytes = NULL;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "Generic_Type_Dynamic String_dynamic = { (Dynamic_Del)String_Del };\n")
    write-global(user "\n")
    write-global(user "#define String_length(self, length_out) *(length_out) = (self)->length\n")
    write-global(user "\n")
    write-global(user "void String_clear(String* self) {\n")
    write-global(user "  if (self->bytes != String_empty_string) {\n")
    write-global(user "    free(self->bytes);\n")
    write-global(user "  }\n")
    write-global(user "  self->bytes = String_empty_string;\n")
    write-global(user "  self->length = 0;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"String.new\"\n")
    write-global(user "Return_Code String_new(String* self, Byte* source, uint32_t source_length) {\n")
    write-global(user "  Byte* new_bytes = NULL;\n")
    write-global(user "  if (source_length == 0) {\n")
    write-global(user "    new_bytes = String_empty_string;\n")
    write-global(user "  } else {\n")
    write-global(user "    if (lumi_debug_value == LUMI_DEBUG_FAIL) {\n")
    write-global(user "      new_bytes = NULL;\n")
    write-global(user "    } else {\n")
    write-global(user "      new_bytes = malloc(source_length + 1);\n")
    write-global(user "    }\n")
    write-global(user "    if (new_bytes == NULL) CRAISE(LUMI_error_messages.object_memory.str)\n")
    write-global(user "    memcpy(new_bytes, source, source_length);\n")
    write-global(user "    new_bytes[source_length] = '\\0';\n")
    write-global(user "  }\n")
    write-global(user "  String_clear(self);\n")
    write-global(user "  self->bytes = new_bytes;\n")
    write-global(user "  self->length = source_length;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "void String_bytes(String* self, Byte** bytes, uint32_t* bytes_length) {\n")
    write-global(user "  if (self->bytes == NULL) {\n")
    write-global(user "    self->bytes = String_empty_string;\n")
    write-global(user "  }\n")
    write-global(user "  *bytes = self->bytes;\n")
    write-global(user "  *bytes_length = self->length;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "char* cdef_M_string_pointer(String* self) {\n")
    write-global(user "  if (self->bytes == NULL) {\n")
    write-global(user "    self->bytes = String_empty_string;\n")
    write-global(user "  }\n")
    write-global(user "  return (char*)(self->bytes);\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"cdef.copy-to-string\"\n")
    write-global(user "Return_Code cdef_M_copy_to_string(char* source, String* self) {\n")
    write-global(user "  CCHECK(String_new(\n")
    write-global(user "      self, (Byte*)source, cstring_length((Byte*)source)))\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "void String_equal(\n")
    write-global(user "    String* self, Byte* other, uint32_t other_length, Bool* out_equal) {\n")
    write-global(user "  if (self->bytes == NULL) {\n")
    write-global(user "    self->bytes = String_empty_string;\n")
    write-global(user "  }\n")
    write-global(user "  if (self->length != other_length) {\n")
    write-global(user "    *out_equal = false;\n")
    write-global(user "    return;\n")
    write-global(user "  }\n")
    write-global(user "  if (self->bytes == other) {\n")
    write-global(user "    *out_equal = true;\n")
    write-global(user "    return;\n")
    write-global(user "  }\n")
    write-global(user "  *out_equal = strncmp((char*)(self->bytes), (char*)other, other_length) == 0;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"String.get\"\n")
    write-global(user "Return_Code String_get(String* self, uint32_t index, Char* out_char) {\n")
    write-global(user "  /*CHECK_INDEX(index, length)\n")
    write-global(user "  *out_char = self[index];*/\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"String.set\"\n")
    write-global(user "Return_Code String_set(String* self, uint32_t index, Char ch) {\n")
    write-global(user "  /*CHECK_INDEX(index, length)\n")
    write-global(user "  self[index] = ch;*/\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"String.concat\"\n")
    write-global(user "Return_Code String_concat(String* self, Byte* ext, uint32_t ext_length) {\n")
    write-global(user "  Byte *new_bytes;\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL) {\n")
    write-global(user "    new_bytes = NULL;\n")
    write-global(user "  } else if (self->length == 0) {\n")
    write-global(user "    new_bytes = malloc(ext_length + 1);\n")
    write-global(user "  } else {\n")
    write-global(user "    new_bytes = realloc(self->bytes, self->length + ext_length + 1);\n")
    write-global(user "  }\n")
    write-global(user "  if (new_bytes == NULL) CRAISE(LUMI_error_messages.object_memory.str)\n")
    write-global(user "  memcpy(new_bytes + self->length, ext, ext_length);\n")
    write-global(user "  self->length += ext_length;\n")
    write-global(user "  new_bytes[self->length] = '\\0';\n")
    write-global(user "  self->bytes = new_bytes;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"String.append\"\n")
    write-global(user "Return_Code String_append(String* self, Char ch) {\n")
    write-global(user "  Byte tmp;\n")
    write-global(user "  if (ch > 255) CRAISE(\"appending character values over 255 not suppored yet\")\n")
    write-global(user "  tmp = ch;\n")
    write-global(user "  CCHECK(String_concat(self, &tmp, 1))\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define String_concat_int(self, value) \\\n")
    write-global(user "  Int_strS_append(value, self, (self)->length > 0)\n")
    write-global(user "\n")
    write-global(user "void String_find(\n")
    write-global(user "    String* self,\n")
    write-global(user "    Byte* pattern, uint32_t pattern_length,\n")
    write-global(user "    uint32_t* out_index) {\n")
    write-global(user "  /*uint32_t n;\n")
    write-global(user "  for (n = 0; n <= *length - pattern_length; ++n) {\n")
    write-global(user "    if (strncmp((char*)self + n, (char*)pattern, pattern_length) == 0) {\n")
    write-global(user "      *out_index = n;\n")
    write-global(user "      return;\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  *out_index = *length;*/\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "void String_has(\n")
    write-global(user "    String* self, Char ch, Bool* found) {\n")
    write-global(user "  uint32_t n;\n")
    write-global(user "  for (n = 0; n < self->length; ++n) {\n")
    write-global(user "    if (self->bytes[n] == ch) {\n")
    write-global(user "      *found = true;\n")
    write-global(user "      return;\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  *found = false;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* File */\n")
    write-global(user "\n")
    write-global(user "void File_Del(File* self, void* _) {\n")
    write-global(user "  if (self != NULL && self->fobj != NULL) {\n")
    write-global(user "    fclose(self->fobj);\n")
    write-global(user "    self->fobj = NULL;\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "#define FileReadText_Del(self, _) File_Del(self, _)\n")
    write-global(user "#define FileReadBinary_Del(self, _) File_Del(self, _)\n")
    write-global(user "#define FileWriteText_Del(self, _) File_Del(self, _)\n")
    write-global(user "#define FileWriteBinary_Del(self, _) File_Del(self, _)\n")
    write-global(user "#define FileReadWriteText_Del(self, _) File_Del(self, _)\n")
    write-global(user "#define FileReadWriteBinary_Del(self, _) File_Del(self, _)\n")
    write-global(user "\n")
    write-global(user "Generic_Type_Dynamic File_dynamic = { (Dynamic_Del)File_Del };\n")
    write-global(user "#define FileReadText_dynamic File_dynamic\n")
    write-global(user "#define FileReadBinary_dynamic File_dynamic\n")
    write-global(user "#define FileWriteText_dynamic File_dynamic\n")
    write-global(user "#define FileWriteBinary_dynamic File_dynamic\n")
    write-global(user "#define FileReadWriteText_dynamic File_dynamic\n")
    write-global(user "#define FileReadWriteBinary_dynamic File_dynamic\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"File.close\"\n")
    write-global(user "Return_Code File_close(File* self) {\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL || self->fobj != NULL) {\n")
    write-global(user "    if (lumi_debug_value == LUMI_DEBUG_FAIL || fclose(self->fobj) != 0)\n")
    write-global(user "      CRAISE(\"close file failed\")\n")
    write-global(user "    self->fobj = NULL;\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadText_close(self) File_close(self)\n")
    write-global(user "#define FileReadBinary_close(self) File_close(self)\n")
    write-global(user "#define FileWriteText_close(self) File_close(self)\n")
    write-global(user "#define FileWriteBinary_close(self) File_close(self)\n")
    write-global(user "#define FileReadWriteText_close(self) File_close(self)\n")
    write-global(user "#define FileReadWriteBinary_close(self) File_close(self)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"File.new\"\n")
    write-global(user "Return_Code File_new(File* self, String* name, char* mode) {\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_NOTHING) {\n")
    write-global(user "    CCHECK(File_close(self))\n")
    write-global(user "  }\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_SUCCESS) {\n")
    write-global(user "    if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "      self->fobj = fopen((char*)(name->bytes), mode);\n")
    write-global(user "    }\n")
    write-global(user "    if (self->fobj == NULL) CRAISE(\"open file failed\")\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadText_new(self, name) File_new(self, name, \"r\")\n")
    write-global(user "#define FileReadBinary_new(self, name) File_new(self, name, \"rb\")\n")
    write-global(user "#define FileWriteText_new(self, name, append) \\\n")
    write-global(user "  File_new(self, name, append? \"a\": \"w\")\n")
    write-global(user "#define FileWriteBinary_new(self, name, append) \\\n")
    write-global(user "  File_new(self, name, append? \"ab\": \"wb\")\n")
    write-global(user "#define FileReadWriteText_new(self, name, append, exist) \\\n")
    write-global(user "  File_new(self, name, append? \"a+\": exist? \"r+\": \"w+\")\n")
    write-global(user "#define FileReadWriteBinary_new(self, name, append, exist) \\\n")
    write-global(user "  File_new(self, name, append? \"ab+\": exist? \"rb+\": \"wb+\")\n")
    write-global(user "\n")
    write-global(user "#define CHECK_OPEN(self) \\\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL && self->fobj == NULL) \\\n")
    write-global(user "    CRAISE(LUMI_error_messages.file_not_opened.str)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"File.tell\"\n")
    write-global(user "Return_Code File_tell(File* self, int64_t* offset) {\n")
    write-global(user "  long ret = -1;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    ret = ftell(self->fobj);\n")
    write-global(user "  }\n")
    write-global(user "  if (ret < 0) CRAISE(\"getting file offset failed\")\n")
    write-global(user "  *offset = ret;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadText_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "#define FileReadBinary_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "#define FileWriteText_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "#define FileWriteBinary_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "#define FileReadWriteText_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "#define FileReadWriteBinary_tell(self, offset) File_tell(self, offset)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"File.seek\"\n")
    write-global(user "Return_Code File_seek(File* self, int64_t offset, int whence) {\n")
    write-global(user "  int ret = -1;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    ret = fseek(self->fobj, offset, whence);\n")
    write-global(user "  }\n")
    write-global(user "  if (ret != 0) CRAISE(\"setting file offset failed\")\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define File_seek_set(self, offset) File_seek(self, offset, SEEK_SET)\n")
    write-global(user "#define File_seek_cur(self, offset) File_seek(self, offset, SEEK_CUR)\n")
    write-global(user "#define File_seek_end(self, offset) File_seek(self, offset, SEEK_END)\n")
    write-global(user "#define FileReadText_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileReadBinary_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileWriteText_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileWriteBinary_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileReadWriteText_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileReadWriteBinary_seek_set(self, offset) File_seek_set(self, offset)\n")
    write-global(user "#define FileReadText_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileReadBinary_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileWriteText_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileWriteBinary_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileReadWriteText_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileReadWriteBinary_seek_cur(self, offset) File_seek_cur(self, offset)\n")
    write-global(user "#define FileReadText_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "#define FileReadBinary_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "#define FileWriteText_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "#define FileWriteBinary_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "#define FileReadWriteText_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "#define FileReadWriteBinary_seek_end(self, offset) File_seek_end(self, offset)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"File.flush\"\n")
    write-global(user "Return_Code File_flush(File* self) {\n")
    write-global(user "  int ret = EOF;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    ret = fflush(self->fobj);\n")
    write-global(user "  }\n")
    write-global(user "  if (ret != 0) CRAISE(\"flush file failed\")\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadText_flush(self) File_flush(self)\n")
    write-global(user "#define FileReadBinary_flush(self) File_flush(self)\n")
    write-global(user "#define FileWriteText_flush(self) File_flush(self)\n")
    write-global(user "#define FileWriteBinary_flush(self) File_flush(self)\n")
    write-global(user "#define FileReadWriteText_flush(self) File_flush(self)\n")
    write-global(user "#define FileReadWriteBinary_flush(self) File_flush(self)\n")
    write-global(user "\n")
    write-global(user "Bool getc_is_not_ok(int get, Byte* ch) {\n")
    write-global(user "  if (get == EOF) {\n")
    write-global(user "    return true;\n")
    write-global(user "  }\n")
    write-global(user "  else {\n")
    write-global(user "    *ch = get;\n")
    write-global(user "    return false;\n")
    write-global(user "  }\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define CHECK_READ(self, is_eof, read_fail) \\\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL || read_fail) { \\\n")
    write-global(user "    if (lumi_debug_value == LUMI_DEBUG_FAIL || feof(self->fobj) != 0) \\\n")
    write-global(user "      CRAISE(LUMI_error_messages.file_read_failed.str); \\\n")
    write-global(user "    is_eof = true; }\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileReadText.get\"\n")
    write-global(user "Return_Code FileReadText_get(FileReadText* self, Byte* out_char, Bool* is_eof) {\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  CHECK_READ(self, *is_eof, getc_is_not_ok(getc(self->fobj), out_char))\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteText_get(self, out_char, is_eof) \\\n")
    write-global(user "  FileReadText_get(self, out_char, is_eof)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileReadBinary.get\"\n")
    write-global(user "Return_Code FileReadBinary_get(\n")
    write-global(user "    FileReadBinary* self, Byte* out_byte, Bool* is_eof) {\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  CHECK_READ(self, *is_eof, fread(out_byte, sizeof(Byte), 1, self->fobj) < 1)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteBinary_get(self, out_byte, is_eof) \\\n")
    write-global(user "  FileReadBinary_get(self, out_byte, is_eof)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileReadText.getline-internal\"\n")
    write-global(user "Return_Code FileReadText_getline_internal(\n")
    write-global(user "    FileReadText* self,\n")
    write-global(user "    Byte* target, uint32_t target_length,\n")
    write-global(user "    Byte** line, uint32_t* line_length,\n")
    write-global(user "    Bool* is_eof,\n")
    write-global(user "    int (*char_getter)(FileReadText*)) {\n")
    write-global(user "  int ch = EOF;\n")
    write-global(user "  *line = target;\n")
    write-global(user "  *line_length = 0;\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_NOTHING) {\n")
    write-global(user "    ch = char_getter(self);\n")
    write-global(user "  } else if (lumi_debug_value == LUMI_DEBUG_SUCCESS) {\n")
    write-global(user "    ch = 'a';\n")
    write-global(user "  }\n")
    write-global(user "  while (ch != EOF && ch != '\\n') {\n")
    write-global(user "    if (*line_length >= target_length)\n")
    write-global(user "      CRAISE(LUMI_error_messages.array_too_short.str)\n")
    write-global(user "    target[*line_length] = ch;\n")
    write-global(user "    ++(*line_length);\n")
    write-global(user "    if (lumi_debug_value != LUMI_DEBUG_SUCCESS) {\n")
    write-global(user "      ch = getc(self->fobj);\n")
    write-global(user "    }\n")
    write-global(user "  }\n")
    write-global(user "  CHECK_READ(self, *is_eof, ch == EOF)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "int getc_char_getter(FileReadText* self) {\n")
    write-global(user "  return getc(self->fobj);\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileReadText.getline\"\n")
    write-global(user "Return_Code FileReadText_getline(\n")
    write-global(user "    FileReadText* self,\n")
    write-global(user "    Byte* target, uint32_t target_length,\n")
    write-global(user "    Byte** line, uint32_t* line_length,\n")
    write-global(user "    Bool* is_eof) {\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  CCHECK(FileReadText_getline_internal(\n")
    write-global(user "      self, target, target_length, line, line_length, is_eof, getc_char_getter))\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteText_getline(self, line, line_max_length, line_length, is_eof) \\\n")
    write-global(user "  FileReadText_getline(self, line, line_max_length, line_length, is_eof)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileReadBinary.read\"\n")
    write-global(user "Return_Code FileReadBinary_read(\n")
    write-global(user "    FileReadBinary* self,\n")
    write-global(user "    Byte* data, uint32_t data_length,\n")
    write-global(user "    uint32_t* bytes_read) {\n")
    write-global(user "  Bool is_eof;\n")
    write-global(user "  *bytes_read = 0;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    *bytes_read = fread(data, sizeof(Byte), data_length, self->fobj);\n")
    write-global(user "  }\n")
    write-global(user "  CHECK_READ(self, is_eof, *bytes_read < data_length)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteBinary_read(self, data, data_length, bytes_read) \\\n")
    write-global(user "  FileReadBinary_read(self, data, data_length, bytes_read)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileWriteText.put\"\n")
    write-global(user "Return_Code FileWriteText_put(FileWriteText* self, Char ch) {\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL || putc(ch, self->fobj) != ch)\n")
    write-global(user "    CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteText_put(self, ch) FileWriteText_put(self, ch)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileWriteBinary.put\"\n")
    write-global(user "Return_Code FileWriteBinary_put(FileWriteBinary* self, Byte value) {\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL ||\n")
    write-global(user "      fwrite(&value, sizeof(value), 1, self->fobj) < 1)\n")
    write-global(user "    CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteBinary_put(self, value) FileWriteBinary_put(self, value)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileWriteText.write\"\n")
    write-global(user "Return_Code FileWriteText_write(\n")
    write-global(user "    FileWriteText* self, Byte* text, uint32_t text_length, uint32_t* written) {\n")
    write-global(user "  *written = 0;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  while (*written < text_length) {\n")
    write-global(user "    int ch;\n")
    write-global(user "    ch = text[*written];\n")
    write-global(user "    if (lumi_debug_value == LUMI_DEBUG_FAIL || putc(ch, self->fobj) != ch)\n")
    write-global(user "      CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "    ++(*written);\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteText_write(self, text, text_length, written) \\\n")
    write-global(user "  FileWriteText_write(self, text, text_length, written)\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"FileWriteBinary.write\"\n")
    write-global(user "Return_Code FileWriteBinary_write(\n")
    write-global(user "    FileWriteBinary* self,\n")
    write-global(user "    Byte* data, uint32_t data_length,\n")
    write-global(user "    uint32_t* written) {\n")
    write-global(user "  *written = 0;\n")
    write-global(user "  CHECK_OPEN(self)\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    *written = fwrite(data, sizeof(Byte), data_length, self->fobj);\n")
    write-global(user "  }\n")
    write-global(user "  if (*written < data_length) CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "#define FileReadWriteBinary_write(self, data, data_length, written) \\\n")
    write-global(user "  FileWriteBinary_write(self, data, data_length, written)\n")
    write-global(user "\n")
    write-global(user "\n")
    write-global(user "/* system */\n")
    write-global(user "\n")
    write-global(user "#define INIT_REFMAN(name) \\\n")
    write-global(user "  name##_Refman->count = 2; \\\n")
    write-global(user "  name##_Refman->value = name; \\\n")
    write-global(user "  name##_Refman->ref = name;\n")
    write-global(user "\n")
    write-global(user "Return_Code set_sys(int argc, char* argv[]) {\n")
    write-global(user "  int arg;\n")
    write-global(user "  sys_M_argv_Length = argc;\n")
    write-global(user "  sys_M_argv = LUMI_alloc(sizeof(String) * argc);\n")
    write-global(user "  if (sys_M_argv == NULL) {\n")
    write-global(user "    fprintf(stderr, \"insufficient memory\\n\");\n")
    write-global(user "    return ERR;\n")
    write-global(user "  }\n")
    write-global(user "  INIT_REFMAN(sys_M_argv)\n")
    write-global(user "  INIT_REFMAN(sys_M_stdin)\n")
    write-global(user "  INIT_REFMAN(sys_M_stdout)\n")
    write-global(user "  INIT_REFMAN(sys_M_stderr)\n")
    write-global(user "  sys_M_stdin->fobj = stdin;\n")
    write-global(user "  sys_M_stdout->fobj = stdout;\n")
    write-global(user "  sys_M_stderr->fobj = stderr;\n")
    write-global(user "  for (arg = 0; arg < argc; ++arg) {\n")
    write-global(user "    sys_M_argv[arg].bytes = (Byte*)(argv[arg]);\n")
    write-global(user "    sys_M_argv[arg].length = cstring_length(sys_M_argv[arg].bytes);\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.print\"\n")
    write-global(user "Return_Code sys_M_print(Byte* text, uint32_t text_length) {\n")
    write-global(user "  uint32_t n;\n")
    write-global(user "  int ch;\n")
    write-global(user "  for (n = 0; n < text_length; ++n) {\n")
    write-global(user "    ch = text[n];\n")
    write-global(user "    if (lumi_debug_value == LUMI_DEBUG_FAIL || ch != putchar(ch))\n")
    write-global(user "      CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "  }\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.println\"\n")
    write-global(user "Return_Code sys_M_println(Byte* text, uint32_t text_length) {\n")
    write-global(user "  sys_M_print(text, text_length);\n")
    write-global(user "  if (lumi_debug_value == LUMI_DEBUG_FAIL || putchar('\\n') != '\\n')\n")
    write-global(user "    CRAISE(LUMI_error_messages.file_write_failed.str)\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.getchar\"\n")
    write-global(user "Return_Code sys_M_getchar(Char* out_char, Bool* is_eof) {\n")
    write-global(user "  Byte byte;\n")
    write-global(user "  CHECK_READ(sys_M_stdin, *is_eof, getc_is_not_ok(getchar(), &byte))\n")
    write-global(user "  *out_char = byte;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "int getchar_char_getter(FileReadText* self) {\n")
    write-global(user "  return getchar();\n")
    write-global(user "}\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.getline\"\n")
    write-global(user "Return_Code sys_M_getline(\n")
    write-global(user "    Byte* target, uint32_t target_length,\n")
    write-global(user "    Byte** line, uint32_t* line_length,\n")
    write-global(user "    Bool* is_eof) {\n")
    write-global(user "  CCHECK(FileReadText_getline_internal(\n")
    write-global(user "      sys_M_stdin,\n")
    write-global(user "      target, target_length,\n")
    write-global(user "      line, line_length,\n")
    write-global(user "      is_eof,\n")
    write-global(user "      getchar_char_getter))\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.exit\"\n")
    write-global(user "Return_Code sys_M_exit(int32_t status) {\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    exit(status);\n")
    write-global(user "  }\n")
    write-global(user "  CRAISE(\"exit failed\")\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.system\"\n")
    write-global(user "Return_Code sys_M_system(String* command, int32_t* status) {\n")
    write-global(user "  int res = -1;\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    res = system((char*)(command->bytes));\n")
    write-global(user "  }\n")
    write-global(user "  if (res == -1) CRAISE(\"command execution failed\")\n")
    write-global(user "  *status = res;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
    write-global(user "#define LUMI_FUNC_NAME \"sys.getenv\"\n")
    write-global(user "Return_Code sys_M_getenv(String* name, String* value, Bool* exists) {\n")
    write-global(user "  char* ret;\n")
    write-global(user "  Byte* new_bytes = NULL;\n")
    write-global(user "  uint32_t length;\n")
    write-global(user "  if (lumi_debug_value != LUMI_DEBUG_FAIL) {\n")
    write-global(user "    ret = getenv((char*)(name->bytes));\n")
    write-global(user "    if (ret == NULL) {\n")
    write-global(user "      *exists = false;\n")
    write-global(user "      return OK;\n")
    write-global(user "    }\n")
    write-global(user "    length = cstring_length((Byte*)ret);\n")
    write-global(user "    new_bytes = malloc(length + 1);\n")
    write-global(user "  }\n")
    write-global(user "  if (new_bytes == NULL) CRAISE(LUMI_error_messages.object_memory.str)\n")
    write-global(user "  memcpy(new_bytes, ret, length + 1);\n")
    write-global(user "  String_clear(value);\n")
    write-global(user "  value->bytes = new_bytes;\n")
    write-global(user "  value->length = length;\n")
    write-global(user "  *exists = true;\n")
    write-global(user "  return OK;\n")
    write-global(user "}\n")
    write-global(user "#undef LUMI_FUNC_NAME\n")
    write-global(user "\n")
