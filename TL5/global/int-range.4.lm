~~~ TL5 compiler - Integer range ~~~
module tl5-compiler


struct IntRange
    var ExpressionValue min-owner
    var ExpressionValue max-owner
    user ExpressionValue min-expression
    user ExpressionValue max-expression
    owner Long min-value
    owner Long max-value
    owner String name
    var Int bits
    var Bool is-signed
    
    func parse(user SyntaxTreeNode node, user SyntaxTreeCode code-node)
        self.min-owner.new(user ":}", user node, user code-node)
        if glob.last-char = ':'
            self.min-expression := self.min-owner
            self.max-owner.new(user "}", user node, user code-node)
        else
            self.max-owner.expression := self.min-owner.expression
        self.max-expression := self.max-owner
    
    func copy-new()->(owner IntRange other)
        other := IntRange()
        other.min-expression := self.min-expression
        other.max-expression := self.max-expression
        other.bits := self.bits
        other.is-signed := self.is-signed
        if self.min-value?
            self.min-value.copy()->(owner other.min-value)
        if self.max-value?
            self.max-value.copy()->(owner other.max-value)
    
    func set-values(user SyntaxTreeNode node)
        if self.max-value?
            return
        self.set-value(user node, user self.max-expression)->(
                owner self.max-value)
        if self.min-expression?
            self.set-value(user node, user self.min-expression)->(
                    owner self.min-value)
        else
            self.min-value := Long()
        self.set-sign-and-bits(user node)

    func set-value(
            user SyntaxTreeNode node, user ExpressionValue expression)->(
            owner Long value)
        if expression.parsed()
            node.analyze-expression(user expression, user glob.type-int)
        user Long constant-value
        if not expression.get-constant-value()->(user constant-value)?
            node.syntax-error-msg(user "integer range is not constant")
        constant-value.copy()->(owner value)

    func set-sign-and-bits(user SyntaxTreeNode node)->(var Bool legal)
        legal := false
        if node?
            if long-larger(user self.min-value, user self.max-value)
                node.syntax-error-long2(
                        user "integer range minimum",
                        user self.min-value,
                        user "larger than maximum",
                        user self.max-value)
        var Long limit
        var Long max8
        var Long max16
        var Long max32
        self.is-signed := self.min-value.sign() < 0
        if self.is-signed
            limit.parse(user "9223372036854775807")
            if long-larger(user self.max-value, user limit)
                if not node?
                    return
                node.syntax-error-long(
                        user "too high signed integer maximum",
                        user self.max-value)
            limit.parse(user "-9223372036854775808")
            if long-larger(user limit, user self.min-value)
                if not node?
                    return
                node.syntax-error-long(
                        user "too low signed integer minimum",
                        user self.min-value)
            var Long min8
            var Long min16
            var Long min32
            min8.set(copy -129)
            min16.parse(user "-32769")
            min32.parse(user "-2147483649")
            max8.set(copy 128)
            max16.parse(user "32768")
            max32.parse(user "2147483648")
            if long-larger(user self.min-value, user min8) and
                    long-larger(user max8, user self.max-value)
                self.bits := 8
            else-if long-larger(user self.min-value, user min16) and
                    long-larger(user max16, user self.max-value)
                self.bits := 16
            else-if long-larger(user self.min-value, user min32) and
                    long-larger(user max32, user self.max-value)
                self.bits := 32
            else
                self.bits := 64
        else
            limit.parse(user "18446744073709551615")
            if long-larger(user self.max-value, user limit)
                if not node?
                    return
                node.syntax-error-long(
                        user "too high unsigned integer maximum",
                        user self.max-value)
            max8.set(copy 256)
            max16.parse(user "65536")
            max32.parse(user "4294967296")
            if long-larger(user max8, user self.max-value)
                self.bits := 8
            else-if long-larger(user max16, user self.max-value)
                self.bits := 16
            else-if long-larger(user max32, user self.max-value)
                self.bits := 32
            else
                self.bits := 64
        legal := true
    
    ; func size-as(user IntRange other)->(var Bool same)
    ;     same := self.is-signed = other.is-signed and self.bits = other.bits
    
    func check-assign-from(user IntRange value, user SyntaxTreeNode node)
        self.set-values(user node)
        if long-larger(user value.max-value, user self.max-value)
            assert node?
            node.syntax-error-long2(
                    user "assigning integer with maximum of",
                    user value.max-value,
                    user "into integer with smaller maximum of",
                    user self.max-value)
        if long-larger(user self.min-value, user value.min-value)
            assert node?
            node.syntax-error-long2(
                    user "assigning integer with minimum of",
                    user value.min-value,
                    user "into integer with larger minimum of",
                    user self.min-value)
    
    func check-equal(user IntRange other, user SyntaxTreeNode node)->(
            var Bool same)
        if not self? or not other?
            return
        if not long-equal(user self.min-value, user other.min-value)
            assert node?
            node.syntax-error-long2(
                    user "non matching integer range minimum",
                    user self.min-value,
                    user "and",
                    user other.min-value)
        if not long-equal(user self.max-value, user other.max-value)
            assert node?
            node.syntax-error-long2(
                    user "non matching integer range maximum",
                    user self.max-value,
                    user "and",
                    user other.max-value)
    
    func write-cname()
        if not self.is-signed
            write(user "u")
        write(user "int")
        write-int(copy self.bits)
        write(user "_t")
