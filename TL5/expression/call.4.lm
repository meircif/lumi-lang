~~~ TL5 compiler - Call expressions ~~~
module tl5-compiler

~~~ Function call expression ~~~
class CallExpression(Expression)
    owner FunctionArguments arguments
    owner SyntaxTreeVariable native-output
    user Expression output

    func inst analyze-declaration(
            user FunctionArguments declaration,
            user TypeInstance actual-params,
            copy Int bases)
        self.arguments.has-error := declaration.has-error
        user TypeInstance result-type
        declaration.get-result-type()->(var self.access, user result-type)
        user Argument last-output
        if declaration.outputs.last?
            last-output := declaration.outputs.last.item
            if last-output.is-native
                self.native-output := SyntaxTreeVariable(
                        user self.code-node.parent)
                self.native-output.access := last-output.access
                self.native-output.is-aux := true
                last-output.get-type-instance().copy-new()->(
                        owner self.native-output.type-instance)
        if self.is-statement or not result-type?
            self.set-simple-type(user glob.type-void-expression)
        else
            result-type.new-replace-params(user actual-params)->(
                    owner self.result-type)
            result-type := self.result-type
        if result-type?
            if result-type.int-range?
                result-type.int-range.set-values(user self)
        if self.arguments.check-calling(
                user declaration, user actual-params, copy bases)
            ; add omitted output
            new CallArgument output
            output.code-node := self.code-node
            output.set-location()
            output.is-output := true
            output.is-generic := last-output.get-type-instance().type-data is
                    glob.type-generic
            output.access := last-output.access
            result-type.copy-new()->(owner output.real-type)
            owner VariableExpression variable-expression
            self.code-node.add-aux-variable(
                    copy last-output.access, copy false, user result-type)->(
                    owner variable-expression)
            self.result-type.reference-path :=
                    ReferencePath(user variable-expression.variable)
            output.value := variable-expression
            self.output := output.value
            self.arguments.outputs.add(owner output)
        else-if result-type?
            if self.native-output?
                self.result-type.reference-path := ReferencePath(
                        user self.native-output)
            else
                self.arguments.get-output()->(user self.output)
                self.output.result-type.reference-path.copy-new()->(
                        owner self.result-type.reference-path)
        self.assignable := result-type?

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.arguments.check-memory(user refs)
        if self.native-output?
            refs.add(user self.native-output)

    func dynamic write-preactions()
        self.arguments.write-preactions()
        self.write-function-check()
        if not self.is-statement and not self.native-output?
            self.write-func-call()
            self.code-node.write-spaces()

    func dynamic write-function-check()
        ; no check
        
    func dynamic write()
        if self.is-statement or self.native-output?
            self.write-func-call()
        else
            self.output.write()
            
    func dynamic write-safe()
        if self.native-output?
            self.write-func-call()
        else
            self.output.write-safe()

    func inst write-func-call()
        if self.arguments.has-error
            write(user "LUMI_err = ")
        else-if self.native-output? and not self.is-statement
            if not self.result-type.type-data.is-primitive
                write(user "((")
                self.result-type.write-cname()
                write(user "*)")
        self.write-function()
        if self.native-output? and not self.is-statement
            self.arguments.write-call()
            if not self.result-type.type-data.is-primitive
                write(user ")")
        else
            self.code-node.write-call(user self.arguments)

    func dynamic write-function()
        raise
    
    func dynamic write-refman()
        self.output.write-refman()
    
    func dynamic write-dynamic()
        self.output.write-dynamic()
    
    func dynamic write-dynamic-safe()
        self.output.write-dynamic-safe()

class FunctionCallExpression(CallExpression)
    owner FunctionExpression function
    user TypeInstance actual-params

    new(user SyntaxTreeCode code-node,
            user FunctionExpression function,
            owner FunctionArguments arguments,
            user TypeInstance actual-params)
        base(user code-node)
        self.arguments := arguments
        function.move-new()->(owner self.function)
        self.actual-params := actual-params

    func dynamic analyze()
        self.analyze-declaration(
                user self.function.function.arguments,
                user self.actual-params,
                copy self.function.bases)
        self.function.check-no-error()
        if self.function.function.arguments.has-error
            self.check-error-propagated(
                    user "ignoring error result check on function call")

    func dynamic check-memory(user ReferenceMemoryList refs)
        user SyntaxTreeVariable self-var
        self.check-constructor-inits(user refs)->(user self-var)
        base(user refs)
        if self-var?
            refs.mark-invalid-reference(user ReferencePath(user self-var))
        refs.mark-illegal-types(
                user self.function.function.delete-group, user _)
    
    func dynamic check-constructor-inits(user ReferenceMemoryList refs)->(
            user SyntaxTreeVariable self-var)
        ; check inside a constructor
        user SyntaxTreeFunction block-function
        self.code-node.get-function()->(user block-function)
        if not block-function.is-constructor()
            return
        ; check instance is "self.var-field.new(...)"
        if not self.arguments.parameters.first?
            return
        user Expression instance
        self.arguments.parameters.first.item.get-output()->(user instance)
        if not instance.result-type.reference-path?
            return
        block-function.arguments.parameters.first.item.get-variable()->(
                user self-var)
        if instance.result-type.reference-path.variable is-not self-var or
                not self.function.function.is-constructor()
            self-var := _
            return
        if not instance.result-type.reference-path.field?
            self.clear-base-references(user refs, user self-var)
            return
        self-var := _
        if instance.result-type.reference-path.field.field? or
                not access-is-only-var(
                copy instance.result-type.reference-path.field.variable.access)
            return
        refs.clear-invalid-reference(user instance.result-type.reference-path)

    func dynamic clear-base-references(
            user ReferenceMemoryList refs, user SyntaxTreeVariable self-var)
        var ReferencePath reference-path(user self-var)
        refs.clear-invalid-reference(user reference-path)
        user TypeData type-data(user self.function.function.parent-type)
        do
            for field in type-data.variables.iter()
                reference-path.field := ReferencePath(user field)
                refs.clear-invalid-reference(user reference-path)
            while type-data.base-type?
            type-data := type-data.base-type.type-data
    
    func dynamic write-function()
        self.function.write()
        if self.function.function.parent-type is glob.type-int
            user Argument first(user self.arguments.parameters.first.item)
            if first.get-output().result-type.int-range.min-value.sign() < 0
                write-c(copy 'S')
            else
                write-c(copy 'U')


class DynamicCallExpression(FunctionCallExpression)
    user Expression self-instance
    
    new(user SyntaxTreeCode code-node,
            user FunctionExpression function,
            owner FunctionArguments arguments,
            user TypeInstance actual-params,
            user Expression self-instance)
        self.self-instance := self-instance
        function.bases += function.function.dynamic-base-count
        function.function := function.function.dynamic-base-method
        base(user code-node, user function, owner arguments, user actual-params)

    func dynamic analyze()
        if self.self-instance.result-type.conditional
            self.self-instance.check-error-propagated(
                    user "ignoring empty reference check")
        base()

    func dynamic write-function-check()
        if not self.self-instance.result-type.conditional
            return
        ; if (`instance`_Dynamic == NULL) RAISE(`empty_object`)
        write(user "if (")
        self.self-instance.write-dynamic()
        write(user " == NULL) ")
        self.code-node.write-raise(user "empty_object")
        self.code-node.write-spaces()

    func dynamic write-function()
        self.self-instance.write-dynamic-safe()
        self.write-func-bases()
        write-cname(user self.function.function.name)

    func inst write-func-bases()
        write(user "->")
        self.write-bases(copy self.function.bases)


class FunctionObjectCallExpression(CallExpression)
    owner Expression function-object
    
    new(user SyntaxTreeCode code-node)
        base(user code-node)
        self.arguments := FunctionArguments()
    
    func inst parse-new(user String ends, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new FunctionObjectCallExpression call-expression(user code-node)
        call-expression.parse(owner expression)
        expression := call-expression
    
    func inst parse(owner Expression function-object)
        self.function-object := function-object
        var CallArgumentFactory argument-factory
        self.arguments.parse(
                user argument-factory,
                copy false,
                user self.code-node,
                user self.code-node,
                copy self.code-node.parent.indentation-spaces)
    
    func dynamic restructure()->(
            owner Expression expression, owner FunctionArguments arguments)
        self.function-object.restructure()->(
                owner self.function-object, owner self.arguments)
        if not self.arguments?
            self.function-object.error-expected := expression.error-expected
            self.function-object.error-propagated := expression.error-propagated
            expression := self.function-object
    
    func dynamic analyze()
        self.function-object.analyze()
        self.check-expression-all-errors()->(owner self.function-object)
        if self.function-object.result-type.type-data is-not glob.type-func
            self.syntax-error(
                    user "non callable type",
                    user self.function-object.result-type.type-data.name)
        self.analyze-declaration(
                user self.function-object.result-type.arguments,
                user self.function-object.result-type,
                copy 0)
        self.code-node.get-function().delete-group-builder.set-delete-all()
            
    func dynamic check-memory(user ReferenceMemoryList refs)
        self.function-object.check-memory(user refs)
        refs.mark-all-illegal()
    
    func dynamic write-function-check()
        self.function-object.write-preactions()

    func dynamic write-function()
        self.function-object.write-safe()


~~~ Function argument call ~~~
class CallArgument(Argument)
    owner Expression value
    owner TypeInstance real-type
    owner Expression aux-value
    user Expression original-value
    user Expression call-value
    user SyntaxTreeCode code-node
    var Bool is-generic
    var Bool is-analyzed
    
    func dynamic parse-value(
            user SyntaxTreeNode node,
            user SyntaxTreeCode code-node,
            copy Int indentation-spaces)
        self.code-node := code-node
        parse-new-expression(
                user ",)", user node, user code-node)->(owner self.value)
        if glob.last-char != ',' and glob.last-char != ')'
            self.syntax-error-c(user "expected \",\" or \")\", got")
    
    func dynamic analyze()
        if self.is-analyzed
            return
        self.is-analyzed := true
        analyze-expression()->(owner self.value)
        if self.is-output and not self.value.assignable
            self.syntax-error-msg(user "non assignable call output")
        if not self.is-output and self.access = Access.STRONG and
                self.value.access = Access.OWNER and
                self.value.result-type.type-data is-not glob.type-empty
            self.value := OwnerToStrongCallExpression(owner self.value)
    
    func dynamic check-same-type-as(
            user Argument other,
            user TypeInstance actual-params,
            copy Int bases,
            copy Bool print-error)
        user TypeInstance type-instance
        other.get-type-instance()->(user type-instance)
        type-instance.new-replace-params(user actual-params)->(
                owner self.real-type)
        if not self.is-output
            self.real-type.set-expected-type()->(owner self.value.result-type)
        self.analyze()
        if access-is-owner(copy self.access) and
                not access-is-owner(copy self.value.access)
            self.syntax-error(
                    user "assigning into an owner a non-owner access",
                    user glob.access-names[self.value.access])
        self.original-value := self.value
        if self.is-output
            if not self.real-type.is-equal(user self.value.result-type) or
                    self.access != self.value.access
                self.code-node.add-aux-variable(
                        copy self.access, copy false, user self.real-type)->(
                        owner self.aux-value)
                self.aux-value.error-propagated := self.value.error-propagated
                self.aux-value.error-expected := self.value.error-expected
                self.call-value := self.aux-value
                self.value.result-type.check-assign-from(
                        copy self.value.access, user self)->(
                        owner self.aux-value)
            else
                self.value.check-no-error()
        else
            self.real-type.check-assign-from(copy self.access, user self)->(
                    owner self.value)
        self.is-generic := type-instance.type-data is glob.type-generic
        self.is-native := other.is-native
        self.is-dynamic-self := other.is-dynamic-self
        if self.is-native and self.is-output
            self.syntax-error-msg(
                    user "output argument in native function call")
    
    func dynamic get-output()->(user Expression output)
        output := self.value
    
    func dynamic take-value()->(owner Expression value)
        value := self.value

    func dynamic check-memory(user ReferenceMemoryList refs)
        user ReferencePath reference-path(
                user self.value.result-type.reference-path)
        if self.is-output
            refs.clear-invalid-reference(user reference-path)
        if access-is-owner(copy self.access) and reference-path?
            refs.check-writing-owner-memory(user self.value)
            if not self.is-output
                refs.mark-invalid-reference(user reference-path)
        else-if access-is-temp(copy self.value.access) and
                self.access = Access.TEMP
            refs.check-writing-owner-memory(user self.value)
            refs.mark-temp-invalid(user reference-path)
        else-if self.is-output
            refs.check-writing-memory(user self.value)
        else
            self.value.check-memory(user refs)
        if not self.is-output
            refs.check-user(user self.value)
        else-if reference-path?
            refs.add(user reference-path.variable)
    
    func dynamic write-preactions()
        self.value.write-preactions()
        if self.value.access = Access.STRONG and self.access = Access.OWNER and
                self.value.result-type.type-data is-not glob.type-empty
            ; LUMI_var_dec_ref(s_Refman);
            write(user "LUMI_var_dec_ref(")
            self.value.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()
    
    func dynamic write()
        if not self.call-value?
            self.call-value := self.value
        if not self.original-value?
            self.original-value := self.value
        ; [[(void*)]&(]`value`[)]
        if self.is-output
            if self.is-generic
                write(user "(void*)")
            write(user "&(")
        self.call-value.write-cast()
        if self.is-output
            write(user ")")
        
        if not self.is-native
            if self.real-type.type-data is glob.type-array
                self.write-array()
        
            if access-has-refman(copy self.access)
                ; , [&(]`value`_Refman[)]
                write(user ", ")
                if self.is-output
                    write(user "&(")
                self.call-value.write-refman()
                if self.is-output
                    write(user ")")
        
        self.write-dynamic()

    func inst write-dynamic()
        user TypeData value-type(user self.call-value.result-type.type-data)
        if not self.is-output and not value-type.is-only-dynamic() and
                self.real-type.type-data.is-only-dynamic() and
                value-type is-not glob.type-empty
            write(user ", ")
            self.original-value.write-support-name(user self.real-type)
        else-if self.real-type.type-data.is-dynamic and not self.is-native
            ; , [[(void*)]&(]`value`_Dynamic[)|(void*)&dynamic_Void]
            write(user ", ")
            if self.is-generic and value-type is-not glob.type-empty
                write(user "(void*)")
            if self.is-output
                write(user "&(")
            self.call-value.write-dynamic-cast()
            if self.is-output
                write(user ")")
            if self.is-dynamic-self and not value-type.is-struct
                write(user "->_self_Dynamic")
        else-if self.is-dynamic-self
            ; &`value-type`_dynamic
            write(user ", &")
            value-type.write-cname()
            write(user "_dynamic")
        else-if self.is-generic
            ; , [&dynamic_Void|NULL|(Generic_Type_Dynamic*)&`value`_dynamic]
            write(user ", ")
            if self.is-output
                write(user "&dynamic_Void")
            else-if value-type is glob.type-empty
                write(user "NULL")
            else-if value-type.is-primitive
                write(user "&LUMI_nop_dynamic")
            else
                write(user "(Generic_Type_Dynamic*)&")
                self.call-value.result-type.write-cname()
                write(user "_dynamic")
    
    func inst write-array()
        ; , [*][&(]`value`_Length[)]
        user TypeInstance value-type(user self.call-value.result-type)
        user TypeInstance type-instance(user self.real-type)
        if not type-instance.length.get-constant-value()?
            write(user ", ")
            if self.is-output
                write(user "&(")
            self.call-value.write-length(user "_Length", user "0", copy true)
            if self.is-output
                write(user ")")
        user TypeInstance data-type
        var Int depth
        self.real-type.get-array-data-type-depth()->(
                user data-type, var depth)
        for n in depth
            value-type := value-type.parameters.first.item
            type-instance := type-instance.parameters.first.item
            if not type-instance.length.get-constant-value()?
                ; , [&(]`value`_Value[_value]_length[)]
                write(user ", ")
                if self.is-output
                    write(user "&(")
                user Long value-length
                value-type.length.get-constant-value()->(user value-length)
                if value-length?
                    write-long(user value-length)
                else
                    self.call-value.write()
                    write-array-value-length(copy n)
                if self.is-output
                    write(user ")")
    
    func dynamic write-postactions()
        if access-is-owner(copy self.access) and not self.is-output and
                self.value.result-type.type-data is-not glob.type-empty
            self.code-node.write-spaces()
            self.original-value.write-assign-null()
        if self.aux-value?
            var AssignExpression assign(
                    user self.code-node,
                    user self.value,
                    user self.aux-value,
                    copy false)
            self.code-node.write-spaces()
            assign.write-preactions()
            assign.write()


class CallArgumentFactory(ArgumentFactory)
    func dynamic new-argument()->(owner Argument new-argument)
        new-argument := CallArgument()
