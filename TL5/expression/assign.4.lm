~~~ TL5 compiler - assign expression ~~~
module tl5-compiler

~~~ Assign expression (:=) ~~~
class AssignExpression(Expression)
    owner VariableExpression aux-variable
    user Expression target
    user Expression value
    user Expression original-value
    var Bool is-initialization
    
    new(
            user SyntaxTreeCode code-node,
            user Expression target,
            user Expression value,
            copy Bool is-initialization)
        base(user code-node)
        self.target := target
        self.value := value
        self.is-initialization := is-initialization
        self.original-value := self.value
    
    func inst analyze-value()->(owner Expression value)
        self.target.result-type.check-assign-from(
                copy self.target.access, user self)->(owner value)
        self.value := value
        self.analyze()
    
    func dynamic analyze()
        if self.target.result-type.reference-path.equals(
                user self.value.result-type.reference-path)
            self.syntax-error-msg(user "assigning reference into itself")
        if access-is-owner(copy self.target.access)
            self.code-node.get-function().delete-group-builder.add-deleting(
                    user self.target.result-type)
    
    func dynamic check-memory(user ReferenceMemoryList refs)
        user ReferencePath target-path(
                user self.target.result-type.reference-path)
        if access-is-owner(copy self.target.access)
            refs.mark-illegal-type(user self.target.result-type)
        self.check-operands-memory(user refs)
        refs.check-user(user self.value)
        if target-path?
            if not target-path.field?
                refs.add(user target-path.variable)

    func inst check-operands-memory(user ReferenceMemoryList refs)
        user ReferencePath target-path(
                user self.target.result-type.reference-path)
        user ReferencePath value-path(
                user self.value.result-type.reference-path)
        var Bool was-left-invalid(copy refs.is-invalid(user target-path))
        var Bool is-forward-move
        self.check-forward-move()->(var is-forward-move)
        if self.target.access = Access.TEMP and not is-forward-move
            refs.mark-invalid-reference(user target-path)
        if access-is-owner(copy self.target.access) or
                self.target.access = Access.TEMP
            refs.check-writing-owner-memory(user self.value)
            if self.target.access = Access.TEMP and value-path?
                if not value-path.variable.parent?
                    self.syntax-error(
                            user "cannot take temporary owner from global",
                            user value-path.variable.name)
            if not is-forward-move
                if self.target.access = Access.TEMP
                    refs.mark-full-path-block-invalid(user value-path)
                else
                    refs.mark-invalid-reference(user value-path)
                refs.clear-invalid-reference(user target-path)
                refs.check-writing-owner-memory(user self.target)
        else
            self.value.check-memory(user refs)
            refs.clear-invalid-reference(user target-path)
            self.target.check-memory(user refs)
    
    func inst check-forward-move()->(var Bool res)
        res := false
        user ReferencePath target-path(
                user self.target.result-type.reference-path)
        user ReferencePath value-path(
                user self.value.result-type.reference-path)
        if not target-path? or not value-path?
            return
        if not access-is-owner(copy self.target.access) and
                not self.target.access = Access.TEMP
            return
        do
            if target-path.variable is-not value-path.variable
                return
            if not value-path.field?
                return
            while target-path.field?
            target-path := target-path.field
            value-path := value-path.field
        if access-is-owner(copy self.target.access)
            self.code-node.add-aux-variable(
                    copy self.value.access,
                    copy false,
                    user self.target.result-type)->(
                    owner self.aux-variable)
        res := true
    
    func dynamic write-preactions()
        self.value.write-preactions()
        self.target.write-preactions()
        if access-is-owner(copy self.target.access)
            self.write-owner-assign-preactions()
        self.write-assign-preactions(copy true)

    func inst write-assign-preactions(copy Bool full-assign)
        if access-has-refman(copy self.target.access) and
                access-has-refman(copy self.value.access)
            self.write-assign-refman(copy full-assign)
        if self.target.result-type.type-data.is-dynamic or
                self.target.is-generic-cast
            self.write-assign-dynamic()
        if self.target.result-type.type-data is glob.type-array
            self.write-array-preactions()
        else-if self.target.result-type.type-data.is-buffered()
            self.write-sequence-preactions()
    
    func inst write-array-preactions()
        user TypeInstance type-instance(user self.target.result-type)
        if not type-instance.length.get-constant-value()?
            self.target.write()
            write(user "_Length = ")
            if self.value.result-type.type-data.is-buffered()
                write(user "*(")
                self.value.write()
                write(user "_Length)")
            else
                self.value.write-length(user "_Length", user "0", copy true)
            write(user ";\n")
            self.code-node.write-spaces()
        
        user TypeInstance data-type
        var Int depth
        self.target.result-type.get-array-data-type-depth()->(
                user data-type, var depth)
        user TypeInstance sequence-type(user self.value.result-type)
        for n in depth
            if sequence-type?
                if sequence-type.parameters?
                    sequence-type := sequence-type.parameters.first.item
                else
                    sequence-type := _
            type-instance := type-instance.parameters.first.item
            if not type-instance.length.get-constant-value()?
                self.target.write()
                write-array-value-length(copy n)
                write(user " = ")
                user Long length-value
                if sequence-type?
                    sequence-type.length.get-constant-value()->(
                            user length-value)
                if self.value.result-type.type-data is glob.type-empty
                    write(user "0")
                else-if length-value?
                    write-long(user length-value)
                else
                    self.value.write()
                    write-array-value-length(copy n)
                write(user ";\n")
                self.code-node.write-spaces()
        
        if data-type.type-data.is-buffered()
            self.target.write()
            write(user "_Seq_length = ")
            self.value.write-length(
                    user "_Seq_length", user "NULL", copy false)
            write(user ";\n")
            self.code-node.write-spaces()
    
    func inst write-sequence-preactions()
        self.target.write()
        write(user "_Max_length = ")
        self.value.write-length(user "_Max_length", user "0", copy true)
        write(user ";\n")
        self.code-node.write-spaces()
        
        self.target.write()
        write(user "_Length = ")
        self.value.write-length(
                user "_Length", user "&Lumi_empty_length", copy false)
        write(user ";\n")
        self.code-node.write-spaces()
    
    func inst write-assign-refman(copy Bool full-assign)
        if full-assign and not access-is-owner(copy self.target.access)
            write(user "LUMI_inc_ref(")
            self.value.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()

            write(user "LUMI_dec_ref(")
            self.target.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()
        
        self.target.write-refman()
        write(user " = ")
        self.value.write-refman()
        write(user ";\n")
        self.code-node.write-spaces()

    func inst write-owner-assign-preactions()
        if not self.is-initialization
            if self.aux-variable?
                var AssignExpression assign(
                        user self.code-node,
                        user self.aux-variable,
                        user self.original-value,
                        copy false)
                assign.value := self.value
                assign.write-assign-preactions(copy false)
                assign.write-main-assign()
                assign.write-owner-null()
                self.code-node.write-spaces()
                self.original-value := self.aux-variable
                self.value := self.aux-variable
            self.write-left-delete()
        
            if self.target.access = Access.STRONG
                write(user "LUMI_owner_dec_ref(")
                self.target.write-refman()
                write(user ");\n")
                self.code-node.write-spaces()
            else
                write(user "free(")
                self.target.write()
                write(user ");\n")
                self.code-node.write-spaces()
        
        if self.value.access = Access.STRONG and
                self.target.access = Access.OWNER and
                self.value.result-type.type-data is-not glob.type-empty
            write(user "LUMI_var_dec_ref(")
            self.value.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()
    
    func inst write-assign-dynamic()
        user TypeData target-type(user self.target.result-type.type-data)
        user TypeData value-type(user self.value.result-type.type-data)
        self.target.write-dynamic()
        write(user " = ")
        if not target-type.is-struct and value-type is-not glob.type-empty and
                not value-type.is-only-dynamic()
            self.original-value.write-support-name(
                    user self.target.result-type)
        else-if (target-type is glob.type-generic or
                self.target.is-generic-cast) and
                value-type is-not glob.type-generic and
                not self.value.is-generic-cast and
                value-type is-not glob.type-empty
            write(user "(Generic_Type_Dynamic*)")
            if value-type.is-dynamic
                self.value.write-dynamic-safe()
            else
                write(user "&")
                self.value.result-type.write-cname()
                write(user "_dynamic")
        else-if self.value.is-generic-cast and
                not self.target.is-generic-cast and
                target-type is-not glob.type-generic
            self.value.write-dynamic-safe()
        else
            self.value.write-dynamic()
        write(user ";\n")
        self.code-node.write-spaces()
    
    func inst write-left-delete()
        user TypeData type-data(user self.target.result-type.type-data)
        if type-data.is-dynamic
            write(user "if (")
            self.target.write-dynamic()
            write(user " != NULL) ")
            self.target.write-dynamic-safe()
            write(user "->")
            type-data.write-all-bases()
            write(user "_del(")
        else-if type-data is-not glob.type-array
            type-data.write-cname()
            write(user "_Del(")
        else
            user TypeInstance data-type
            self.target.result-type.get-array-data-type-depth()->(
                    user data-type)
            if data-type.type-data.is-buffered()
                write(user "free(")
                self.target.write()
                write(user "_Seq_length);\n")
                self.code-node.write-spaces()
            else-if not data-type.type-data.is-primitive
                write(user "ARRAY_DEL(")
                data-type.write-cname()
                write(user ", ")
                self.target.write()
                write(user ", ")
                self.target.write-length(user "_Length", user "0", copy true)
                write(user ")\n")
                self.code-node.write-spaces()
            return
        self.target.write()
        if self.target.result-type.type-data.is-dynamic
            write(user ", ")
            self.target.write-dynamic()
        else-if type-data is-not glob.type-array
            write(user ", NULL")
        write(user ");\n")
        self.code-node.write-spaces()
    
    func dynamic write()
        ; not called in assignment operator
        self.write-main-assign()
        if access-is-owner(copy self.target.access)
            self.write-owner-null()
        
    func inst write-main-assign()
        self.target.write()
        write(user " = ")
        self.value.write-cast()
        write(user ";\n")
    
    func inst write-assign()
        self.write-assign-preactions(copy false)
        self.write-main-assign()

    func inst write-owner-null()
        ; called also in assignment operator
        if self.value.result-type.type-data is glob.type-empty
            return
        self.code-node.write-spaces()
        self.original-value.write-assign-null()
        if self.value.access = Access.OWNER and
                self.target.access = Access.STRONG
            self.code-node.write-spaces()
            self.write-macro-init(user "INIT_NEW_REFMAN", user self.target)
            write(user ")\n")
