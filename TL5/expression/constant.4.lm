~~~ TL5 compiler - Constant expressions ~~~
module tl5-compiler

~~~ ~
Convert text to number based on given `int-base`.
Return whether conversion succeeded
~~~
func get-number-value(user String text, copy Int int-base)->(
        owner Long value, var Bool is-number)
    is-number := true
    value := Long()
    var Bool is-hex(copy int-base = 16)
    for n in text.length
        value.mul(copy int-base)
        var Char ch(copy text[n])
        if is-hex
            if ch >= 'a' and ch <= 'f'
                value.add(copy ch - 'a' + 10)
            else-if ch >= 'A' and ch <= 'F'
                value.add(copy ch - 'A' + 10)
            else
                if ch < '0' or ch > '9'
                    is-number := false
                    return
                value.add(copy ch - '0')
        else
            if ch < '0' or ch > '0' + int-base - 1
                is-number := false
                return
            value.add(copy ch - '0')


~~~ A basic expression that has a single textual value ~~~
class TextExpression(Expression)
    owner String text
    
    func dynamic write()
        write(user self.text)
        
    func inst value-from-escape(copy Char escape)->(
            var Int value, var Bool is-legal)
        user String escapes(user "'\"?\\abfnrtv")
        user String values(user "\'\"\?\\\a\b\f\n\r\t\v")
        for n in escapes.length
            if escape = escapes[n]
                value := values[n]
                is-legal := true
                return
        is-legal := false


~~~ Constant integer expression ~~~
class IntExpression(Expression)
    owner Long value
    
    new(user SyntaxTreeCode code-node, copy Int value)
        base(user code-node)
        self.value := Long()
        self.value.set(copy value)
        self.set-simple-type(user glob.type-int)
        self.set-range()
        self.access := Access.VAR
    
    func inst set-range()
        self.result-type.set-int-constant(user self, user self.value)
    
    func inst parse-new(owner String text, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new IntExpression int-expression(user code-node, copy 0)
        int-expression.parse(owner text)
        expression := int-expression
    
    ~~~ parsing `123` or `-123` or `0b10011` or `0x3d4f` ~~~
    func inst parse(owner String text)
        user String number(user text)
        var Bool is-negative(copy number[0] = '-')
        if is-negative
            number := number[1:number.length - 1]
        if number[0] = '0' and number.length > 1
            var Char second(copy number[1])
            if second >= '0' and second <= '7'
                if not get-number-value(user number, copy 8)->(
                        owner self.value)
                    self.syntax-error(user "illegal octal number", user text)
            else
                number := number[2:number.length - 2]
                if second = 'b' or second = 'B'
                    if not get-number-value(user number, copy 2)->(
                            owner self.value)
                        self.syntax-error(
                                user "illegal binary number", user text)
                else-if second = 'x' or second = 'X'
                    if not get-number-value(user number, copy 16)->(
                            owner self.value)
                        self.syntax-error(
                                user "illegal hexadecimal number", user text)
                else
                    self.syntax-error(user "illegal number", user text)
        else-if not get-number-value(user number, copy 10)->(owner self.value)
            self.syntax-error(user "illegal number", user text)
        if is-negative
            self.value.negate()
        self.set-range()
        text := _
        
    func dynamic write()
        write-long(user self.value)


~~~ Constant character expression ~~~
class CharExpression(TextExpression)
    var Int value
    
    func inst parse-new(owner String text, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new CharExpression char-expression(user code-node)
        char-expression.parse(owner text)
        expression := char-expression
    
    ~~~ parsing `'a'` or `'\n'` or `'\xf5'` or `'\270'` ~~~
    func inst parse(owner String text)
        var Char ch
        owner Long value
        if text.length = 3
            self.value := text[1]
            if self.value = '\'' or self.value = '\\'
                self.syntax-error(user "illegal character constant", user text)
        else-if text.length = 4
            if text[1] != '\\'
                self.syntax-error(user "illegal character constant", user text)
            if not self.value-from-escape(copy text[2])->(var self.value)
                self.syntax-error(user "illegal character constant", user text)
        else-if text.length = 6
            if text[1] != '\\'
                self.syntax-error(user "illegal character constant", user text)
            ch := text[2]
            if ch = 'x'
                if not get-number-value(user text[3:2], copy 16)->(owner value)
                    self.syntax-error(
                            user "illegal character constant", user text)
            else
                if not get-number-value(user text[2:3], copy 8)->(owner value)
                    self.syntax-error(
                            user "illegal character constant", user text)
            self.value := value.int()
        else
            self.syntax-error(user "illegal character constant", user text)
        if text[text.length - 1] != '\''
            self.syntax-error(user "illegal character constant", user text)
        if self.value < 1 or self.value > 255
            self.syntax-error(user "illegal character constant", user text)
        self.set-simple-type(user glob.type-char)
        value := Long()
        value.set(copy self.value)
        self.result-type.set-int-constant(user self, user value)
        self.access := Access.VAR
        self.text := text


class ConstantBufferVariable(SyntaxTreeVariable)
    user String text
    
    new(user SyntaxTreeBlock parent, user String text)
        base(user parent)
        self.text := text
    
    func dynamic write()
        self.write-spaces()
        write(user "static Byte ")
        self.write-cname()
        write(user "[] = {")
        self.write-data()
        write(user "};\n")
    
    func dynamic write-data()
        for n in self.text.length div 2
            write(user "0x")
            write-c(copy self.text[2 * n])
            write-c(copy self.text[(2 * n) + 1])
            write-c(copy ',')
            self.write-new-line(copy n)
        
    func inst write-new-line(copy Int index)
        if (index + 1) mod 20 = 0
            write-c(copy '\n')
            self.write-spaces()
            write-spaces(copy INDENTATION-SPACES)


~~~ Constant buffer expression ~~~
class BufferExpression(TextExpression)
    user ConstantBufferVariable aux-variable
    
    func inst parse-new(owner String text, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new BufferExpression buffer-expression(user code-node)
        buffer-expression.parse(owner text)
        expression := buffer-expression
    
    func inst parse(owner String text)
        self.text := text
        self.set-simple-type(user glob.type-array)
        self.result-type.add-subtype-copy(user glob.type-byte)
        self.result-type.length := self.result-type.length-owner
        self.result-type.length.expression := IntExpression(
                user self.code-node,
                copy self.check-and-modify-text())
        self.result-type.length.update()
        self.result-type.parameters.add(
                owner self.result-type.length.expression.result-type.copy-new())
        self.access := Access.VAR
        self.is-var := true
    
    func dynamic check-and-modify-text()->(var Int length)
        if self.text.length < 2
            self.syntax-error(user "too short buffer constant", user self.text)
        if self.text[0] != '`' or self.text[self.text.length - 1] != '`'
            self.syntax-error(
                    user "no '`' around buffer constant", user self.text)
        var Int index-write(copy 0)
        for index-read in 1:self.text.length - 1
            var Char ch(copy self.text[index-read])
            if ch = '\n'
                self.check-indentation()->(var index-read)
            else-if (ch < 'a' or ch > 'f') and (ch < 'A' or ch > 'F') and
                    (ch < '0' or ch > '9')
                var String{2} char-str
                char-str.append(copy ch)
                self.syntax-error(user "illegal buffer data", user char-str)
            else
                self.text[index-write] := ch
                index-write += 1
        self.text.length := index-write
        if self.text.length mod 2 != 0
            self.syntax-error-msg(user "odd buffer data length")
        length := self.text.length div 2
        
    func inst check-indentation()->(var Int index-read)
        var Int expected(copy self.code-node.parent.indentation-spaces +
                (2 * INDENTATION-SPACES))
        var Int indentation(copy 0)
        do
            index-read += 1
            while index-read < self.text.length - 1
            while self.text[index-read] = ' '
            indentation += 1
            while indentation < expected
        if indentation < expected
            self.code-node.syntax-error-indentation(
                    copy indentation, copy expected)
    
    func dynamic analyze()
        self.add-aux-variable(owner ConstantBufferVariable(
                user self.code-node.parent, user self.text))
    
    func inst add-aux-variable(owner ConstantBufferVariable variable)
        variable.access := Access.VAR
        variable.is-create := true
        self.aux-variable := variable
        self.code-node.parent.set-aux-variable(
                owner variable, user self.result-type)
    
    func dynamic write()
        self.aux-variable.write-cname()


class ConstantStringVariable(ConstantBufferVariable)
    func inst write-hex-digit(copy Int value)
        if value > 9
            write-c(copy 'a' - 10 + value)
        else
            write-c(copy '0' + value)
    
    func dynamic write-data()
        var Int index
        for n in self.text.length
            write-c(copy '\'')
            var Char ch(copy self.text[n])
            if ch = '\''
                write-c(copy '\\')
            if ch < 32 or ch > 126
                write(user "\\x")
                var Int value(copy (ch + 256) mod 256)
                self.write-hex-digit(copy value div 16)
                self.write-hex-digit(copy value mod 16)
            else
                write-c(copy ch)
            if ch = '\\'
                n += 1
                write-c(copy self.text[n])
            write-c(copy '\'')
            write-c(copy ',')
            self.write-new-line(copy index)
            index += 1

~~~ Constant string expression ~~~
class StringExpression(BufferExpression)
    func inst parse-new(owner String text, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new StringExpression string-expression(user code-node)
        string-expression.parse(owner text)
        expression := string-expression
    
    func dynamic check-and-modify-text()->(var Int length)
        self.check-string(user self.text)
        var Int index-write(copy 0)
        for index-read in 1:self.text.length - 1
            if self.text[index-read] = '\n'
                var Bool skip-new-line
                if index-read > 0
                    skip-new-line := self.text[index-read - 1] = '\\'
                self.check-indentation()->(var index-read)
                if skip-new-line
                    index-write -= 1
                else
                    self.text[index-write] := '\\'
                    index-write += 1
                    self.text[index-write] := 'n'
                    index-write += 1
            else
                self.check-character(copy index-read)
                self.text[index-write] := self.text[index-read]
                index-write += 1
        self.text[index-write] := '\\'
        index-write += 1
        self.text[index-write] := '0'
        index-write += 1
        self.text.length := index-write
        length := self.text.length
    
    func inst check-character(copy Int n)
        if self.text[n] != '\\' or self.text[n - 1] = '\\' or
                self.text[n + 1] = '\n'
            return
        owner Long long-value
        var Int value
        if self.text[n + 1] >= '0' and self.text[n + 1] <= '7'
            if n > self.text.length - 5
                self.syntax-error(
                        user "unfinished escape in string literal",
                        user self.text[1:self.text.length - 2])
            if not get-number-value(user self.text[n + 1:3], copy 8)->(
                    owner long-value)
                self.syntax-error(
                        user "illegal character constant", user self.text[n:4])
        else-if self.text[n + 1] = 'x'
            if n > self.text.length - 5
                self.syntax-error(
                        user "unfinished escape in string literal",
                        user self.text[1:self.text.length - 2])
            if not get-number-value(user self.text[n + 2:2], copy 16)->(
                    owner long-value)
                self.syntax-error(
                        user "illegal character constant", user self.text[n:4])
        else-if not self.value-from-escape(copy self.text[n + 1])->(var value)
            self.syntax-error(
                    user "illegal character constant", user self.text[n:2])
        if long-value?
            long-value.int()->(var value)
            if value < 1 or value > 255
                self.syntax-error(
                        user "illegal character constant", user self.text[n:4])

    func dynamic analyze()
        self.add-aux-variable(owner ConstantStringVariable(
                user self.code-node.parent, user self.text))


~~~ Constant empty expression `_` ~~~
class EmptyExpression(Expression)
    new(user SyntaxTreeCode code-node)
        base(user code-node)
        self.set-simple-type(user glob.type-empty)
        self.access := Access.STRONG
    
    func dynamic write()
        write(user "NULL")
    
    func dynamic write-dynamic()
        self.write()
    
    func dynamic write-refman()
        self.write()
