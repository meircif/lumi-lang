~~~ TL5 compiler - Slice expression ~~~
module tl5-compiler

~~~ A slice expression ~~~
class SliceExpression(Expression)
    owner Expression sequence
    owner Expression index
    owner Expression second-index-owner
    owner VariableExpression slice-variable
    user Expression second-index
    var Bool need-index-check
    var Bool need-second-index-check
    var Bool need-bounds-check
    var Bool force-no-checks
    
    func inst parse-new(user String ends, user SyntaxTreeCode code-node)->(
            owner Expression expression)
        new SliceExpression slice-expression(user code-node)
        slice-expression.parse(owner expression)
        expression := slice-expression
    
    ~~~ parsing `sequence[index]` or `sequence[index:second-index]` ~~~
    func inst parse(owner Expression sequence)
        self.sequence := sequence
        parse-new-expression(user ":]", user self, user self.code-node)->(
                owner self.index)
        if glob.last-char = ':'
            parse-new-expression(user "]", user self, user self.code-node)->(
                    owner self.second-index-owner)
            self.second-index := self.second-index-owner
        if glob.last-char != ']'
            self.syntax-error-c(user "expected \"]\", got")
        read-c()
    
    func dynamic analyze()
        analyze-expression()->(owner self.sequence)
        self.check-expression-all-errors()->(owner self.sequence)
        if self.sequence.result-type.type-data is-not glob.type-array
            self.syntax-error(
                    user "cannot slice type",
                    user self.sequence.result-type.type-data.name)
        
        if not self.second-index?
            self.sequence.result-type.parameters.first.item.copy-new()->(
                    owner self.result-type)
            self.assignable := self.result-type.type-data.is-primitive
        
        self.analyze-indices()
        if not self.force-no-checks
            self.analyze-values()
        
        if not self.result-type.type-data.is-primitive
            self.sequence.result-type.reference-path.copy-new()->(
                    owner self.result-type.reference-path)
        
    func inst analyze-indices()
        analyze-expression()->(owner self.index)
        self.check-index(user self.index)
        
        if self.second-index?
            analyze-expression()->(owner self.second-index-owner)
            self.second-index := self.second-index-owner
            self.check-index(user self.second-index)
            self.set-type-from(user self.sequence)
            self.result-type.parameters.add(
                    owner self.result-type.parameters.pop())
            self.result-type.parameters.pop()
            self.result-type.length := self.result-type.length-owner
            self.result-type.length.expression := self.second-index-owner
            self.result-type.length.update()
            self.result-type.conditional := false
            self.result-type.parameters.add(
                    owner self.result-type.length.result-type.copy-new())
            if access-has-refman(copy self.sequence.access)
                self.access := Access.WEAK
            else
                self.access := Access.USER
            self.code-node.add-aux-variable(
                    copy self.access, copy false, user self.result-type)->(
                    owner self.slice-variable)
            return
        
        if self.assignable
            self.access := Access.VAR
        else-if access-has-refman(copy self.sequence.access)
            self.access := Access.WEAK
        else
            self.access := Access.USER
        
        if self.result-type.type-data is glob.type-array
            self.code-node.add-aux-variable(
                    copy self.access, copy false, user self.result-type)->(
                    owner self.slice-variable)
        
    func inst analyze-values()
        user Long index-min(user self.index.result-type.int-range.min-value)
        user Long index-max(user self.index.result-type.int-range.max-value)
        if index-max.sign() < 0
            self.syntax-error-long(
                    user "slice index always negative with maximum value of",
                    user index-max)
        self.need-index-check := index-min.sign() < 0
        
        user Long second-min
        user Long second-max
        var Long one
        one.set(copy 1)
        if self.second-index?
            second-min := self.second-index.result-type.int-range.min-value
            second-max := self.second-index.result-type.int-range.max-value
            if second-max.sign() <= 0
                self.syntax-error-long(
                        user "slice length never positive with maximum value \
                        of",
                        user second-max)
            self.need-second-index-check := second-min.sign() <= 0
        else
            second-min := one
            second-max := one
        
        user Long length-min
        user Long length-max
        var Long zero
        var Long max32
        length-min := zero
        max32.parse(user "4294967295")
        if self.sequence.result-type.length?
            user IntRange int-range(
                    user self.sequence.result-type.length.result-type.int-range)
            if int-range.min-value.sign() > 0
                length-min := int-range.min-value
            else
                length-min := one
            length-max := int-range.max-value
        else
            length-min := one
            length-max := max32
        
        owner Long sum-min
        owner Long sum-max
        long-add(user index-min, user second-min)->(owner sum-min)
        long-add(user index-max, user second-max)->(owner sum-max)
        if long-larger(user sum-min, user length-max)
            self.syntax-error-long2(
                    user "slice minimal length",
                    user sum-min,
                    user "is larger than sequence maximal size",
                    user length-max)
        long-larger(user sum-max, user length-min)->(var self.need-bounds-check)
        
        if self.need-index-check or self.need-second-index-check or
                self.need-bounds-check
            self.check-error-propagated(user "ignoring slice bounds check")
    
    func inst check-index(user Expression index)
        index.check-no-error()
        if index.result-type.type-data is-not glob.type-int
            self.syntax-error(
                    user "expected integer index for slice, got",
                    user index.result-type.type-data.name)

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.sequence.check-memory(user refs)
        self.index.check-memory(user refs)
        if self.second-index?
            self.second-index.check-memory(user refs)
        refs.check-user(user self.sequence)
    
    func dynamic write-preactions()
        self.sequence.write-preactions()
        self.index.write-preactions()
        if self.second-index?
            self.second-index.write-preactions()
            
        self.write-preactions-bounds-check()
        
        if self.second-index?
            self.write-preactions-second-index()
        else-if self.result-type.type-data is glob.type-array
            self.write-preactions-slice-value()
            
    func inst write-preactions-bounds-check()
        if not self.need-index-check and not self.need-second-index-check and
                not self.need-bounds-check
            return
        ; if (index < 0 || index >= [*]`seq`_Length)
        ; if (index < 0 || second <= 0 ||
        ;         SAFE_SUM_LARGER(index, second, [*]`seq`_Length))
        ;         RAISE(`slice_index`)
        write(user "if (")
        if self.need-index-check
            self.index.write-safe()
            write(user " < 0")
            
        if self.need-second-index-check
            if self.need-index-check
                write(user " || ")
            self.second-index.write-safe()
            write(user " <= 0")
        
        if self.need-bounds-check
            if self.need-index-check or self.need-second-index-check
                write(user " || ")
            if self.second-index?
                write(user "SAFE_SUM_LARGER(")
            self.index.write-safe()
            if self.second-index?
                write(user ", ")
                self.second-index.write-safe()
                write(user ", ")
            else
                write(user " >= ")
            if self.sequence.result-type.length?
                self.sequence.result-type.length.write()
            else
                self.sequence.write()
                write(user "_Length")
            if self.second-index?
                write(user ")")
        write(user ") ")
        self.code-node.write-raise(user "slice_index")
        self.code-node.write-spaces()
            
    func inst write-preactions-second-index()
        user TypeInstance data-type
        var Int depth
        self.sequence.result-type.get-array-data-type-depth()->(
                user data-type, var depth)
        
        ; symbol = (seq) + (index);
        self.slice-variable.write()
        write(user " = ")
        self.sequence.write-safe()
        self.write-index(user self.result-type, copy depth)
        self.code-node.write-spaces()
        
        if not self.result-type.length.get-constant-value()?
            ; symbol_Length = second;
            self.slice-variable.write()
            write(user "_Length = ")
            self.second-index.write()
            write(user ";\n")
            self.code-node.write-spaces()
        self.write-length-assigns(user data-type, copy depth, copy 0)
        
        if access-has-refman(copy self.access)
            ; symbol_Refman = seq_Refman;
            ; LUMI_inc_ref(symbol_Refman);
            self.slice-variable.write-refman()
            write(user " = ")
            self.sequence.write-refman()
            write(user ";\n")
            self.code-node.write-spaces()
            write(user "LUMI_inc_ref(")
            self.slice-variable.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()
    
    func inst write-preactions-slice-value()
        user TypeInstance data-type
        var Int depth
        self.sequence.result-type.get-array-data-type-depth()->(
                user data-type, var depth)
        
        ; symbol = (seq) + (index);
        self.slice-variable.write()
        write(user " = ")
        self.sequence.write-safe()
        self.write-index(user self.sequence.result-type, copy depth)
        self.code-node.write-spaces()
        
        if not self.result-type.length.get-constant-value()?
            ; symbol_Length = seq_Value_length;
            self.slice-variable.write()
            write(user "_Length = ")
            self.sequence.write()
            write(user "_Value_length")
            write(user ";\n")
            self.code-node.write-spaces()
        self.write-length-assigns(user data-type, copy depth, copy 1)
        
        if access-has-refman(copy self.access)
            ; symbol_Refman = [&]seq_Refman;
            ; LUMI_inc_ref(symbol_Refman);
            self.slice-variable.write()
            write(user "_Refman = ")
            self.sequence.write-refman()
            write(user ";\n")
            self.code-node.write-spaces()
            write(user "LUMI_inc_ref(")
            self.slice-variable.write-refman()
            write(user ");\n")
            self.code-node.write-spaces()

    func inst write-length-assigns(
            user TypeInstance data-type, copy Int depth, copy Int offset)
        user TypeInstance sequence-type(user self.result-type)
        for n in depth - offset
            ; symbol_Value_[value_]length = seq_Value_[value_]length;
            sequence-type := sequence-type.parameters.first.item
            if not sequence-type.length.get-constant-value()?
                self.slice-variable.write()
                write-array-value-length(copy n)
                write(user " = ")
                self.sequence.write()
                write-array-value-length(copy n + offset)
                write(user ";\n")
                self.code-node.write-spaces()

    func inst write-index(user TypeInstance sequence-type, copy Int depth)
        write(user " + ")
        self.index.write-safe()
        for n in depth
            sequence-type := sequence-type.parameters.first.item
            write(user " * ")
            if sequence-type.length?
                sequence-type.length.write()
            else
                self.sequence.write()
                write-array-value-length(copy n)
        write(user ";\n")
    
    func dynamic write()
        if self.slice-variable?
            self.slice-variable.write()
            return
        
        ; seq[index]
        ; (seq + index)
        self.sequence.write-safe()
        if self.result-type.type-data.is-primitive
            write(user "[")
        else
            write(user " + ")
        self.index.write()
        if self.result-type.type-data.is-primitive
            write(user "]")
        
    func dynamic write-safe()
        self.write-with-brackets()
    
    func dynamic write-dynamic()
        write(user "&")
        self.result-type.write-cname()
        write(user "_dynamic")
    
    func dynamic write-refman()
        if self.slice-variable?
            self.slice-variable.write-refman()
        else
            self.sequence.write-refman()


func write-array-value-length(copy Int depth)
    write(user "_Value")
    for _ in depth
        write(user "_value")
    write(user "_length")
