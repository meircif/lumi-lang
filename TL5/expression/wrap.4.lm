~~~ TL5 compiler - Wrap expressions ~~~
module tl5-compiler


class WrapExpression(Expression)
    owner Expression expression

    new(owner Expression expression)
        base(user expression.code-node)
        self.expression := expression
        self.access := self.expression.access
        self.is-var := self.expression.is-var
        self.assignable := self.expression.assignable
        self.error-expected := self.expression.error-expected
        self.is-generic-cast := self.expression.is-generic-cast
        self.error-propagated := self.expression.error-propagated
        self.set-type-from(user self.expression)

    func dynamic analyze()
        self.expression.analyze()

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.expression.check-memory(user refs)

    func dynamic write-preactions()
        self.expression.write-preactions()

    func dynamic write()
        self.expression.write()
    
    func dynamic write-cast()
        self.expression.write-cast()
    
    func dynamic write-safe()
        self.expression.write-safe()
    
    func dynamic write-dynamic()
        self.expression.write-dynamic()
    
    func dynamic write-dynamic-cast()
        self.expression.write-dynamic-cast()
    
    func dynamic write-dynamic-safe()
        self.expression.write-dynamic-safe()
    
    func dynamic write-refman()
        self.expression.write-refman()


class AnalyzedExpression(WrapExpression)
    func dynamic analyze()
        ; do nothing - already analyzed


class TypeCastExpression(WrapExpression)
    new(owner Expression expression)
        base(owner expression)
        self.is-generic-cast := true

    func dynamic write-safe()
        write(user "((")
        self.result-type.write-cname()
        write(user "*)(")
        self.expression.write()
        write(user "))")

    func dynamic write-dynamic()
        self.expression.write-dynamic-safe()

    func dynamic write-dynamic-cast()
        write(user "((")
        self.result-type.write-cname()
        if self.result-type.type-data.is-struct
            write(user "_Dynamic")
        write(user "*)(")
        self.expression.write-dynamic()
        write(user "))")
    
    func dynamic write-dynamic-safe()
        self.write-dynamic-cast()


~~~ Up-cast expression ~~~
class UpCastExpression(WrapExpression)
    var Int bases
    
    new(owner Expression expression, copy Int bases)
        base(owner expression)
        self.bases := bases
    
    func dynamic write()
        ; &(`expression`->_base[._base]...)
        self.write-pre()
        if self.expression.is-complex-field
            self.expression.write()
        else
            self.expression.write-safe()
        self.write-post()
    
    func dynamic write-cast()
        self.write()
    
    func dynamic write-dynamic()
        self.write-pre()
        self.expression.write-dynamic-safe()
        self.write-post()
    
    func dynamic write-dynamic-cast()
        self.write-dynamic()
    
    func dynamic write-dynamic-safe()
        self.write-dynamic-cast()
    
    func inst write-pre()
        write(user "&(")
    
    func inst write-post()
        if self.expression.is-complex-field
            write(user ".")
        else
            write(user "->")
        write(user "_base")
        for n in 1:self.bases
            write(user "._base")
        write(user ")")


~~~ Owner --> Strong call expression ~~~
class OwnerToStrongCallExpression(WrapExpression)
    owner Expression owner-expression

    new(owner Expression expression)
        base(owner expression)
        self.owner-expression := self.expression
        self.access := Access.STRONG
        self.code-node.add-aux-variable(
                copy Access.STRONG, copy false, user self.result-type)->(
                owner self.expression)

    func dynamic write-preactions()
        var AssignExpression assign(
                user self.code-node,
                user self.expression,
                user self.owner-expression,
                copy true)
        assign.write()
        self.code-node.write-spaces()


~~~ An expression that checks whether an expression is usable ~~~
class CheckUsableExpression(WrapExpression)
    var Bool check-conditional
    var Bool check-weak
    
    new(owner Expression dubious,
            copy Bool check-conditional,
            copy Bool check-weak)
        base(owner dubious)
        self.check-conditional :=
                check-conditional and self.result-type.conditional
        self.check-weak := check-weak and self.access = Access.WEAK
        if self.check-conditional
            self.result-type.conditional := false
        if self.check-weak
            self.access := Access.USER
        self.error-propagated := true
        self.error-expected := false
    
    func dynamic analyze()
        if self.check-conditional
            self.expression.check-error-propagated(
                    user "ignoring empty reference check")
        else
            self.expression.check-error-propagated(
                    user "ignoring weak reference check")

    func dynamic write-preactions()
        base()
        write(user "CHECK")
        if self.check-conditional
            write(user "_REF")
        if self.check-weak
            write(user "_REFMAN")
        self.write-macro-first-params()
        if self.check-conditional
            self.expression.write()
            if self.check-weak
                write(user ", ")
        if self.check-weak
            self.expression.write-refman()
        write(user ")\n")
        self.code-node.write-spaces()


~~~ Reference cast expression ~~~
class RefCastExpression(WrapExpression)
    func dynamic write()
        write(user "(void*)")
        self.expression.write-safe()
        
    func dynamic write-cast()
        self.write()


~~~ An expression that checks given array length ~~~
class CheckArrayLengthExpression(WrapExpression)
    var Bool exact
    
    new(
            owner Expression expression,
            user TypeInstance target-type,
            copy Bool exact)
        base(owner expression)
        self.exact := exact
        self.error-propagated := true
        self.error-expected := false
        user TypeInstance target(user target-type)
        user TypeInstance value(user self.result-type)
        do
            if target.length.get-constant-value()? and
                    not value.length.get-constant-value()?
                value.length := target.length
            target := target.parameters.first.item
            value := value.parameters.first.item
            while target.type-data is glob.type-array and
                    value.type-data is glob.type-array
    
    func dynamic analyze()
        self.expression.check-error-propagated(
                user "ignoring array length check")

    func dynamic write-preactions()
        base()
        ; if (...) RAISE(`slice_index`)
        user TypeInstance target(user self.result-type)
        user TypeInstance value(user self.expression.result-type)
        var Int depth
        var Bool another
        write(user "if (")
        do
            if target.length.get-constant-value()? and
                    not value.length.get-constant-value()?
                self.write-length-check(
                        user target.length, copy depth, copy another)
                another := true
            target := target.parameters.first.item
            value := value.parameters.first.item
            while target.type-data is glob.type-array and
                    value.type-data is glob.type-array
            depth += 1
        write(user ") ")
        self.code-node.write-raise(user "slice_index")
        self.code-node.write-spaces()

    func inst write-length-check(
            user ExpressionValue length, copy Int depth, copy Bool another)
        ; [ || ]`array`[_value]_Length [<][!=] `needed-length`
        if another
            write(user " || ")
        self.expression.write()
        if depth = 0
            write(user "_Length")
        else
            write-array-value-length(copy depth - 1)
        if self.exact or depth > 0
            write(user " != ")
        else
            write(user " < ")
        length.write()
