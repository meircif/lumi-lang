~~~ TL4 compiler integration main test file

This file should be stand-alone.

Testing multiline documentation
confused by ~ or ~~ or ; or ~~ ~ ?
~~~
module integration

[; Test
multiline
comment
;]

~~~ Test Single line documentation ~~~
; Test Single line comment

; Test global variables
var Uint32 global-int(copy 23)
var String global-buffer(user `feed1000beef`)!
var String global-string(user "a constant string")!
var String unicode-string(user "שָׁלוֹם 👋🏾 עוֹלָֽם 🌎\n")!

var Array{TestEnum.length + LENGTH:Uint32} int-arr
const Int LENGTH SIZE * 5
const Int SIZE 12

var String large-global-string(user "\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789\
            012345678901234567890123456789012345678901234567890123456789")!

var String large-global-buffer(user `
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899
            001122334455667788990011223344556677889900112233445566778899`)!


; Test Enum
enum TestEnum
    FIRST-VALUE
    ANOTHER-VALUE
    VALUE2


struct SimpleStruct
    var Uint32 num
    owner String? text

class SimpleClass
    var Uint32 x
    weak String? s
    func dynamic user fun()
        self.x := 0


; Test functions
func ! test-simple-function()
    sys.println(user "I am a simple function")!
    sys.print(user "I am a multi\
            line
            string
            ")!


func ! test-const-expression()->(
        var Uint32 i,
        var Char c,
        weak TestStruct? t,
        weak TestClass? d,
        var Func?{()} f)
    i := 0 + 9630 + -9630 + 07520 + -07520 + 0xfda940 + -0xfda940 + 0xFDA940 +
            -0xFDA940
    c := ('a' + '\'' + '\n' + '\x0f' + '\xA9' + '\270') mod 256
    user String? s
    ; s := "some string"
    ; s := "some
    ;         str\
    ;         ing"
    user Buffer? b
    b := `2400fade`
    b := `
            2400
            fade
            3456
            beef`
    t := _
    d := _
    f := _
    f!()


func ! test-member-expression(strong TestStruct t)->(
        weak TestStruct? to, var Uint32 i)
    to := t
    t.num := clamp to!.num + t.ts!.num + t.ts!.ts!.num
    to!.num := t.num
    t.ts!.ts!.num := 4
    t.fun := test-void
    t.fun()
    t.new(copy 0, user "")!


func ! test-slice-expression(
        user String s,
        strong Array{Uint32} arri,
        strong Array{String} arrs,
        strong Array{SimpleStruct} arrt,
        strong Array{SimpleClass} arrd,
        strong Array{Func{()}} arrf)->(
        var Char c,
        var Uint32 i,
        weak SimpleStruct? t,
        weak SimpleClass? d,
        var Func{()} f,
        weak Array?{Uint32} arrio,
        weak Array?{String} arrso,
        weak Array?{SimpleStruct} arrto,
        weak Array?{SimpleClass} arrdo,
        weak Array?{Func{()}} arrfo)
    ; c := clamp s[2]! + s[4:7]![2] + arrs[3]![2]! + arrs[4:6]![4][1:3]![0]
    i := clamp arri[i + 3 - arri[2]!]! + arrt[4]!.num + arrt[2:4]![1].num +
            arri[3:3]![1:2][1]
    arrio := arri[2 - i + arri[2:4]![1]:5 * (i - 1)]!
    s := arrs[4]!
    arrso := arrs[2:7]!
    t := arrt[4]!
    arrto := arrt[2:7]!
    d := arrd[4]!
    arrdo := arrd[2:7]!
    f := arrf[4]!
    arrfo := arrf[2:7]!
    arrf[4]!()
    arrfo![4]!()

func ! test-slice-assign(
        weak Array{6:Array{7:Array{8:Uint32}}} as,
        weak Array{6:Array{Array{8:Uint32}}} ams,
        weak Array{Array{7:Array{Uint32}}} amd,
        weak Array{Int{3:9}:Array{Int{4:10}:Array{Int{5:11}:Uint32}}} ar,
        weak Array{Array{Array{Uint32}}} ad)->(
        weak Array{4:Array{7:Array{8:Uint32}}} oas,
        weak Array{4:Array{Array{8:Uint32}}} oams,
        weak Array{Array{7:Array{Uint32}}} oamd,
        weak Array{Int{3:9}:Array{Int{4:10}:Array{Int{5:11}:Uint32}}} oar,
        weak Array{Array{Array{Uint32}}} oad)
    oas := as
    oas := ams!
    oas := amd!
    oas := ar!
    oas := ad!
    oams := as
    oams := ams
    oams := amd!
    oams := ad!
    oams := ar!
    oamd := as
    oamd := ams!
    oamd := amd
    oamd := ar!
    oamd := ad!
    oar := as
    oar := ams!
    oar := amd!
    oar := ar
    oar := ad!
    oad := as
    oad := ams
    oad := amd
    oad := ar
    oad := ad
    test-slice-assign(weak as, weak as, weak as, weak as, weak as)->(
            weak oas, weak oams, weak oamd, weak oar, weak oad)!
    test-slice-assign(weak ams!, weak ams, weak ams!, weak ams!, weak ams)->(
            weak oad, weak oas!, weak oams!, weak oamd!, weak oar!)!
    test-slice-assign(weak amd!, weak amd!, weak amd, weak amd!, weak amd)->(
            weak oar, weak oad, weak oas!, weak oams!, weak oamd!)!
    test-slice-assign(weak ar!, weak ar!, weak ar!, weak ar, weak ar)->(
            weak oamd, weak oar!, weak oad, weak oas!, weak oams!)!
    test-slice-assign(weak ad!, weak ad!, weak ad!, weak ad!, weak ad)->(
            weak oams, weak oamd!, weak oar!, weak oad, weak oas!)!


func test-container-expression(copy Sint32 x, copy Sint32 y, user String? s)->(
        var Sint32 i, var Bool b)
    i := clamp - x + - - - y
    b := not ((not (x * 3) - 5 > 6 * y = 234 and not 5 - x < y) or not
            (x = -2 - (-4 * y) and -6 > y >= 12 = x)) and (- (2 + x) > y or s? or
            not s?)


func ! test-variable(
        copy Uint32 i,
        weak String text,
        weak Buffer data,
        user Array{Uint32} arr)
    var Uint32 x
    user String? s
    user Buffer? b
    owner Array?{Uint32} a
    user TestStruct? t
    user TestClass? d
    var TestStruct tv(copy 0, user _)!
    var TestClass dv
    var String sv
    var Buffer{12} bv
    var Func?{(copy Uint32 xi, user String si)->(
            var Uint32 xo, user String? so)} f
    var Array{12:Uint32} ia
    var Array{12:SimpleStruct} ta
    var Array{12:SimpleClass} da
    var Array{12:String} sa
    var Array{12:Buffer{7}} ba
    var Array{12:Func{()}} fa
    new TestStruct tn(copy 0, user _)!
    new TestClass dn!
    new String sn!
    new Buffer{arr[0]} bn!
    new Array{arr[0]:Uint32} ian!
    new Array{arr[0]:SimpleStruct} tan!
    new Array{arr[0]:SimpleClass} dan!
    new Array{arr[0]:String} san!
    new Array{arr[0]:Buffer{arr[1]!}} ban!
    new Array{arr[0]:Func{()}} fan!
    var Uint32 ix(copy arr[0])
    user String si(user text!)
    user Buffer bi(user data!)
    var String ibv(user "some string")!
    ; var Buffer{12} isv(user `fadebeef`)!
    var Buffer{12} isv
    new String isn(user text!.bytes())!
    ; new Buffer{i} ibn(user data!)!
    new Buffer{i} ibn!
    var Func{:(copy Uint32 n)->(owner String? st)} fi(copy test-int2str)
    var TestStruct itv(copy i, user text!.bytes())!
    new TestStruct itn(copy i, user text!.bytes())!
    var TestClass idv()
    new TestClass idn()!
    TestStruct(copy i, user text!.bytes())!.print()!
    TestClass()!.print()!
    assert! String()!.length() > 0
    assert! Buffer{arr[0]}()!.length > 0
    assert! Array{arr[0]:Uint32}()!.length > 0
    assert! Array{arr[0]:SimpleStruct}()!.length > 0
    assert! Array{arr[0]:SimpleClass}()!.length > 0
    assert! Array{arr[0]:String}()!.length > 0
    assert! Array{arr[0]:Buffer{arr[1]!}}()!.length > 0
    assert! Array{arr[0]:Func{()}}()!.length > 0
    assert! x = 0
    assert! s?
    assert! b?
    assert! a?
    t!.print()!
    d!.print()!
    assert! f?
    tv.print()!
    dv.print()!
    assert! sv.length() > 0
    assert! bv.length > 0
    assert! ia.length > 0
    assert! ta.length > 0
    assert! da.length > 0
    assert! sa.length > 0
    assert! ba.length > 0
    assert! fa.length > 0
    tn.print()!
    dn.print()!
    assert! sn.length() > 0
    assert! bn.length > 0
    assert! ian.length > 0
    assert! tan.length > 0
    assert! dan.length > 0
    assert! san.length > 0
    assert! ban.length > 0
    assert! fan.length > 0
    assert! ix = 0
    assert! si.length() > 0
    assert! bi.length > 0
    fi(copy 7)!
    assert! isv.length > 0
    assert! ibv.length() > 0
    assert! isn.length() > 0
    assert! ibn.length > 0


func test-complex-function(
        copy Uint32 num, user String text)->(
        var Uint32 out-num, user String? out-text)
    [; Test
    multiline
    comment ;]

    ; Test Single line comment

    ~~~ Test Single line documentation ~~~
    ; Test Single line comment
    out-num := num
    out-text := text


; Test types
struct TestStruct
    ~~~ documentation test ~~~
    var Uint32 num
    
    ~~~ Test
    multiline
    documentation ~~~
    owner String? text
    
    ; comment test
    
    owner TestStruct? ts
    var Func{:()} fun
    
    new!(copy Uint32 x, user Buffer? s) _
    
    [; Test
    multiline
    comment ;]
    
    func user get()->(var Uint32 x, user String? s) _
    
    func user ! print()
        sys.println(user self.text!.bytes())!
        
func ! TestStruct.new(copy Uint32 x, user Buffer? s)
    self.num := x
    if s?
        new String text(user s!)!
        self.text := text
    if x < 0
        self.ts := TestStruct(copy clamp x + 1, user self.text!.bytes())!
  
func TestStruct.get()->(var Uint32 x, user String? s)
    x := self.num
    s := self.text


class TestClass
    var Uint32 num
    weak String? text
    owner TestClass? tc
    
    new()
        self.num := 1
    
    func inst user static-meth() _
        
    func dynamic user dynamic-meth() _
    
    func inst user ! print()
        sys.println(user self.text!.bytes())!
    
func TestClass.static-meth()
    self.num := 3
    
func TestClass.dynamic-meth()
    self.num := 6


func ! test-void()
    return
func ! test-params(copy Uint32 x, user String? s, owner String? o)
    raise!
func test-outs()->(owner String? s, var Uint32 x)
func ! test-int2str(copy Uint32 x)->(owner String? s)
func test-int(copy Uint32 x)
func test-int2int(copy Uint32 x)->(var Uint32 r)
func test-many(
        copy Uint32 x,
        copy Uint32 y)->(
        var Uint32 n,
        var Uint32 m)


func ! test-call-expression()
    owner String? s
    var Uint32 x
    var Uint32 y
    test-void()!
    ; test-params(copy 3, user "text", owner _)!
    test-params(copy 3, user _, owner _)!
    test-outs()->(owner s, var x)
    test-int2str(copy 4)->(owner s)!
    test-int(copy 5)
    test-int2int(copy 6)->(var x)
    test-many(
            copy 7,
            copy 8)->(
            var x,
            var y)
    var Uint32 tmp
    test-int(copy test-int2int(copy 9)->(var tmp))
    x := clamp test-int2int(copy 10) + test-many(copy 11, copy 12)->(var y)
    s := test-int2str(copy 13)!


func ! test-code-flow(user Array{Uint32} arr)->(var Uint32 res)
    block
        var Array{12:Uint32} a2
        a2[0] := res
        a2[1] := clamp a2[0] + 3
    if arr[4]! > 6
        res := 6
    else-if arr is arr
        res := 6
    else-if arr[4]! <> arr[5]!
        res := 6
    else-if 0 = arr[0]
        res := 6
    else
        res := 0
    loop! arr.length
        arr[6]! := 6
        var Uint32 x(copy arr[2]!)
        while x > 3 and arr is _
        var Uint32 y(copy clamp x - 1)
        loop! 60
            arr[4]! := arr[8]!
            if y > arr[4]!
                continue
            var Uint32 z(copy 7)
            if z <= arr[4]!
                while z > 0
    for n in arr[2]!:2 - (3 * arr[2]!)
        arr[0] := arr[2]!
        var Uint32 w(copy arr[0])
        if w > 4 and arr is-not arr[3:2]!
            arr[1]! := w
        repeat arr[1]! + w
            arr[2]! := 2


func ! use-builtins(
        temp String s,
        temp Buffer buff,
        temp Array{Uint32} a)
    var Uint32 i
    var Uint64 l
    var Sint64 x
    var Char c
    var Byte y
    var Bool b
    i.str(user s)!
    b := true or false
    i := a.length
    
    s.length()->(var i)
    ; s.max-length()->(var i)
    s.clear()
    s.equal(user buff)->(var b)
    ; s.get(copy i)->(var c)!
    ; s.set(copy i, copy c)!
    s.append(copy c)!
    s.new(user buff)!
    s.concat(user buff)!
    s.concat-int(copy i)!
    ; s.find(user s)->(var i)
    s.has(copy c)->(var b)
    
    i := buff.length
    ; buff.max-length()->(var i)
    ; buff.clear()
    ; buff.equal(user buff)->(var b)
    ; buff.get(copy i)->(var y)!
    ; buff.set(copy i, copy y)!
    ; buff.append(copy y)!
    ; buff.new(user buff)!
    ; buff.concat(user buff)!
    ; buff.find(user buff)->(var l)
    ; buff.has(copy y)->(var b)
    
    new FileReadText frt(user s)!
    frt.get()->(var c, var b)!
    ; frt.getline(user s)->(var b)!
    frt.tell()->(var x)!
    frt.seek-set(copy x)!
    frt.seek-cur(copy x)!
    frt.seek-end(copy x)!
    frt.flush()!
    frt.close()!
    new FileReadBinary frb(user s)!
    frb.get()->(var y, var b)!
    frb.read(user buff)->(var i)!
    frb.tell()->(var x)!
    frb.seek-set(copy x)!
    frb.seek-cur(copy x)!
    frb.seek-end(copy x)!
    frb.flush()!
    frb.close()!
    new FileWriteText fwt(user s, copy true)!
    fwt.put(copy c mod 256)!
    fwt.write(user s.bytes())->(var i)!
    fwt.tell()->(var x)!
    fwt.seek-set(copy x)!
    fwt.seek-cur(copy x)!
    fwt.seek-end(copy x)!
    fwt.flush()!
    fwt.close()!
    new FileWriteBinary fwb(user s, copy false)!
    fwb.put(copy y)!
    fwb.write(user buff)->(var i)!
    fwb.tell()->(var x)!
    fwb.seek-set(copy x)!
    fwb.seek-cur(copy x)!
    fwb.seek-end(copy x)!
    fwb.flush()!
    fwb.close()!
    new FileReadWriteText frwt(user s, copy false, copy true)!
    frwt.get()->(var c, var b)!
    ; frwt.getline(user s)->(var b)!
    frwt.put(copy c mod 255)!
    frwt.write(user s.bytes())->(var i)!
    frwt.tell()->(var x)!
    frwt.seek-set(copy x)!
    frwt.seek-cur(copy x)!
    frwt.seek-end(copy x)!
    frwt.flush()!
    frwt.close()!
    new FileReadWriteBinary frwb(user s, copy true, copy false)!
    frwb.get()->(var y, var b)!
    frwb.read(user buff)->(var i)!
    frwb.put(copy y)!
    frwb.write(user buff)->(var i)!
    frwb.tell()->(var x)!
    frwb.seek-set(copy x)!
    frwb.seek-cur(copy x)!
    frwb.seek-end(copy x)!
    frwb.flush()!
    frwb.close()!
    new FileReadWriteText frwt1(user s, copy false, copy false)!
    new FileReadWriteText frwt2(user s, copy true, copy false)!
    new FileReadWriteText frwt3(user s, copy true, copy true)!
    new FileReadWriteBinary frwb1(user s, copy false, copy false)!
    new FileReadWriteBinary frwb2(user s, copy false, copy true)!
    new FileReadWriteBinary frwb3(user s, copy true, copy true)!
    owner File f(owner frt)
    f.tell()->(var x)!
    f.seek-set(copy x)!
    f.seek-cur(copy x)!
    f.seek-end(copy x)!
    f.flush()!
    f.close()!
    
    var Sint32 e
    user String arg(user sys.argv[1]!)
    sys.print(user s.bytes())!
    sys.println(user s.bytes())!
    sys.getchar()->(var c, var b)!
    ; sys.getline(user s)->(var b)!
    sys.getenv(user s, user s)->(var b)!
    sys.system(user s)->(var e)!
    sys.exit(copy e)!
    sys.stdin.get()->(var c, var b)!
    sys.stdout.put(copy c mod 255)!
    sys.stderr.put(copy c mod 255)!


func ! test-ref-count()
    strong String? s(strong String(user "test string")!)
    weak String s-user(weak s!)
    sys.println(user s!.bytes())!
    sys.println(user s-user!.bytes())!
    remove(owner s!)
    if not s?
        sys.println(user "ownership passed")!
    if not s-user?
        sys.println(user "string deleted")!
    new TestStruct ts(copy 0, user "first struct")!
    sys.println(user ts.text!.bytes())!
    ts.ts := TestStruct(copy 1, user "second struct")!
    sys.println(user ts.ts!.text!.bytes())!

func remove(owner String s)
    ; remove s

struct Item
    owner String s
    
    new!(user Buffer s)
        new String news(user s)!
        self.s := news

struct Data{Generic}
    weak Generic? item
    
    func user ! set(weak Generic? item) _
    
    func user get()->(weak Generic? item)
        item := self.item
        
func ! Data.set(weak Generic? item)
    weak Generic? x(weak item)
    self.item := x
    new Data{Generic} d!
    d.item := self.item
    self.item := d.item

struct Dataset{First:Second:Third}(Data{First})
    weak Second? second
    weak Third? third

struct MidData{Generic}(Dataset{Item:Data{Generic}:Generic})

struct TopData(MidData{TestStruct})

func ! test-type-parameters(weak Item? s)
    var Data{Item} d
    user Item? su
    d.item := s
    s := d.item
    var Array{5:Data{Item}} ad
    s := ad[2].item
    var Data{Data{Data{Item}}} dr
    s := dr.item!.item!.item
    d.set(weak s)!
    d.get()->(weak s)
    user Data? dg(user d)
    assert! dg?
    
    var TopData t
    s-var Data{TestStruct} dt!
    s-var TestStruct ts(copy 0, user _)!
    t.item := s
    t.second := dt
    t.third := ts
    
    var Data{String} ds
    weak String? str
    ds.set(weak str)!
    ds.get()->(weak str)
    
    var Data{File} df
    weak File? f
    df.set(weak f)!
    df.get()->(weak f)


func ! try-catch-raise(user TestStruct? t)
    try
        t.num := 1
    catch
        raise! "ignored message"

func ! test-error-handling(user TestStruct? t)
    try
        sys.print(user "error handling { 1 ")
        t.num := 1
        sys.print(user " X ")
        try
            test-void()
        catch
            test-int(copy 2)
    catch
        sys.print(user "2 ")!
        try
            sys.print(user "3 ")
            t.num := 2
            sys.print(user " X ")
        sys.print(user "4 ")!
    sys.print(user "5 ")!
    try
        sys.print(user "6 ")
        try
            sys.print(user "7 ")
            try-catch-raise(user t)
            sys.print(user " X ")
        sys.print(user "8 ")
        raise "another ignored message"
    if-error t.num := 2
        sys.print(user "9 ")
        if-ok sys.print(user "10 ")
            sys.print(user "11 ")
        else
            sys.print(user " X ")
    else
        sys.print(user " X ")!
    if-ok t.num := 2
        sys.print(user " X ")
    else-if-error sys.print(user "12 ")
        sys.print(user " X ")
    else-if-ok sys.print(user "13 ")
        sys.print(user "14 ")
    else
        sys.print(user " X ")!
    sys.println(user "}")!


struct Container{Generic}
    owner Generic? value
    weak Container?{Generic} next
    
    new(owner Generic? value, weak Container?{Generic} next)
        self.value := value
        self.next := next
    
    func user ! iter()->(owner ContainerIterator?{Generic} iter)
        iter := ContainerIterator{Generic}(weak self.next)!

struct ContainerIterator{Generic}
    weak Container?{Generic} curr
    
    new(weak Container?{Generic} first)
        self.curr := first
    
    func user ! step()->(user Generic? item, var Bool has-data)
        has-data := self.curr?
        item := _
        if has-data
            item := self.curr!.value
            self.curr := self.curr!.next

func ! test-for-each()
    var Buffer{1} buff
    sys.print(user "chars[ ")!
    for c in "abcdef"
        buff[0] := c
        sys.print(user buff)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var String text
    var Array{3:Uint32} arr
    arr[0] := 14
    arr[1] := 15
    arr[2] := 16
    sys.print(user "numbers[ ")!
    for n in arr
        text.clear()
        n.str(user text)!
        sys.print(user text.bytes())!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:SimpleStruct} tsarr
    tsarr[0].text := String(user "aaa")!
    tsarr[1].text := String(user "bbb")!
    tsarr[2].text := String(user "ccc")!
    sys.print(user "structs[ ")!
    for ts in tsarr
        sys.print(user ts.text!.bytes())!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:String} sarr
    sarr[0].new(user "ddd")!
    sarr[1].new(user "eee")!
    sarr[2].new(user "fff")!
    sys.print(user "strings[ ")!
    for s in sarr
        sys.print(user s.bytes())!
        sys.print(user " ")!
    sys.println(user "]")!
    
    s-var Container{Item} container-last(owner Item(user "iii")!, weak _)!
    s-var Container{Item} container-mid(owner Item(user "hhh")!, weak container-last)!
    s-var Container{Item} container-first(owner Item(user "ggg")!, weak container-mid)!
    s-var Container{Item} container(owner _, weak container-first)!
    owner ContainerIterator{Item} iter(owner container.iter()!)
    sys.print(user "values[ ")!
    for sc in iter!
        sys.print(user sc!.s.bytes())!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:Array{3:Array{3:String}}} saarr
    for n in 3
        for m in 3
            for i in 3
                user String s
                s := saarr[n]![m]![i]!
                s.new(user "val")!
                s.append(copy '0' + n)!
                s.append(copy '0' + m)!
                s.append(copy '0' + i)!
    sys.print(user "items[ ")!
    for a in saarr
        sys.print(user "\n  ")!
        for b in a
            for s in b
                sys.print(user s.bytes())!
                sys.print(user " ")!
    sys.println(user "]")!


class ComplexField
    weak ComplexField? x
    func dynamic user ! meth()
        sys.print(user "$")!

struct HasComplexField
    s-var ComplexField x
    var Array{3:String} as
    func user ! run() _

func ! HasComplexField.run()
    user ComplexField x(user self.x)
    x := self.x
    x.meth()!
    self.x.meth()!
    ComplexField.meth(user self.x)!
    user ComplexField? x2(user self.x.x!)
    x2 := self.x.x!
    x2!.meth()!
    self.x.x!.meth()!
    ComplexField.meth(user self.x.x!)!
    self.as[0].new(user "a1")!
    self.as[1].new(user "a2")!
    self.as[2].new(user "a3")!
    for s in self.as
        sys.print(user " ")!
        sys.print(user s.bytes())!

func ! test-complex-field()
    s-var HasComplexField y!
    y.x.x := y.x
    sys.print(user "complex fields: ")!
    y.run()!
    sys.println(user "")!


func ! set-temp(temp TestStruct t)
    t.ts := TestStruct(copy 2, user _)!

func ! test-temp()
    var TestStruct t(copy 1, user _)!
    set-temp(temp t)!
    assert! t.ts!.num = 2

func ! test-switch()
    strong String s1(strong String(user "first string")!)
    strong String s2(strong String(user "second string")!)
    s1 :=: s2
    sys.println(user s1.bytes())!
    sys.println(user s2.bytes())!


class BaseString
    owner String s
    func dynamic user ! print()
        sys.println(user self.s.bytes())!
    new!()
        self.s := String(user "BaseString")!
    cleanup()
        try
            self.print()

class TestString(BaseString)
    func dynamic user ! print()
        sys.println(user "TestString print")!
        base()!
    new!()
        self.s := String(user "TestString")!
    cleanup()
        try
            sys.println(user "TestString cleanup")

func ! test-cleanup()
    owner BaseString? bs(owner TestString()!)
    bs := _


struct CdefTest
    var cdef.Char c-char
    var cdef.Schar c-schar
    var cdef.Uchar c-uchar
    var cdef.Short c-short
    var cdef.Ushort c-ushort
    var cdef.Int c-int
    var cdef.Uint c-uint
    var cdef.Long c-long
    var cdef.Ulong c-ulong
    var cdef.Size c-size
    var cdef.Float c-float
    var cdef.Double c-double
    var cdef.LongDouble c-long-double


struct IntRangeTest
    var Int int-def
    var Uint8 u8b
    var Uint16 u16b
    var Uint32 u32b
    var Uint64 u64b
    var Sint8 s8b
    var Sint16 s16b
    var Sint32 s32b
    var Sint64 s64b
    var Int{32} ru8
    var Int{5:1000} ru16
    var Int{1000000} ru32
    var Int{100000000000:200000000000} ru64
    var Int{-100:100} rs8
    var Int{-1:1000} rs16
    var Int{-2000000:-1000000} rs32
    var Int{-100000000000:100000000000} rs64
    new()
        self.ru16 := 5
        self.ru32 := 1000000
        self.rs32 := -1000000
        self.ru64 := 100000000000
        self.rs64 := -100000000000


struct Base
    var Bool x
struct Low(Base)
class Mid(Low)
class Top(Mid)
dynamic Print
    func user? ! print-name()
dynamic Db
    func user fb()
dynamic Dc
    func user fc()
support Print in Base
    func user? ! print-name()
        sys.print(user "Base")!
support Print in Low
    func user? ! print-name()
        sys.print(user "Low")!
support Print in Mid
    func user? ! print-name()
        sys.print(user "Mid")!
support Print in Top
    func user? ! print-name()
        sys.print(user "Top")!
support Db in Base
    func user fb()
support Dc in Mid
    func user fc()

func dyn(user Print da, user Db db, user Dc dc)

func dynamic-base(user Base b, user Low l, user Mid m, user Top t)->(
        user Print da, user Db db, user Dc dc)
    da := b
    da := l
    da := m
    da := t
    db := b
    db := l
    db := m
    db := t
    dc := m
    dc := t
    dyn(user t, user t, user t)

support Print in TestStruct
    func user? ! print-name()
        sys.print(user "TestStruct")!
support Print in TestClass
    func user? ! print-name()
        sys.print(user "TestClass")!

func ! dynamic-generic(
        user Data{Print} dt, user Data{TestStruct} ds, user Data{TestClass} dc)
    weak Print? t
    t := dt.item
    dt.item := t
    dt.set(weak t)!
    dt.get()->(weak t)!
    t := ds.item
    ds.get()->(weak t)!
    t := dc.item
    dc.get()->(weak t)!

func ! print-me(user Print p)
    sys.print(user " ")!
    p.print-name()!

func ! test-dynamic()
    sys.print(user "Supporting Print:")!
    var Base b
    print-me(user b)!
    var Low l
    print-me(user l)!
    var Mid m
    print-me(user m)!
    var Top t
    print-me(user t)!
    var TestStruct s(copy 3, user _)!
    print-me(user s)!
    var TestClass c
    print-me(user c)!
    sys.print(user "\n")!


main!
    test-simple-function()!
    test-ref-count()!
    test-error-handling(user _)!
    test-for-each()!
    test-complex-field()!
    test-temp()!
    test-switch()!
    test-cleanup()!
    test-dynamic()!
