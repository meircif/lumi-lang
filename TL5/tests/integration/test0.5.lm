~~~ TL4 compiler integration main test file

This file should be stand-alone.

Testing multiline documentation
confused by ~ or ~~ or ; or ~~ ~ ?
~~~
module integration

[; Test
multiline
comment
;]

~~~ Test Single line documentation ~~~
; Test Single line comment

; Test global variables
var Int global-int(copy 23)
owner String global-string(owner String{32}(user "a constant string")!)
owner Buffer global-buffer(owner Buffer{32}(user `feed1000beef`)!)

var Array{TestEnum.length + LENGTH:Int} int-arr
const Int LENGTH SIZE * 5
const Int SIZE 12


; Test Enum
enum TestEnum
    FIRST-VALUE
    ANOTHER-VALUE
    VALUE2


struct SimpleStruct
    var Int num
    owner String? text

class SimpleClass
    var Int x
    weak String? s
    func dynamic user fun()
        self.x := 0


; Test functions
func ! test-simple-function()
    sys.println(user "I am a simple function")!
    sys.print(user "I am a multi\
            line
            string
            ")!


func ! test-const-expression()->(
        var Int i,
        var Char c,
        weak TestStruct? t,
        weak TestClass? d,
        var Func?{()} f)
    i := 0 + 9630 + -9630 + 07520 + -07520 + 0xfda940 + -0xfda940 + 0xFDA940 +
            -0xFDA940
    c := 'a' + '\'' + '\n' + '\x0f' + '\xA9' + '\270'
    user String? s
    s := "some string"
    s := "some
            str\
            ing"
    user Buffer? b
    b := `2400fade`
    b := `
            2400
            fade
            3456
            beef`
    t := _
    d := _
    f := _
    f!()


func ! test-member-expression(strong TestStruct t)->(
        weak TestStruct? to, var Int i)
    to := t
    t.num := to!.num + t.ts!.num + t.ts!.ts!.num
    to!.num := t.num
    t.ts!.ts!.num := 4
    t.fun := test-void
    t.fun()
    t.new(copy 0, user "")!


func ! test-slice-expression(
        user String s,
        strong Array{Int} arri,
        strong Array{String} arrs,
        strong Array{SimpleStruct} arrt,
        strong Array{SimpleClass} arrd,
        strong Array{Func{()}} arrf)->(
        var Char c,
        var Int i,
        weak SimpleStruct? t,
        weak SimpleClass? d,
        var Func{()} f,
        weak Array?{Int} arrio,
        weak Array?{String} arrso,
        weak Array?{SimpleStruct} arrto,
        weak Array?{SimpleClass} arrdo,
        weak Array?{Func{()}} arrfo)
    c := s[2]! + s[4:7]![2]! + arrs[3]![2]! + arrs[4:2]![4]![1:3]![0]
    i := arri[i + 3 - arri[2]!]! + arrt[4]!.num + arrt[2:4]![1]!.num +
            arri[3:3]![1:2]![1]!
    arrio := arri[2 - i + arri[2:4]![1]!:5 * (i - 1)]!
    s := arrs[4]!
    arrso := arrs[2:7]!
    t := arrt[4]!
    arrto := arrt[2:7]!
    d := arrd[4]!
    arrdo := arrd[2:7]!
    f := arrf[4]!
    arrfo := arrf[2:7]!
    arrf[4]!()
    arrfo![4]!()


func test-container-expression(copy Int x, copy Int y, user String? s)->(
        var Int i, var Bool b)
    i := - x + - - - y
    b := not ((not (x * 3) - 5 > 6 * y = 234 and not 5 - x < y) or not
            (x = -2 - (-4 * y) and -6 > y >= 12 = x)) and (- (2 + x) > y or s? or
            not s?)


func ! test-variable(
        copy Int i, weak String text, weak Buffer data, user Array{Int} arr)
    var Int x
    user String? s
    user Buffer? b
    owner Array?{Int} a
    user TestStruct? t
    user TestClass? d
    var TestStruct tv(copy 0, user _)!
    var TestClass dv
    var String{12} sv
    var Buffer{12} bv
    var Func?{(copy Int xi, user String si)->(var Int xo, user String? so)} f
    var Array{12:Int} ia
    var Array{12:SimpleStruct} ta
    var Array{12:SimpleClass} da
    var Array{12:String{7}} sa
    var Array{12:Buffer{7}} ba
    var Array{12:Func{()}} fa
    new TestStruct tn(copy 0, user _)!
    new TestClass dn!
    new String{arr[0]} sn!
    new Buffer{arr[0]} bn!
    new Array{arr[0]:Int} ian!
    new Array{arr[0]:SimpleStruct} tan!
    new Array{arr[0]:SimpleClass} dan!
    new Array{arr[0]:String{arr[1]!}} san!
    new Array{arr[0]:Buffer{arr[1]!}} ban!
    new Array{arr[0]:Func{()}} fan!
    var Int ix(copy arr[0])
    user String si(user text!)
    user Buffer bi(user data!)
    var String{12} ibv(user "some string")!
    var Buffer{12} isv(user `fadebeef`)!
    new String{i} isn(user text!)!
    new Buffer{i} ibn(user data!)!
    var Func{:(copy Int n)->(owner String? st)} fi(copy test-int2str)
    var TestStruct itv(copy i, user text!)!
    new TestStruct itn(copy i, user text!)!
    var TestClass idv()
    new TestClass idn()!
    TestStruct(copy i, user text!)!.print()!
    TestClass()!.print()!
    assert! String{arr[0]}()!.length() > 0
    assert! Buffer{arr[0]}()!.length() > 0
    assert! Array{arr[0]:Int}()!.length() > 0
    assert! Array{arr[0]:SimpleStruct}()!.length() > 0
    assert! Array{arr[0]:SimpleClass}()!.length() > 0
    assert! Array{arr[0]:String{arr[1]!}}()!.length() > 0
    assert! Array{arr[0]:Buffer{arr[1]!}}()!.length() > 0
    assert! Array{arr[0]:Func{()}}()!.length() > 0
    assert! x = 0
    assert! s?
    assert! b?
    assert! a?
    t!.print()!
    d!.print()!
    assert! f?
    tv.print()!
    dv.print()!
    assert! sv.length() > 0
    assert! bv.length() > 0
    assert! ia.length() > 0
    assert! ta.length() > 0
    assert! da.length() > 0
    assert! sa.length() > 0
    assert! ba.length() > 0
    assert! fa.length() > 0
    tn.print()!
    dn.print()!
    assert! sn.length() > 0
    assert! bn.length() > 0
    assert! ian.length() > 0
    assert! tan.length() > 0
    assert! dan.length() > 0
    assert! san.length() > 0
    assert! ban.length() > 0
    assert! fan.length() > 0
    assert! ix = 0
    assert! si.length() > 0
    assert! bi.length() > 0
    fi(copy 7)!
    assert! isv.length() > 0
    assert! ibv.length() > 0
    assert! isn.length() > 0
    assert! ibn.length() > 0


func test-complex-function(
        copy Int num, user String text)->(var Int out-num, user String? out-text)
    [; Test
    multiline
    comment ;]

    ; Test Single line comment

    ~~~ Test Single line documentation ~~~
    ; Test Single line comment
    out-num := num
    out-text := text


; Test types
struct TestStruct
    ~~~ documentation test ~~~
    var Int num
    
    ~~~ Test
    multiline
    documentation ~~~
    owner String? text
    
    ; comment test
    
    owner TestStruct? ts
    var Func{:()} fun
    
    new!(copy Int x, user String? s) _
    
    [; Test
    multiline
    comment ;]
    
    func user get()->(var Int x, user String? s) _
    
    func user ! print()
        sys.println(user self.text!)!
        
func ! TestStruct.new(copy Int x, user String? s)
    self.num := x
    if s?
        new String{s!.length() + 1} text(user s!)!
        self.text := text
    if x < 0
        self.ts := TestStruct(copy x + 1, user self.text)!
  
func TestStruct.get()->(var Int x, user String? s)
    x := self.num
    s := self.text


class TestClass
    var Int num
    weak String? text
    owner TestClass? tc
    
    new()
        self.num := 1
    
    func inst user static-meth() _
        
    func dynamic user dynamic-meth() _
    
    func inst user ! print()
        sys.println(user self.text!)!
    
func TestClass.static-meth()
    self.num := 3
    
func TestClass.dynamic-meth()
    self.num := 6


func ! test-void()
    return
func ! test-params(copy Int x, user String? s, owner String? o)
    raise!
func test-outs()->(owner String? s, var Int x)
func ! test-int2str(copy Int x)->(owner String? s)
func test-int(copy Int x)
func test-int2int(copy Int x)->(var Int r)
func test-many(
        copy Int x,
        copy Int y)->(
        var Int n,
        var Int m)


func ! test-call-expression()
    owner String? s
    var Int x
    test-void()!
    test-params(copy 3, user "text", owner _)!
    test-outs()->(owner s, var x)
    test-int2str(copy 4)->(owner s)!
    test-int(copy 5)
    test-int2int(copy 6)->(var x)
    test-many(
            copy 7,
            copy 8)->(
            var x,
            var x)
    var Int tmp
    test-int(copy test-int2int(copy 9)->(var tmp))
    x := test-int2int(copy 10) + test-many(copy 11, copy 12)->(var x)
    s := test-int2str(copy 13)!


func ! test-code-flow(user Array{Int} arr)->(var Int res)
    block
        var Array{12:Int} a2
        a2[0] := res
        a2[1] := a2[0] + 3
    if arr[4]! > 6
        res := 6
    else-if arr is arr
        res := 6
    else-if arr[4]! <> arr[5]!
        res := 6
    else-if 0 = arr[0]
        res := 6
    else
        res := 0
    loop! arr.length()
        arr[6]! := 6
        var Int x(copy arr[2]!)
        while x > 3 and arr is _
        var Int y(copy x - 1)
        loop! 60
            arr[4]! := arr[8]!
            if y > arr[4]!
                continue
            var Int z(copy 7)
            if z <= arr[4]!
                while z > 0
    for n in arr[2]!:2 - (3 * arr[2]!)
        arr[0] := arr[2]!
        var Int w(copy arr[0])
        if w > 4 and arr is-not arr[3:2]!
            arr[1]! := w
        repeat arr[1]! + w
            arr[2]! += 2


func ! test-builtins(
        temp String s,
        temp Buffer buff,
        temp Array{Int} a)
    var Int i
    var Char c
    var Byte y
    var Bool b
    i.str(user s)!
    b := true or false
    a.length()->(var i)
    
    s.length()->(var i)
    s.max-length()->(var i)
    s.clear()
    s.equal(user s)->(var b)
    s.get(copy i)->(var c)!
    s.set(copy i, copy c)!
    s.append(copy c)!
    s.copy(user s)!
    s.concat(user s)!
    s.concat-int(copy i)!
    s.find(user s)->(var i)
    s.has(copy c)->(var b)
    
    a.length()->(var i)
    
    buff.length()->(var i)
    buff.max-length()->(var i)
    buff.clear()
    buff.equal(user buff)->(var b)
    buff.get(copy i)->(var y)!
    buff.set(copy i, copy y)!
    buff.append(copy y)!
    buff.copy(user buff)!
    buff.concat(user buff)!
    buff.find(user buff)->(var i)
    buff.has(copy y)->(var b)
    
    new FileReadText frt(user s)!
    frt.get()->(var c, var b)!
    frt.getline(user s)->(var b)!
    frt.tell()->(var i)!
    frt.seek-set(copy i)!
    frt.seek-cur(copy i)!
    frt.seek-end(copy i)!
    frt.flush()!
    frt.close()!
    new FileReadBinary frb(user s)!
    frb.get()->(var y, var b)!
    frb.read(user buff)->(var i)!
    frb.tell()->(var i)!
    frb.seek-set(copy i)!
    frb.seek-cur(copy i)!
    frb.seek-end(copy i)!
    frb.flush()!
    frb.close()!
    new FileWriteText fwt(user s, copy true)!
    fwt.put(copy c)!
    fwt.write(user s)->(var i)!
    fwt.tell()->(var i)!
    fwt.seek-set(copy i)!
    fwt.seek-cur(copy i)!
    fwt.seek-end(copy i)!
    fwt.flush()!
    fwt.close()!
    new FileWriteBinary fwb(user s, copy false)!
    fwb.put(copy y)!
    fwb.write(user buff)->(var i)!
    fwb.tell()->(var i)!
    fwb.seek-set(copy i)!
    fwb.seek-cur(copy i)!
    fwb.seek-end(copy i)!
    fwb.flush()!
    fwb.close()!
    new FileReadWriteText frwt(user s, copy false, copy true)!
    frwt.get()->(var c, var b)!
    frwt.getline(user s)->(var b)!
    frwt.put(copy c)!
    frwt.write(user s)->(var i)!
    frwt.tell()->(var i)!
    frwt.seek-set(copy i)!
    frwt.seek-cur(copy i)!
    frwt.seek-end(copy i)!
    frwt.flush()!
    frwt.close()!
    new FileReadWriteBinary frwb(user s, copy true, copy false)!
    frwb.get()->(var y, var b)!
    frwb.read(user buff)->(var i)!
    frwb.put(copy y)!
    frwb.write(user buff)->(var i)!
    frwb.tell()->(var i)!
    frwb.seek-set(copy i)!
    frwb.seek-cur(copy i)!
    frwb.seek-end(copy i)!
    frwb.flush()!
    frwb.close()!
    new FileReadWriteText frwt1(user s, copy false, copy false)!
    new FileReadWriteText frwt2(user s, copy true, copy false)!
    new FileReadWriteText frwt3(user s, copy true, copy true)!
    new FileReadWriteBinary frwb1(user s, copy false, copy false)!
    new FileReadWriteBinary frwb2(user s, copy false, copy true)!
    new FileReadWriteBinary frwb3(user s, copy true, copy true)!
    owner File f(owner frt)
    f.tell()->(var i)!
    f.seek-set(copy i)!
    f.seek-cur(copy i)!
    f.seek-end(copy i)!
    f.flush()!
    f.close()!
    
    user String arg(user sys.argv[1]!)
    sys.print(user s)!
    sys.println(user s)!
    sys.getchar()->(var c, var b)!
    sys.getline(user s)->(var b)!
    sys.getenv(user s, user s)->(var b)!
    sys.system(user s)->(var i)!
    sys.exit(copy i)!
    sys.stdin.get()->(var c, var b)!
    sys.stdout.put(copy c)!
    sys.stderr.put(copy c)!


func ! test-ref-count()
    strong String? s(strong String{32}(user "test string")!)
    weak String s-user(weak s!)
    sys.println(user s!)!
    sys.println(user s-user!)!
    remove(owner s!)
    if not s?
        sys.println(user "ownership passed")!
    if not s-user?
        sys.println(user "string deleted")!
    new TestStruct ts(copy 0, user "first struct")!
    sys.println(user ts.text!)!
    ts.ts := TestStruct(copy 1, user "second struct")!
    sys.println(user ts.ts!.text!)!

func remove(owner String s)
    ; remove s

struct Item
    owner String s
    
    new!(user String s)
        new String{s.length() + 1} news(user s)!
        self.s := news

struct Data{Generic}
    weak Generic? item
    
    func user ! set(weak Generic? item) _
    
    func user get()->(weak Generic? item)
        item := self.item
        
func ! Data.set(weak Generic? item)
    weak Generic? x(weak item)
    self.item := x
    new Data{Generic} d!
    d.item := self.item
    self.item := d.item

struct Dataset{First:Second:Third}(Data{First})
    weak Second? second
    weak Third? third

struct MidData{Generic}(Dataset{Item:Data{Generic}:Generic})

struct TopData(MidData{TestStruct})

func ! test-type-parameters(weak Item? s)
    var Data{Item} d
    user Item? su
    d.item := s
    s := d.item
    var Array{5:Data{Item}} ad
    s := ad[2].item
    var Data{Data{Data{Item}}} dr
    s := dr.item!.item!.item
    d.set(weak s)!
    d.get()->(weak s)
    user Data? dg(user d)
    assert! dg?
    
    var TopData t
    s-var Data{TestStruct} dt!
    s-var TestStruct ts(copy 0, user _)!
    t.item := s
    t.second := dt
    t.third := ts


func ! try-catch-raise(user TestStruct? t)
    try
        t.num := 1
    catch
        raise! "ignored message"

func ! test-error-handling(user TestStruct? t)
    try
        sys.print(user "error handling { 1 ")
        t.num := 1
        sys.print(user " X ")
        try
            test-void()
        catch
            test-int(copy 2)
    catch
        sys.print(user "2 ")!
        try
            sys.print(user "3 ")
            t.num := 2
            sys.print(user " X ")
        sys.print(user "4 ")!
    sys.print(user "5 ")!
    try
        sys.print(user "6 ")
        try
            sys.print(user "7 ")
            try-catch-raise(user t)
            sys.print(user " X ")
        sys.print(user "8 ")
        raise "another ignored message"
    if-error t.num := 2
        sys.print(user "9 ")
        if-ok sys.print(user "10 ")
            sys.print(user "11 ")
        else
            sys.print(user " X ")
    else
        sys.print(user " X ")!
    if-ok t.num := 2
        sys.print(user " X ")
    else-if-error sys.print(user "12 ")
        sys.print(user " X ")
    else-if-ok sys.print(user "13 ")
        sys.print(user "14 ")
    else
        sys.print(user " X ")!
    sys.println(user "}")!


struct Container{Generic}
    owner Generic? value
    weak Container?{Generic} next
    
    new(owner Generic? value, weak Container?{Generic} next)
        self.value := value
        self.next := next
    
    func user ! iter()->(owner ContainerIterator?{Generic} iter)
        iter := ContainerIterator{Generic}(weak self.next)!

struct ContainerIterator{Generic}
    weak Container?{Generic} curr
    
    new(weak Container?{Generic} first)
        self.curr := first
    
    func user ! step()->(user Generic? item, var Bool has-data)
        has-data := self.curr?
        item := _
        if has-data
            item := self.curr!.value
            self.curr := self.curr!.next

func ! test-for-each()
    var String{16} text
    sys.print(user "chars[ ")!
    for c in "abcdef"
        text.clear()
        text.append(copy c)!
        sys.print(user text)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:Int} arr
    arr[0] := 14
    arr[1] := 15
    arr[2] := 16
    sys.print(user "numbers[ ")!
    for n in arr
        text.clear()
        n.str(user text)!
        sys.print(user text)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:SimpleStruct} tsarr
    tsarr[0].text := String{4}(user "aaa")!
    tsarr[1].text := String{4}(user "bbb")!
    tsarr[2].text := String{4}(user "ccc")!
    sys.print(user "structs[ ")!
    for ts in tsarr
        sys.print(user ts.text!)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:String{16}} sarr
    sarr[0].copy(user "ddd")!
    sarr[1].copy(user "eee")!
    sarr[2].copy(user "fff")!
    sys.print(user "strings[ ")!
    for s in sarr
        sys.print(user s)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    s-var Container{Item} container-last(owner Item(user "iii")!, weak _)!
    s-var Container{Item} container-mid(owner Item(user "hhh")!, weak container-last)!
    s-var Container{Item} container-first(owner Item(user "ggg")!, weak container-mid)!
    s-var Container{Item} container(owner _, weak container-first)!
    owner ContainerIterator{Item} iter(owner container.iter()!)
    sys.print(user "values[ ")!
    for sc in iter!
        sys.print(user sc!.s)!
        sys.print(user " ")!
    sys.println(user "]")!
    
    var Array{3:Array{3:Array{3:String{16}}}} saarr
    for n in 3
        for m in 3
            for i in 3
                user String s
                s := saarr[n]![m]![i]!
                s.copy(user "val")!
                s.append(copy '0' + n)!
                s.append(copy '0' + m)!
                s.append(copy '0' + i)!
    sys.print(user "items[ ")!
    for a in saarr
        sys.print(user "\n  ")!
        for b in a
            for s in b
                sys.print(user s)!
                sys.print(user " ")!
    sys.println(user "]")!


class ComplexField
    weak ComplexField? x
    func dynamic user ! meth()
        sys.print(user "$")!

struct HasComplexField
    s-var ComplexField x
    var Array{3:String{6}} as
    func user ! run() _

func ! HasComplexField.run()
    user ComplexField x(user self.x)
    x := self.x
    x.meth()!
    self.x.meth()!
    ComplexField.meth(user self.x)!
    user ComplexField? x2(user self.x.x!)
    x2 := self.x.x!
    x2!.meth()!
    self.x.x!.meth()!
    ComplexField.meth(user self.x.x!)!
    self.as[0].copy(user "a1")!
    self.as[1].copy(user "a2")!
    self.as[2].copy(user "a3")!
    for s in self.as
        sys.print(user " ")!
        sys.print(user s)!

func ! test-complex-field()
    s-var HasComplexField y!
    y.x.x := y.x
    sys.print(user "complex fields: ")!
    y.run()!
    sys.println(user "")!


func ! set-temp(temp TestStruct t)
    t.ts := TestStruct(copy 2, user _)!

func ! test-temp()
    var TestStruct t(copy 1, user _)!
    set-temp(temp t)!
    assert! t.ts!.num = 2

func ! test-switch()
    strong String s1(strong String{32}(user "first string")!)
    strong String s2(strong String{32}(user "second string")!)
    s1 :=: s2
    sys.println(user s1)!
    sys.println(user s2)!


class BaseString
    owner String s
    func dynamic user ! print()
        sys.println(user self.s)!
    new!()
        self.s := String{16}(user "BaseString")!
    cleanup()
        try
            self.print()

class TestString(BaseString)
    func dynamic user ! print()
        sys.println(user "TestString print")!
        base()!
    new!()
        self.s := String{16}(user "TestString")!
    cleanup()
        try
            sys.println(user "TestString cleanup")

func ! test-cleanup()
    owner BaseString? bs(owner TestString()!)
    bs := _


main!
    test-simple-function()!
    test-ref-count()!
    test-error-handling(user _)!
    test-for-each()!
    test-complex-field()!
    test-temp()!
    test-switch()!
    test-cleanup()!
