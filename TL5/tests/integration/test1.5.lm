~~~ TL4 compiler integration test file #1

This file should only work together with test file #2.
~~~
module integration


class TopType(covered.MiddleType)
    var Int num-top
    weak BaseType? top-base-ref
    weak covered.MiddleType? top-mid-ref
    
    new()
        base()
        self.num-top := 3
    
    
    func dynamic user ! meth2()
        sys.println(user "TopType.meth2")!
        base()!
        covered.MiddleType.meth2(user self)!
        BaseType.meth2(user self)!
    
    func dynamic user ! meth3(copy Int n, user String s)
        sys.println(user "TopType.meth3")!
        base.meth3(copy n, user s)!
    
    func dynamic user ! meth5(copy Int n, weak String? s)
        sys.println(user "TopType.meth5")!
        base(copy n, weak s)!
        covered.MiddleType.meth1(user _, copy n, weak s)!
        BaseType.meth1(user _, copy n, weak s)!
    
    func dynamic user ! meth6()
        sys.println(user "TopType.meth6")!
        self.num-mid := self.num-base
        self.top-base-ref := self.top-mid-ref
        user covered.MiddleType? mt(user self)
        mt := self
        user BaseType? bt(user mt)
        test-mid-out()->(user bt)


class BaseType
    var Int num-base
    weak covered.MiddleType? base-mid-ref
    weak TopType? base-top-ref
    
    new()
        self.num-base := 1
    
    func dynamic user ! meth0()
        sys.println(user "BaseType.meth0")!
    
    func dynamic user? ! meth1(copy Int n, weak String? s)
        sys.println(user "BaseType.meth1")!
    
    func dynamic user ! meth2()
        sys.println(user "BaseType.meth2")!
    
    func dynamic user ! meth3(copy Int n, user String s)
        sys.println(user "BaseType.meth3")!


func test-mid-out()->(user covered.MiddleType? mt)
    mt := _


func ! test-new-mid()->(owner covered.MiddleType? mt)
    new covered.MiddleType new-mt!
    mt := new-mt


mock TestStruct.get()->(var Int x, user String? s)
    x := 12
    s := _

mock ! test-int2str(copy Int x)->(owner String? s)
    raise!

mock TestClass.dynamic-meth()
    self.num := 7

test test-func()
    owner String? s
    assert-error! test-int2str(copy 3)->(owner s)
    test-int2str.mocked(copy 4)->(owner s)!
    test-int2str.active := false
    test-int2str(copy 5)->(owner s)!
    test-int2str.active := true
    assert-error! test-int2str(copy 6)->(owner s)
    
    var TestStruct t(copy 0, user _)!
    var Int x
    t.get()->(var x)
    assert! x = 12
    t.get.mocked()->(var x)
    assert! x = 0
    t.get.active := false
    x := 1
    t.get()->(var x)
    assert! x = 0
    TestStruct.get.active := true
    t.get()->(var x)
    assert! x = 12
    
    var TestClass c
    assert! c.num = 1
    c.dynamic-meth()
    assert! c.num = 7
    TestClass.dynamic-meth.mocked(user c)
    assert! c.num = 6
    TestClass.dynamic-meth.active := false
    c.num := 0
    c.dynamic-meth()
    assert! c.num = 6
    TestClass.dynamic-meth.active := true
    TestClass.dynamic-meth(user c)
    assert! c.num = 7


test test-another()
    var Int x
    assert! x = 0


native include "external.h"
native var Int external-int
native const Int EXTERNAL-CONST
native type Native
native func external0() "MY_Some_external"
native func external1(copy Int i, user String s, user Array{Int} a)->(
        copy Native n)
native func external2(copy Native n)->(copy Int i)
native code "#define MY_DEF_VALUE 12"

test test-native()
    assert! external-int = 6
    assert! EXTERNAL-CONST = 12
    var Native n
    var String{4} s(user "bb")!
    var Array{6:Int} a
    external0()
    assert! external-int = 7
    n := external1(copy 3, user s, user a)
    assert! s[0] = 'a'
    assert! a[0] = 3
    assert! external2(copy n) = 7
    var Int x
    native "x = MY_DEF_VALUE;"
    assert! x = 12


test test-pointer()
    var Int a(copy 3)
    var Int b(copy 4)
    var cdef.Pointer{Int} pa
    var cdef.Pointer{Int} pb
    var cdef.Pointer{cdef.Pointer{Int}} pp
    var Array{3:Int} arr
    pa.set-point-to(var a)
    b := pa.get-pointed-at(copy 0)
    assert! b = 3
    pb.set-point-to(var b)
    assert! pb <> pa
    pp.set-point-to(var pa)
    pb := pp.get-pointed-at(copy 0)
    assert! pb = pa
    arr[0] := 1
    arr[1] := 2
    arr[2] := 3
    pa.set-from-array(user arr)
    assert! pa.get-pointed-at(copy 0) = 1
    assert! pa.get-pointed-at(copy 1) = 2
    assert! pa.get-pointed-at(copy 2) = 3
    
    var SimpleStruct sa
    var SimpleStruct sb
    user SimpleStruct s(user sb)
    var cdef.Pointer{SimpleStruct} ps
    var Array{3:SimpleStruct} arrs
    sa.num := 1
    sb.num := 1
    ps.set-from-ref(user sa)
    s := ps.get-ref-at(copy 0)
    assert! s.num = 1
    arrs[0].num := 1
    arrs[1].num := 2
    arrs[2].num := 3
    ps.set-from-array(user arrs)
    assert! ps.get-ref-at(copy 0).num = 1
    assert! ps.get-ref-at(copy 1).num = 2
    assert! ps.get-ref-at(copy 2).num = 3
    
    var String{16} stra(user "aabbccdd")!
    var String{16} strb(user "---")!
    var cdef.Pointer{Char} pc
    pc.set-from-array(user stra)
    cdef.copy-to-string(copy pc, user strb)!
    assert! strb.equal(user stra)
    stra[2]! := '\0'
    cdef.set-null-term-length(user stra)
    assert! stra.equal(user "aa")


test test-dynamic-type-parameters()
    s-var Data{covered.MiddleType} dmid!
    s-var TopType ttop!
    ttop.num-base := 12
    dmid.item := ttop
    weak BaseType? tbase
    tbase := dmid.item
    assert! tbase!.num-base = 12
    ttop.num-base := 13
    dmid.set(weak ttop)!
    tbase := _
    dmid.get()->(weak tbase)
    assert! tbase!.num-base = 13


struct Link
    strong Link? next

class BaseLink
    strong BaseLink? next
    weak Link? link
    
    func dynamic user m-meth()
        ; do nothing

class TopLink{Generic}(BaseLink)
    strong Generic? item

struct RefNode
    owner RefNode? next
    var Ref? ref
    
    new(copy Ref? ref)
        self.ref := ref

func ! new-ref-node(copy Ref? ref)->(owner RefNode? next)
    new RefNode ref-node(copy ref)!
    ref-node.next := next
    next := ref-node


var Bool record-delete
owner RefNode? deleted-links
owner RefNode? deleted-base-links
owner RefNode? deleted-top-links
owner RefNode? deleted-refmans(owner _)

mock ! delete()
    if record-delete
        new-ref-node(copy self)->(owner deleted-refmans)!

mock ! Link.delete()
    if record-delete
        new-ref-node(copy self)->(owner deleted-links)!

mock ! BaseLink.delete()
    if record-delete
        new-ref-node(copy self)->(owner deleted-base-links)!

mock ! TopLink.delete()
    if record-delete
        new-ref-node(copy self)->(owner deleted-top-links)!

func remove-obj(owner Link b)
    ; remove b

func ! get-outdated-var()->(weak Link? l-out)
    strong Link l-var(strong Link()!)
    l-out := l-var

test test-simple-delete()
    assert! not deleted-refmans?
    assert! not deleted-links?
    record-delete := true
    
    strong Link? l(strong Link()!)
    weak Link? l-user(weak l)
    assert! l?
    assert! l-user?
    var Ref l-ref(copy l)
    remove-obj(owner l!)
    assert! not l?
    assert! not l-user?
    assert! not deleted-refmans?
    assert! deleted-links?
    assert! deleted-links!.ref is l-ref
    assert! not deleted-links!.next?
    l-user := _
    assert! deleted-refmans?
    assert! deleted-refmans!.ref is l-ref
    assert! not deleted-refmans!.next?
    get-outdated-var()->(weak l-user)!
    assert! l-user is-not _
    assert! not l-user?
    
    record-delete := false
    deleted-refmans := _
    deleted-links := _

func ! has-ref(copy Ref ref)->(owner RefNode? node)
    has-ref-rec(copy ref)->(owner node)!
    has-ref-rec(copy ref)->(owner deleted-refmans)!

func ! has-ref-rec(copy Ref ref)->(owner RefNode? node)
    assert! node?
    if node!.ref is ref
        owner RefNode? next(owner node!.next)
        node := next
    else
        has-ref-rec(copy ref)->(owner node!.next)!

test test-complex-delete()
    assert! not deleted-refmans?
    assert! not deleted-links?
    assert! not deleted-base-links?
    assert! not deleted-top-links?
    record-delete := true
    
    strong BaseLink? b1(strong BaseLink()!)
    var Ref b1-ref(copy b1)
    strong BaseLink? b2(strong BaseLink()!)
    var Ref b2-ref(copy b2)
    strong TopLink?{Link} t1(strong TopLink{Link}()!)
    var Ref t1-ref(copy t1)
    strong TopLink?{BaseLink} t2(strong TopLink{BaseLink}()!)
    var Ref t2-ref(copy t2)
    strong TopLink?{BaseLink} t3(strong TopLink{BaseLink}()!)
    var Ref t3-ref(copy t3)
    strong Link? l1(strong Link()!)
    var Ref l1-ref(copy l1)
    strong Link? l2(strong Link()!)
    var Ref l2-ref(copy l2)
    strong Link? l3(strong Link()!)
    var Ref l3-ref(copy l3)
    
    b1!.link := l1
    b2!.link := l2
    t1!.link := l1
    t2!.link := l2
    t3!.link := l3
    
    l2!.next := l3
    assert! not l3?
    l1!.next := l2
    assert! not l2?
    t3!.item := b2
    assert! not b2?
    t2!.item := t3
    assert! not t3?
    t1!.next := t2
    assert! not t2?
    t1!.item := l1
    assert! not l1?
    b1!.next := t1
    assert! not t1?
    
    assert! not deleted-refmans?
    assert! not deleted-links?
    assert! not deleted-base-links?
    assert! not deleted-top-links?
    b1 := _
    assert! not b1?
    
    record-delete := false
    has-ref(copy b1-ref)->(owner deleted-base-links)!
    has-ref(copy t1-ref)->(owner deleted-top-links)!
    has-ref-rec(copy t1-ref)->(owner deleted-base-links)!
    has-ref(copy t2-ref)->(owner deleted-top-links)!
    has-ref-rec(copy t2-ref)->(owner deleted-base-links)!
    has-ref(copy t3-ref)->(owner deleted-top-links)!
    has-ref-rec(copy t3-ref)->(owner deleted-base-links)!
    has-ref(copy b2-ref)->(owner deleted-base-links)!
    has-ref(copy l1-ref)->(owner deleted-links)!
    has-ref(copy l2-ref)->(owner deleted-links)!
    has-ref(copy l3-ref)->(owner deleted-links)!
    
    assert! not deleted-refmans?
    assert! not deleted-links?
    assert! not deleted-base-links?
    assert! not deleted-top-links?
    
    deleted-refmans := _
    deleted-links := _
    deleted-base-links := _
    deleted-top-links := _

func ! has-refs(user Array{Ref} refs, copy Int number)
    record-delete := false
    for n in number
        has-ref(copy refs[n]!)->(owner deleted-links)!
    record-delete := true

func ! cleanup-test(user Array{Ref} refs)
    try
        raise
    catch
        strong Link la(strong Link()!)
        refs[0] := la
        if false
            ; pass
        else
            strong Link lb(strong Link()!)
            refs[1]! := lb
            try
                strong Link lc(strong Link())
                refs[2] := lc
                if true
                    strong Link ld(strong Link())
                    refs[3] := ld
                    loop
                        strong Link le(strong Link())
                        refs[4] := le
                        repeat 3
                            strong Link lf(strong Link())
                            refs[5] := lf
                            return

test test-block-delete()
    assert! not deleted-refmans?
    assert! not deleted-links?
    record-delete := true
    var Array{6:Ref} refs
    
    cleanup-test(user refs)!
    has-refs(user refs, copy 6)!
    
    var Int n
    loop! 3
        strong Link la(strong Link()!)
        refs[n]! := la
        n += 1
        if n = 2
            continue
        if n = 3
            break
    has-refs(user refs, copy 3)!
    
    n := 0
    try
        loop-infinite
            strong Link la(strong Link())
            refs[n] := la
            n += 1
            if n = 3
                raise
    has-refs(user refs, copy 3)!
    
    for n in 3
        strong Link lb(strong Link()!)
        refs[n]! := lb
    has-refs(user refs, copy 3)!
    
    n := 0
    repeat 3
        strong Link lb(strong Link()!)
        refs[n]! := lb
        n += 1
    has-refs(user refs, copy 3)!
    
    block
        strong Link lb1(strong Link()!)
        refs[0] := lb1
        strong Link lb2(strong Link()!)
        refs[1] := lb2
    has-refs(user refs, copy 2)!
    
    record-delete := false
    deleted-refmans := _
    deleted-links := _


func ! raise-message()
    raise! "tested message"

func ! ignore-and-raise()
    try
        raise-message()
    raise! "ignore and raise"

func ! failed-assert()
    assert! 1 = 2

func ! good-assert-error()
    assert-error! raise-message()
    raise! "good assert! error"

func ! failed-assert-error()
    assert-error! test-void()

func ! wrong-message-assert-error()
    assert-error! raise-message(), "wrong message"

func ! loop-limit-reached()
    loop! 3
        while true

var Int new-fail-countdown

mock new()->(var Bool alloc-success)
    alloc-success := true
    if new-fail-countdown > 0
        new-fail-countdown -= 1
        if new-fail-countdown = 0
            alloc-success := false

func ! alloc()
    strong SimpleStruct? object(strong SimpleStruct()!)
    assert! object?

test test-assert-error-message()
    assert-error! raise-message(), "tested message"
    assert-error! ignore-and-raise(), "ignore and raise"
    assert-error! failed-assert(), "condition is not true"
    assert-error! good-assert-error(), "good assert! error"
    assert-error! failed-assert-error(), "error not raised"
    assert-error! wrong-message-assert-error()
    var Func?{()} fun
    assert-error! fun(), "empty object used"
    strong Array?{Int} arr(strong Array{2:Int}()!)
    assert-error! arr[6], "slice index out of bounds"
    assert-error! Array{-2:Int}(), "slice index out of bounds"
    weak Array?{Int} arr2(weak arr)
    arr := _
    assert-error! arr.length(), "empty object used"
    assert-error! arr2.length(), "outdated weak reference used"
    assert-error! arr[0], "empty object used"
    assert-error! arr2[0], "outdated weak reference used"
    user TopType? top(user _)
    assert-error! top.meth2(), "empty object used"
    new-fail-countdown := 1
    assert-error! alloc(), "insufficient memory for object dynamic allocation"
    new-fail-countdown := 2
    assert-error! alloc(), "insufficient memory for managed object"
    var Int zero(copy 0)
    assert-error! 24 div zero, "zero division"
    assert-error! 24 mod zero, "zero division"
    assert-error! loop-limit-reached(), "loop limit reached"

native var Int lumi-debug-value

enum LumiDebug
    NOTHING
    FAIL
    SUCCESS

test test-builtin-errors()
    var String{4} strg
    var Buffer{4} buff
    var String{3} short-str
    user String? empty
    var Int i
    var Char ch
    var Byte bt
    lumi-debug-value := LumiDebug.SUCCESS
    var FileReadText file-read-text(user strg)!
    var FileReadBinary file-read-binary(user strg)!
    var FileWriteText file-write-text(user strg, copy false)!
    var FileWriteBinary file-write-binary(user strg, copy false)!
    lumi-debug-value := LumiDebug.NOTHING
    assert-error! FileReadText(user empty), "empty object used"
    assert-error! file-read-text.get()->(var ch), "file not opened"
    assert-error! file-read-text.getline(user strg), "file not opened"
    assert-error! file-read-binary.get()->(var bt), "file not opened"
    assert-error! file-read-binary.read(user buff), "file not opened"
    assert-error! file-write-text.put(copy ch), "file not opened"
    assert-error! file-write-text.write(user strg), "file not opened"
    assert-error! file-write-binary.put(copy bt), "file not opened"
    assert-error! file-write-binary.write(user buff), "file not opened"
    assert-error! file-read-text.tell(), "file not opened"
    assert-error! file-read-text.seek-set(copy 0), "file not opened"
    assert-error! file-read-text.seek-cur(copy 0), "file not opened"
    assert-error! file-read-text.seek-end(copy 0), "file not opened"
    assert-error! file-read-text.flush(), "file not opened"
    lumi-debug-value := LumiDebug.FAIL
    assert-error! FileReadText(user strg), "open file failed"
    assert-error! FileReadBinary(user strg), "open file failed"
    assert-error! FileWriteText(user strg, copy true), "open file failed"
    assert-error! FileWriteBinary(user strg, copy true), "open file failed"
    assert-error! FileReadWriteText(user strg, copy true, copy true),
            "open file failed"
    assert-error! FileReadWriteBinary(user strg, copy true, copy true),
            "open file failed"
    assert-error! file-read-text.close(), "close file failed"
    assert-error! file-read-text.get()->(var ch), "file read failed"
    assert-error! file-read-text.getline(user strg), "file read failed"
    assert-error! file-read-binary.get()->(var bt), "file read failed"
    assert-error! file-read-binary.read(user buff), "file read failed"
    assert-error! file-write-text.put(copy ch), "file write failed"
    strg.append(copy 'a')!
    assert-error! file-write-text.write(user strg), "file write failed"
    assert-error! file-write-binary.put(copy bt), "file write failed"
    buff.append(copy 12)!
    assert-error! file-write-binary.write(user buff), "file write failed"
    assert-error! file-read-text.tell(), "getting file offset failed"
    assert-error! file-read-text.seek-set(copy 0), "setting file offset failed"
    assert-error! file-read-text.seek-cur(copy 0), "setting file offset failed"
    assert-error! file-read-text.seek-end(copy 0), "setting file offset failed"
    assert-error! file-read-text.flush(), "flush file failed"
    lumi-debug-value := LumiDebug.SUCCESS
    assert-error! sys.getline(user short-str), "sequence too long"
    lumi-debug-value := LumiDebug.NOTHING
    
    var String{4} full-string(user "abc")!
    assert-error! "aa".get(copy 2), "slice index out of bounds"
    assert-error! strg.set(copy 3, copy 'a'), "slice index out of bounds"
    assert-error! full-string.append(copy 'a'), "sequence too long"
    assert-error! full-string.concat(user "a"), "sequence too long"
    assert-error! 123.str(user short-str), "sequence too long"
    assert-error! short-str.copy(user "aaaaa"), "sequence too long"
    var cdef.Pointer{Char} charp
    charp.set-from-array(user "aaaaa")
    assert-error! cdef.copy-to-string(copy charp, user short-str),
            "sequence too long"
    
    var Buffer{1} full-buffer
    full-buffer.append(copy 52)!
    assert-error! buff.get(copy 4), "slice index out of bounds"
    assert-error! buff.set(copy 4, copy 55), "slice index out of bounds"
    assert-error! full-buffer.append(copy 111), "sequence too long"
    assert-error! full-buffer.concat(user buff), "sequence too long"
    buff.append(copy 3)!
    assert-error! full-buffer.copy(user buff), "sequence too long"
    var cdef.Pointer{Byte} bytep
    bytep.set-from-array(user buff)
    assert-error! cdef.copy-to-buffer(copy bytep, copy 2, user full-buffer),
            "sequence too long"
    
    lumi-debug-value := LumiDebug.FAIL
    assert-error! sys.print(user strg), "file write failed"
    assert-error! sys.println.mocked(user ""), "file write failed"
    assert-error! sys.getchar()->(var ch), "file read failed"
    assert-error! sys.getline(user strg), "file read failed"
    assert-error! sys.exit(copy 0), "exit failed"
    assert-error! sys.system(user "aaa"), "command execution failed"
    lumi-debug-value := LumiDebug.SUCCESS
    assert-error! sys.getline(user short-str), "sequence too long"
    lumi-debug-value := LumiDebug.NOTHING

mock ! sys.println(user Array{Char} text)
    assert! text.length() > 0

test test-cover-all()
    var covered.MiddleType mid
    mid.meth1(copy 0, weak _)!
    mid.meth2()!
    mid.meth4()!
    mid.meth5(copy 0, weak _)!


test test-constants()
    assert! SIZE = 12
    assert! LENGTH = 60
    assert! TestEnum.FIRST-VALUE = 0
    assert! TestEnum.ANOTHER-VALUE = 1
    assert! TestEnum.VALUE2 = 2
    assert! TestEnum.length = 3
    assert! int-arr.length() = 63


test test-bitwise()
    var cdef.Uchar c(copy 0xF0)
    assert! c band 0x31 = 0x30
    assert! c bor 0x0F = 0xFF
    assert! c shr 2 = 0x3C
    assert! 0x0F shl 4 = c
    assert! c xor 0xA0 = 0x50
    ; bitwise not in C is not limited to char, so we have to trim
    assert! bnot c band 0xFF = 0x0F

