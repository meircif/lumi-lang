~~~ TL4 compiler integration error test file ~~~
module error

class BaseType
    var Int x
    func dynamic user? meth()

class TopType(BaseType)
    func dynamic user? meth()

func f-get-top()->(user TopType? top)
    top := _

func ! f-good-function()
    return

func ! f-raise-message(user String msg)
    raise! msg

var Int new-fail-countdown

mock new()->(var Bool alloc-success)
    alloc-success := true
    if new-fail-countdown > 0
        new-fail-countdown clamp-= 1
        if new-fail-countdown = 0
            alloc-success := false


test fail-call-empty()
    var Func?{()} fun
    fun!()

test fail-slice-index()
    var Array{2:Int} arr
    var Int i(copy 6)
    assert! arr[i]! = 0

test fail-negative-sequence()
    var Sint8 length(copy -2)
    new Array{length:Int} arr!

test fail-member-empty()
    user BaseType? obj
    assert! obj!.x = 0
    obj!.meth()

test fail-member-outdated()
    strong BaseType? obj-owner(strong BaseType()!)
    weak BaseType? obj(weak obj-owner)
    obj-owner := _
    assert! obj!.x = 0
    obj!.meth()

test fail-sequence-empty()
    user Array?{Int} arr
    assert! arr![0] = 0

test fail-sequence-outdated()
    strong Array?{Int} arr-owner(strong Array{2:Int}()!)
    weak Array?{Int} arr(weak arr-owner)
    arr-owner := _
    assert! arr![0] = 0

test fail-slice-outdated()
    strong Array?{Int} arr-owner(strong Array{6:Int}()!)
    weak Array?{Int} arr(weak arr-owner![2:3]!)
    arr-owner := _
    assert! arr![0] = 0

test fail-dynamic-empty()
    user BaseType? obj
    obj!.meth()

test fail-object-no-memory()
    new-fail-countdown := 1
    new BaseType obj!

test fail-managed-no-memory()
    new-fail-countdown := 2
    strong BaseType obj(strong BaseType()!)

test fail-exclamation-empty()
    user String? cs
    user String s(user cs!)

test fail-raise()
    raise!

test fail-raise-message()
    f-raise-message(user "my error")!

test fail-assert()
    assert! 1 = 2

test fail-assert-error()
    assert-error! f-good-function()

test fail-assert-error-message()
    assert-error! f-raise-message(user "tested other message"), "tested message"

test fail-assert-error-message-prefix()
    assert-error! f-raise-message(user "tested message"), "tested message and more"

test fail-zero-division()
    var Int x(copy 0)
    assert! 12 div x! = 0
    
test fail-loop-limit()
    loop! 3
        while true

test fail-integer-overflow()
    var Uint8 x(copy 12)
    x := clamp! - x
