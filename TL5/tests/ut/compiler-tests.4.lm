~~~ TL5 compiler tests - Compiler ~~~
module tl5-compiler-tests


var Int common-header-length
var Array{6:String{256}} mock-argv


mock tl5-compiler.get-sys-argv()->(user Array{String} argv)
    argv := tl5-compiler-tests.mock-argv


func write-syntax-tree(copy Char flag)
    var Int first-file-index
    mock-argv[0].new(user "tl4-compiler")
    if flag != ' '
        mock-argv.length := 6
        mock-argv[1].new(user "-")
        mock-argv[1].append(copy flag)
        mock-argv[2].new(user "ut")
        mock-argv[5].new(user "path\\second.5.lm")
        first-file-index := 3
    else
        mock-argv.length := 3
        first-file-index := 1
    mock-argv[first-file-index].new(user "mock.c")
    mock-argv[first-file-index + 1].new(user "mock.5.lm")

    tl5-compiler.glob.root.mainless := true
    tl5-compiler.glob.root.parse()
    tl5-compiler.glob.root.analyze()
    tl5-compiler.glob.root.write()


func write-syntax-tree-success(copy Char flag)
    if crush-run
        write-syntax-tree(copy flag)
        raise "not crushing in the second run"
    sys-exit := false
    Sys.print.active := true
    try
        write-syntax-tree(copy flag)
        Sys.print.active := false
    catch
        Sys.print.active := false
        if sys-exit
            print-case-error()
            sys.print(user mock-print-text[0:mock-print-text.length - 1])
        else
            crush-run := true
        assert false


func test-global-scope(
        user String input-text,
        user String second-file-input-text,
        user String expected-output,
        copy Char flag)
    setup-test()
    set-mock-file-text(user input-text, user second-file-input-text)
    write-syntax-tree-success(copy flag)
    var Int slice-start
    var Int slice-length(copy mock-output-file-text.length)
    if mock-output-file-text.length > 0
        if mock-output-file-text[0] = '\n'
            slice-start := 1
            slice-length -= 1
        if mock-output-file-text[mock-output-file-text.length - 1] = '\n'
            slice-length -= 1
    assert-string-slice(
            user expected-output,
            user mock-output-file-text,
            copy slice-start,
            copy slice-length,
            copy true)


func try-write-syntax-tree(copy Char flag)->(var Bool has-error)
    if crush-run
        write-syntax-tree(copy flag)
        raise
    has-error := true
    sys-exit := false
    Sys.print.active := true
    try
        write-syntax-tree(copy flag)
        has-error := false
        Sys.print.active := false
        print-case-error()
        sys.print(user "[no error raised]")
    catch
        Sys.print.active := false
        if not sys-exit
            crush-run := true
            assert false


func test-error-message(user String expected-header, user String expected-error)
    assert-string-slice(
            user expected-header,
            user mock-print-text,
            copy 0,
            copy expected-header.length,
            copy false)
    if mock-print-text.length > 0
        if mock-print-text[mock-print-text.length - 1] != '\n'
            print-case-error()
            sys.print(user "[no new-line in error end]")
            assert false
    var Int line-num-length(copy 1)
    do
        while mock-print-text.length > expected-header.length + line-num-length
        while mock-print-text[expected-header.length + line-num-length] != ']'
        line-num-length += 1
    if mock-print-text.length >= expected-header.length + line-num-length + 3
        assert-string-slice(
                user expected-error,
                user mock-print-text,
                copy expected-header.length + line-num-length + 2,
                copy mock-print-text.length - expected-header.length -
                line-num-length - 3,
                copy true)


func test-global-scope-error(
        user String input-text,
        user String second-file-input-text,
        user String expected-error,
        copy Char flag)
    setup-test()
    set-mock-file-text(user input-text, user second-file-input-text)
    assert try-write-syntax-tree(copy flag)
    Sys.print.active := false
    user String expected-header
    if flag != ' '
        expected-header := "Code error in path\\second.5.lm["
    else
        expected-header := "Code error in mock.5.lm["
    test-error-message(user expected-header, user expected-error)


func test-code-setup(user String input-text)
    setup-test()
    set-mock-file-text(user "", user _)
    mock-input-file-text.concat(user common-header)
    mock-input-line-reset-index := mock-input-file-text.length
    concat-indentation(user mock-input-file-text)
    for ch in input-text[0:input-text.length - 1]
        mock-input-file-text.append(copy ch)
        if ch = '\n'
            concat-indentation(user mock-input-file-text)
    mock-input-file-text.append(copy input-text[input-text.length - 1])


func test-code(
        user String input-text, user String expected-output, copy Bool is-main)
    test-code-setup(user input-text)
    concat-marker(user mock-input-file-text)
    write-syntax-tree-success(copy ' ')
    var Int code-length(copy mock-output-file-text.find(user code-marker) -
            common-header-length - tl5-compiler.INDENTATION-SPACES - 1)
    assert-string-slice(
            user expected-output,
            user mock-output-file-text,
            copy common-header-length,
            copy code-length,
            copy is-main)


func test-code-error(user String input-text, user String expected-error)
    test-code-setup(user input-text)
    assert try-write-syntax-tree(copy ' ')
    Sys.print.active := false
    test-error-message(user "Code error in mock.5.lm[", user expected-error)


func run-illegal-usage()
    setup-test()
    Sys.print.active := true
    assert-error tl5-compiler.glob.root.parse(), "Sys.exit"
    Sys.print.active := false
    assert-string-slice(
            user "usage: tl5-compiler [-t|-l MODULE] OUTPUT-C-FILE-NAME \
            INPUT-TL5-FILES...\n",
            user mock-print-text,
            copy 0,
            copy mock-print-text.length,
            copy false)


test test-illegal-usage()
    mock-argv.length := 2
    run-illegal-usage()

    mock-argv.length := 4
    mock-argv[1].new(user "-t")
    run-illegal-usage()


test test-open-file-fail()
    setup-test()
    mock-argv.length := 3
    mock-argv[0].new(user "tl5-compiler")
    mock-argv[1].new(user "mock.c")
    mock-argv[2].new(user "mock.5.lm")
    mock-argv.length := 3
    tl5-compiler.glob.root.mainless := true
    
    file-open-error := true
    Sys.print.active := true
    assert-error tl5-compiler.glob.root.parse(), "Sys.exit"
    Sys.print.active := false
    assert-string-slice(
            user "could not read file \"mock.5.lm\"\n",
            user mock-print-text,
            copy 0,
            copy mock-print-text.length,
            copy false)
    
    mock-print-text.clear()
    Sys.print.active := true
    assert-error tl5-compiler.glob.root.write(), "Sys.exit"
    Sys.print.active := false
    assert-string-slice(
            user "could not write file \"mock.c\"\n",
            user mock-print-text,
            copy 0,
            copy mock-print-text.length,
            copy false)


func test-analyze-error(user String expected-error)
    Sys.print.active := true
    assert-error tl5-compiler.glob.root.analyze(), "Sys.exit"
    Sys.print.active := false
    assert-string-slice(
            user expected-error,
            user mock-print-text,
            copy 0,
            copy mock-print-text.length,
            copy false)


func test-no-run-func(copy Bool testing, user String expected-error)
    setup-test()
    tl5-compiler.glob.root.mainless := false
    if testing
        tl5-compiler.glob.ut-generation := true
        tl5-compiler.string-new-copy(user "ut")->(
                owner tl5-compiler.glob.main-module)
    test-analyze-error(user expected-error)

test test-no-main()
    test-no-run-func(
            copy false, user "General code error: no main function\n")

test test-no-test-func()
    test-no-run-func(
            copy true, user "General code error: no test functions\n")


func test-cover-error(copy Bool has-module, user String expected-error)
    setup-test()
    tl5-compiler.glob.root.mainless := true
    tl5-compiler.string-new-copy(user "error")->(
            owner tl5-compiler.glob.main-module)
    tl5-compiler.glob.test-functions.add(user _, user _)
    var tl5-compiler.ModuleMembers dummy-module(user _)
    if has-module
        tl5-compiler.glob.module-map.add(
                user tl5-compiler.glob.main-module, user dummy-module)
    tl5-compiler.glob.root.line-counts := Array{1:tl5-compiler.LineCount}()
    test-analyze-error(user expected-error)

test test-unknown-test-module()
    test-cover-error(
            copy false,
            user "General code error: unknown tested module \"error\"\n")

test test-no-code-to-test()
    test-cover-error(
            copy true,
            user "General code error: no code to test under module \"error\"\n")
