~~~ TL5 compiler - Syntax tree code nodes ~~~
module tl5-compiler

~~~ Expression node in the syntax tree ~~~
class SyntaxTreeExpression(SyntaxTreeCode)
    var ExpressionValue expression
    
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner SyntaxTreeExpression new-node)
        new-node := SyntaxTreeExpression(user parent)
        new-node.parse()
    
    func inst parse()
        self.expression.new(user "", user self, user self)
    
    func dynamic analyze()
        self.expression.is-statement := true
        self.expression.analyze()
        if self.expression.result-type.type-data is-not
                glob.type-void-expression
            self.syntax-error-msg(user "statement has no effect")

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.expression.check-memory(user refs)
    
    func dynamic write()
        self.write-spaces()
        self.expression.write-preactions()
        self.expression.write()


~~~ Return statement in the syntax tree ~~~
class SyntaxTreeReturn(SyntaxTreeCode)
    func dynamic is-end-point()->(var Bool is-end)
        is-end := true

    func dynamic check-memory(user ReferenceMemoryList refs)
        user SyntaxTreeFunction function
        self.get-function()->(user function)
        function.check-outputs-memory(user refs)
        if function.is-constructor()
            function.check-field-initialized(user refs)
    
    func dynamic analyze()
        self.set-loop-finite(copy true)
    
    func dynamic write()
        self.write-spaces()
        self.write-loop-jump(copy 0)
        write(user "\n")


~~~ Raise statement in the syntax tree ~~~
class SyntaxTreeRaise(SyntaxTreeCode)
    var ExpressionValue error-message
    
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner SyntaxTreeRaise new-node)
        new-node := SyntaxTreeRaise(user parent)
        new-node.parse()
    
    func inst parse()
        if glob.last-char = ' '
            self.error-message.new(user "", user self, user self)
    
    func dynamic is-end-point()->(var Bool is-end)
        is-end := true
    
    func dynamic analyze()
        if self.set-has-error()
            self.check-function-has-error()
        if self.error-message.parsed()
            owner TypeInstance type-buffer(
                    owner glob.type-instance-buffer.copy-new())
            type-buffer.conditional := true
            self.error-message.analyze()
            type-buffer.check-assign-from(copy Access.USER, user self)->(
                    owner self.error-message.expression)
            self.error-message.check-errors(copy false, copy true)

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.error-message.check-memory(user refs)
    
    func dynamic write()
        self.write-spaces()
        if self.error-message.parsed()
            self.error-message.write-preactions()
        write(user "USER_RAISE(")
        self.write-line-num()
        write(user ", ")
        self.parent.write-cleanup-label()
        write(user ", ")
        if self.error-message.parsed()
            self.error-message.write()
            write(user ", ")
            self.error-message.expression.write-length(
                    user "_Length", user "0", copy true)
        else
            write(user "NULL, 0")
        write(user ")\n")


~~~ While statement in the syntax tree ~~~
class SyntaxTreeWhile(SyntaxTreeCode)
    var ExpressionValue condition
    
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner SyntaxTreeWhile new-node)
        new-node := SyntaxTreeWhile(user parent)
        new-node.parse()
    
    func inst parse()
        if self.parent.loop-depth = 0
            self.syntax-error-msg(user "\"while\" used not inside loop")
        self.condition.new(user "", user self, user self)
    
    func dynamic analyze()
        self.analyze-expression(user self.condition, user glob.type-bool)
        self.condition.check-no-error()
        self.set-loop-finite(copy false)

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.condition.check-memory(user refs)
    
    func dynamic write()
        ; if (!(`condition`) break;
        self.write-spaces()
        self.condition.write-preactions()
        write(user "if (!(")
        self.condition.write()
        write(user ")) { ")
        self.write-loop-diff-jump(copy 1)
        write(user " }\n")


~~~ Break statement in the syntax tree ~~~
class SyntaxTreeBreak(SyntaxTreeCode)
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner SyntaxTreeBreak new-node)
        new-node := SyntaxTreeBreak(user parent)
        new-node.parse()
    
    func inst parse()
        if self.parent.loop-depth = 0
            self.syntax-error-msg(user "\"break\" used not inside loop")
        
    func dynamic analyze()
        self.set-loop-finite(copy false)
    
    func dynamic write()
        self.write-spaces()
        self.write-loop-diff-jump(copy 1)
        write(user "\n")


~~~ Continue statement in the syntax tree ~~~
class SyntaxTreeContinue(SyntaxTreeCode)
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner SyntaxTreeContinue new-node)
        new-node := SyntaxTreeContinue(user parent)
        new-node.parse()
    
    func inst parse()
        if self.parent.loop-depth = 0
            self.syntax-error-msg(user "\"continue\" used not inside loop")
    
    func dynamic write()
        self.write-spaces()
        self.write-loop-diff-jump(copy 0)
        write(user "\n")


class SyntaxTreeCoverage(SyntaxTreeCode)
    var Int input-file-index
    
    new(user SyntaxTreeBlock parent)
        base(user parent)
        self.input-file-index := glob.input-file-index
    
    func dynamic analyze()
        if self.get-function() is glob.root.main-function
            return
        user LineCount line-count(
                user glob.root.line-counts[self.input-file-index])
        line-count.needs-cover := true
        line-count.line-needs-cover[self.line-number] := true
    
    func dynamic write()
        ; ++LUMI_file_coverage[`covered-index`].line_count[`line-number`];
        self.write-spaces()
        write(user "++LUMI_file_coverage[")
        write-int(
                copy glob.root.line-counts[self.input-file-index].covered-index)
        write(user "].line_count[")
        write-int(copy self.line-number)
        write(user "];\n")
