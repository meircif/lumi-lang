~~~ TL5 compiler - Syntax tree native nodes ~~~
module tl5-compiler


struct NativeText
    owner String text
    
    new(user String text)
        string-new-copy(user text)->(owner self.text)

    func parse-new(user SyntaxTreeNode node)->(owner NativeText native-text)
        owner String text
        read-new(user "")->(owner text)
        node.check-string(user text)
        native-text := NativeText(user text[1:text.length - 2])
    
    func write(user String name)
        if self?
            write(user self.text)
        else
            write-cname(user name)


~~~ Native include declaration in the syntax tree ~~~
class NativeInclude(SyntaxTreeNode)
    owner NativeText path

    func inst parse-new()->(owner NativeInclude new-node)
        new-node := NativeInclude()
        new-node.parse()
    
    func inst parse()
        self.set-location()
        NativeText.parse-new(user _, user self)->(owner self.path)
    
    func dynamic write()
        write(user "\n#include <")
        self.path.write(user _)
        write(user ">\n")


~~~ Native export function declaration in the syntax tree ~~~
class NativeExport(SyntaxTreeFunction)
    owner TypeInstance return-type
    owner NativeText cname
    
    func inst parse-new()->(owner NativeExport new-node)
        new-node := NativeExport()
        new-node.parse()
        new-node.parse-body()
    
    func inst parse()
        self.return-type := TypeInstance()
        self.return-type.parse(
                user " (", user self, user _, copy INDENTATION-SPACES)
        if glob.last-char = '('
            glob.save-input := true
            self.return-type := _
        else
            self.expect-space(user "return type")
        self.parse-header(copy true)
        if glob.last-char = ' '
            NativeText.parse-new(user _, user self)->(owner self.cname)
        if self.arguments.has-error
            self.syntax-error-msg(user "error raising native function")
        if self.arguments.outputs.first?
            self.syntax-error-msg(user "output arguments to native function")
        glob.current-module.function-map.add(user self.name, user self)
    
    func dynamic analyze()
        if self.return-type?
            self.return-type.analyze(user self)
            new DeclarationArgument output
            output.parent-node := self
            output.is-output := true
            output.is-native := true
            if self.return-type.type-data.is-primitive
                output.access := Access.COPY
            else
                output.access := Access.USER
            output.variable := SyntaxTreeVariable(user _)
            output.variable.access := output.access
            output.variable.is-output := output.is-output
            output.variable.type-instance := self.return-type
            string-new-copy(user "native-return")->(owner output.variable.name)
            self.arguments.outputs.add(owner output)
        base()
    
    func dynamic write-declaration()
        self.write-declaration-header(
                copy self.module.name.equal(user glob.main-module))
    
    func dynamic write-cname()
        self.cname.write(user self.name)


~~~ Native function declaration in the syntax tree ~~~
class NativeFunction(NativeExport)
    func inst parse-new()->(owner NativeFunction new-node)
        new-node := NativeFunction()
        new-node.parse()
    
    func dynamic check-memory(user ReferenceMemoryList global-refs)
        ; do nothing
    
    func dynamic write-declaration()
        ; do nothing
    
    func dynamic write()
        ; do nothing


~~~ Native variable declaration in the syntax tree ~~~
class NativeVariable(SyntaxTreeVariable)
    owner NativeText cname
    
    func inst parse-new(user NativeType parent-type)->(
            owner NativeVariable new-node)
        new-node := NativeVariable(user _)
        new-node.parse-native(user parent-type)
    
    func inst parse-native(user NativeType parent-type)
        self.is-native := true
        self.parse(copy Access.VAR, copy false, user parent-type)
        if glob.last-char = ' '
            NativeText.parse-new(user _, user self)->(owner self.cname)
    
    func dynamic analyze()
        if not self.type-instance.type-data.is-primitive
            self.syntax-error(
                    user "only primitive types supported for native variable, \
                    got",
                    user self.type-instance.type-data.name)
        base()
    
    func dynamic write()
        ; do nothing
    
    func dynamic write-cname()
        self.cname.write(user self.name)


~~~ Native constant declaration in the syntax tree ~~~
class NativeConstant(SyntaxTreeConstant)
    owner NativeText cname
    
    func inst parse-new()->(owner NativeConstant new-node)
        new-node := NativeConstant(user _)
        new-node.parse-native()
    
    func inst parse-native()
        self.is-native := true
        self.parse()
        if glob.last-char = ' '
            NativeText.parse-new(user _, user self)->(owner self.cname)
        self.is-ordered := true

    func dynamic analyze()
        if self.is-analyzed
            return
        self.is-analyzed := true
        self.type-instance.analyze-after-link(user self, copy true)
        if not self.type-instance.type-data.is-int-like
            self.syntax-error(
                    user "Only numeric typed native constant supported, got",
                    user self.type-instance.name)

    func dynamic write()
        ; do nothing
    
    func dynamic write-cname()
        self.cname.write(user self.name)


~~~ Native type declaration in the syntax tree ~~~
class NativeType(TypeData)
    owner NativeText cname

    new()
        self.set-location()
        self.is-primitive := true
        self.is-native := true
    
    func inst parse-new()->(owner NativeType new-node)
        new-node := NativeType()
        new-node.parse()
    
    func inst parse()
        read-new(user " ")->(owner self.name)
        if glob.last-char = ' '
            NativeText.parse-new(user _, user self)->(owner self.cname)
        self.add-type(user glob.current-module)
    
    func dynamic analyze()
        ; do nothing
    
    func dynamic write-declaration()
        ; do nothing
    
    func dynamic write-methods-declaration()
        ; do nothing
    
    func dynamic write-methods-body()
        ; do nothing
        
    func dynamic write-global()
        ; do nothing
    
    func dynamic write()
        ; do nothing
    
    func dynamic write-cname()
        self.cname.write(user self.name)


~~~ Native struct declaration in the syntax tree ~~~
class NativeStruct(NativeType)
    func inst parse-new()->(owner NativeStruct new-node)
        new-node := NativeStruct()
        new-node.parse()
    
    func inst parse()
        base()
        self.parse-body()

    func dynamic parse-if-common(
            user String keyword,
            user TypeData parent-type,
            user SyntaxTreeBlock parent-block)->(
            var Bool is-parsed)
        keyword.equal(user glob.access-names[Access.VAR])->(var is-parsed)
        if is-parsed
            self.variables.add(
                    owner NativeVariable.parse-new(user _, user self))
    
    func dynamic parse-child(user String keyword)
        self.syntax-error(user "unknown keyword", user keyword)
    
    func dynamic analyze()
        self.analyze-children(user self.variables)


~~~ Native code declaration in the syntax tree ~~~
class NativeCode(SyntaxTreeCode)
    owner NativeText code
    
    func inst parse-new(user SyntaxTreeBlock parent)->(
            owner NativeCode new-node)
        new-node := NativeCode(user parent)
        NativeText.parse-new(user _, user new-node)->(owner new-node.code)
    
    func dynamic write()
        if self.parent?
            self.write-spaces()
        else
            write(user "\n")
        self.code.write(user _)
        write(user "\n")
