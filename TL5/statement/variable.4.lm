~~~ TL5 compiler - Syntax tree variable ~~~
module tl5-compiler

~~~ Variable node in the syntax tree ~~~
class SyntaxTreeVariable(SyntaxTreeCode)
    owner String name
    var Int access
    owner TypeInstance type-instance
    user TypeData parent-type
    var Bool constant
    var Bool is-output
    var Bool is-create
    var Bool is-native
    var Bool is-aux
    var Bool is-initialized
    var Bool is-analyzed
    var Bool not-declared-yet
    
    func inst parse-new(
            copy Int access,
            copy Bool is-create,
            user TypeData parent-type,
            user SyntaxTreeBlock parent-block)->(
            owner SyntaxTreeVariable new-node)
        new-node := SyntaxTreeVariable(user parent-block)
        new-node.parse(
                copy access,
                copy is-create,
                user parent-type)
    
    func inst parse(
            copy Int access,
            copy Bool is-create,
            user TypeData parent-type)
        self.set-location()
        self.parent-type := parent-type
        self.access := access
        self.is-create := is-create
        if self.parent-type?
            if self.parent-type.is-only-dynamic()
                self.syntax-error-msg(
                        user "fileds inside dynamics not supported yet")
        self.type-instance := TypeInstance()
        self.type-instance.parse(
                user " ", user self, user self, copy INDENTATION-SPACES)
        self.expect-space(user "type")
        read-new(user "!( ")->(owner self.name)
        if glob.last-char = ' ' and not self.is-native
            self.syntax-error-msg(user "unexpected space after variable name")
        self.check-name()
        if glob.last-char = '(' and self.parent-type?
            self.syntax-error-msg(user "type members cannot be initialized")
        if not self.parent? and not self.parent-type?
            self.parent := glob.root.global-init
            self.module.variable-map.add(user self.name, user self)
        if self.parent?
            self.is-initialized := glob.last-char = '(' or self.is-create
            if self.is-initialized
                VariableInit.parse-new(user _, user self)
            else-if glob.last-char = '!'
                self.syntax-error-msg(
                        user "using \"!\" where there is no error")
            else-if self.parent is-not glob.root.global-init
                self.parent.code-nodes.add(owner VariableCreate(user self))
        else-if glob.last-char = '!'
            self.syntax-error(user "unexpected \"!\" after", user self.name)
        if self.parent is glob.root.global-init
            self.parent := _
        if self.parent?
            self.not-declared-yet := true
    
    func inst check-name()
        if not is-legal-name(user self.name, copy NameGroup.DEFAULT)
            self.syntax-error(user "illegal variable name", user self.name)
        if self.parent-type?
            user SyntaxTreeVariable field
            self.parent-type.find-field(user self.name)->(user field)
            if field?
                self.syntax-error(user "redefinition of field", user self.name)
            user SyntaxTreeFunction meth
            self.parent-type.find-meth(user self.name)->(user meth)
            if meth?
                self.syntax-error(
                        user "field name overrides method", user self.name)
        else
            if glob.module-map.find(user self.name)?
                self.syntax-error(
                        user "variable name overrides module", user self.name)
            if self.find-variable(user self.name, user _)?
                self.syntax-error(
                        user "redefinition of variable", user self.name)
            if self.find-function(user self.name, user _)?
                self.syntax-error(
                        user "variable name overrides function", user self.name)
    
    func dynamic get-parent-type()->(user TypeData parent-type)
        if self.parent-type?
            parent-type := self.parent-type
        else-if self.parent?
            base()->(user parent-type)
        else
            parent-type := _
    
    func inst get-if-equal(user String name)->(user SyntaxTreeVariable variable)
        if self.name.equal(user name)
            variable := self
        else
            variable := _
    
    func dynamic link-types()
        self.type-instance.link-types(user self)
    
    func dynamic analyze()
        if self.is-analyzed
            return
        self.is-analyzed := true
        if self.type-instance.type-data.is-primitive and
                self.access != Access.VAR
            self.syntax-error(
                    user "only \"var\" access is supported for primitive \
                    types, got",
                    user glob.access-names[self.access])
        if not self.parent?
            self.type-instance.analyze-after-link(
                    user self, copy access-is-only-var(copy self.access))
        if self.is-create and self.type-instance.type-data is glob.type-generic
            self.syntax-error(
                    user "declared variable with generic subtype",
                    user self.type-instance.name)
        if access-is-only-var(copy self.access)
            self.type-instance.check-sequence(user self)
            if self.type-instance.type-data.is-only-dynamic()
                self.syntax-error(
                        user "cannot create variable from type without \
                        structure",
                        user self.type-instance.type-data.name)
        if not self.parent? and not self.parent-type?
            if self.access = Access.USER or self.access = Access.TEMP
                self.syntax-error(
                        user "global variables cannot have access",
                        user glob.access-names[self.access])
            if not self.type-instance.type-data.is-primitive and
                    not self.type-instance.conditional and
                    not self.is-initialized
                self.syntax-error-msg(
                        user "non-conditional global variable not initialized")
        if self.parent-type?
            if self.access = Access.USER or self.access = Access.TEMP
                self.syntax-error(
                        user "fields cannot have access",
                        user glob.access-names[self.access])
            if not self.parent-type.constructor?
                if self.type-instance.is-non-zero-integer()
                    self.syntax-error(
                            user "non-zero integer in type without \
                            constructor",
                            user self.parent-type.name)
                else-if access-is-only-var(copy self.access)
                    if self.type-instance.type-data.constructor?
                        self.syntax-error(
                                user "variable with constructor in type \
                                without constructor",
                                user self.parent-type.name)
                else-if not self.type-instance.conditional
                    self.syntax-error(
                            user "non-conditional reference in type without \
                            constructor",
                            user self.parent-type.name)

    func dynamic check-memory(user ReferenceMemoryList refs)
        refs.add(user self)
    
    func dynamic write-cname()
        if not self.parent? and not self.parent-type?
            self.module.write-prefix()
        write-cname(user self.name)
    
    func dynamic write()
        if self.parent? or self.parent-type?
            self.write-spaces()
        else-if not self.is-native
            write(user "\n")
        
        if self.type-instance.type-data.is-sequence()
            self.write-sequence()
            return
        
        if not self.type-instance.type-data.is-primitive and
                access-is-only-var(copy self.access) and not self.parent-type?
            self.write-var()
        
        ; `type` `name`[ = 0];
        ; `type|void`* `name`[ = NULL];
        ; Ref_Manager* `name`_Refman[ = NULL];
        if self.type-instance.type-data is glob.type-func
            self.type-instance.arguments.write-pointer(user self.name)
        else
            if self.type-instance.type-data.is-only-dynamic()
                write(user "void*")
            else
                self.type-instance.write-cname()
                if not self.type-instance.type-data.is-primitive and
                        not (self.parent-type? and
                        access-is-only-var(copy self.access))
                    write(user "*")
            write(user " ")
            self.write-cname()
        
        if not self.parent-type? and not self.is-native
            if self.type-instance.type-data.is-native
                if self.type-instance.type-data.variables.first?
                    write(user " = {0}")
            else-if self.type-instance.type-data.is-ref()
                write(user " = NULL")
            else
                write(user " = 0")
        
        write(user ";\n")
        
        if access-has-refman(copy self.access)
            self.write-refman()
        
        if self.type-instance.type-data.is-dynamic and
                not (self.parent-type? and access-is-only-var(copy self.access))
            self.write-dynamic()
    
    func inst write-sequence()
        var Bool is-new-or-aux-var(
                copy access-is-only-var(copy self.access) and self.is-create)
        var Bool is-new-var(copy is-new-or-aux-var and not self.is-aux)
        user TypeInstance data-type
        var Int sequence-depth
        self.type-instance.get-array-data-type-depth()->(
                user data-type, var sequence-depth)
        
        self.write-sequence-var(
                copy is-new-var, user data-type, copy sequence-depth)
                
        if not is-new-var
            self.write-sequence-lengths(copy sequence-depth)
        
        if data-type.type-data.is-buffered()
            self.write-sequence-sub-lengths(
                    copy is-new-or-aux-var, copy sequence-depth)
            
        if access-has-refman(copy self.access)
            self.write-refman()
    
    func inst write-sequence-var(
            copy Bool is-new-var,
            user TypeInstance data-type,
            copy Int sequence-depth)
        ; `data-type` `name`[`full-length`][ = {0}];
        ; `data-type`* `name`[ = NULL];
        ; [void|Return_Code] (*`name`[`full-length`])(`arguments`)[ = {0}];
        ; [void|Return_Code] (**`name`)(`arguments`)[ = NULL];
        if data-type.type-data is glob.type-string
            write(user "Char")
        else-if data-type.type-data is glob.type-buffer
            write(user "Byte")
        else-if data-type.type-data is glob.type-func
            data-type.arguments.write-pointer-start()
        else
            data-type.write-cname()
        if not is-new-var
            write(user "*")
        if data-type.type-data is-not glob.type-func
            write(user " ")
        self.write-cname()
        if is-new-var
            write(user "[")
            user TypeInstance sequence-type(user self.type-instance)
            sequence-type.length.write()
            for _ in sequence-depth
                sequence-type := sequence-type.parameters.first.item
                write(user " * ")
                sequence-type.length.write()
            write(user "]")
        if data-type.type-data is glob.type-func
            write(user ")")
            data-type.arguments.write()
        if not self.parent-type?
            write(user " = ")
            if is-new-var
                write(user "{0}")
            else
                write(user "NULL")
        write(user ";\n")

    func inst write-sequence-lengths(copy Int sequence-depth)
        user TypeInstance type-instance(user self.type-instance)
        if not type-instance.length.get-constant-value()? or
                self.type-instance.type-data is-not glob.type-array
            ; Seq_Length[*] `name`_Length[ = 0|NULL];
            ; Seq_Length `name`_Max_length[ = 0];
            self.write-spaces()
            write(user "Seq_Length")
            write(user " ")
            self.write-cname()
            write(user "_")
            if self.type-instance.type-data.is-buffered()
                write(user "Max_length")
            else
                write(user "Length")
            if not self.parent-type?
                write(user " = 0")
            write(user ";\n")
    
        ; Seq_Length `name`_Value[_value*]_length[ = 0]; ...*
        for depth in sequence-depth
            type-instance := type-instance.parameters.first.item
            if not type-instance.length.get-constant-value()?
                self.write-spaces()
                write(user "Seq_Length ")
                self.write-cname()
                write-array-value-length(copy depth)
                if not self.parent-type?
                    write(user " = 0")
                write(user ";\n")
    
    func inst write-sequence-sub-lengths(
            copy Bool is-new-or-aux-var, copy Int sequence-depth)
        ; Seq_Length `name`_Length[1][ = {0}];
        ; Seq_Length* `name`_Length[ = &Lumi_empty_length];
        ; Seq_Length `name`_Seq_length[`strings`][ = {0}];
        ; Seq_Length* `name`_Seq_length[ = NULL];
        self.write-spaces()
        write(user "Seq_Length")
        if not is-new-or-aux-var
            write(user "*")
        write(user " ")
        self.write-cname()
        if sequence-depth > 0
            write(user "_Seq_length")
        else
            write(user "_Length")
        if is-new-or-aux-var
            write(user "[")
            if sequence-depth > 0
                user TypeInstance sequence-type(user self.type-instance)
                sequence-type.length.write()
                for _ in sequence-depth - 1
                    sequence-type := sequence-type.parameters.first.item
                    write(user " * ")
                    sequence-type.length.write()
            else
                write(user "1")
            write(user "]")
        if not self.parent-type?
            write(user " = ")
            if is-new-or-aux-var
                write(user "{0}")
            else-if sequence-depth = 0
                write(user "&Lumi_empty_length")
            else
                write(user "NULL")
        write(user ";\n")
    
    func inst write-var()
        ; `type` `name`_Var = {...};
        self.type-instance.write-cname()
        write(user " ")
        self.write-cname()
        write(user "_Var = {")
        var Int bases
        user TypeData type-data(user self.type-instance.type-data)
        do
            if type-data.base-type?
                type-data := type-data.base-type.type-data
            else
                user SyntaxTreeVariable variable(
                        user type-data.variables.first.item)
                if access-is-only-var(copy variable.access) and
                        not variable.type-instance.type-data.is-primitive
                    type-data := variable.type-instance.type-data
                else
                    break
            bases += 1
            write(user "{")
        write(user "0")
        for n in bases
            write(user "}")
        write(user "};\n")
        self.write-spaces()
    
    func inst write-refman()
        self.write-spaces()
        write(user "Ref_Manager*")
        write(user " ")
        self.write-cname()
        write(user "_Refman")
        if not self.parent-type?
            write(user " = NULL")
        write(user ";\n")
    
    func inst write-dynamic()
        ; `type`[_Dynamic]* `name`_Dynamic[ = `type`_dynamic];
        self.write-spaces()
        self.type-instance.write-cname()
        if self.type-instance.type-data.is-struct
            write(user "_Dynamic")
        write(user "* ")
        self.write-cname()
        write(user "_Dynamic")
        if not self.parent-type?
            write(user " = ")
            if self.is-create
                write(user "&")
                self.type-instance.write-cname()
                write(user "_dynamic")
            else
                write(user "NULL")
        write(user ";\n")
    
    func inst write-spaces()
        if self.parent?
            base()
        else-if self.parent-type?
            self.parent-type.write-spaces()


class VariableCreate(SyntaxTreeCode)
    user SyntaxTreeVariable variable
    
    new(user SyntaxTreeVariable variable)
        self.variable := variable
        base(user variable.parent)
    
    func dynamic analyze()
        self.variable.type-instance.analyze-after-link(
                user self, copy access-is-only-var(copy self.variable.access))
        self.variable.not-declared-yet := false

    func dynamic check-memory(user ReferenceMemoryList refs)
        var ReferencePath reference-path(user self.variable)
        if self.variable.is-initialized or
                self.variable.type-instance.conditional
            refs.clear-invalid-reference(user reference-path)
    
    func dynamic write()
        ; do nothing


class VariableInit(VariableCreate)
    owner InitExpression expression-init
    
    func inst parse-new(user SyntaxTreeVariable variable)
        new VariableInit new-node(user variable)
        new-node.parse()
        variable.parent.code-nodes.add(owner new-node)
    
    func inst parse()
        self.expression-init := InitExpression(user self)
        self.check-error-mark()
        self.expression-init.parse(
                owner self.variable.type-instance.copy-new(), owner _)
        self.check-error-mark()
        self.expression-init.is-statement := true
        self.expression-init.aux-variable := VariableExpression(
                user self, owner string-new-copy(user self.variable.name))
        self.expression-init.aux-variable.variable := self.variable
        self.variable.type-instance.copy-new()->(
                owner self.expression-init.aux-variable.result-type)
        self.expression-init.aux-variable.access := self.variable.access
        self.expression-init.aux-variable.is-var := self.variable.is-create and
                access-is-only-var(copy self.variable.access)
        self.expression-init.aux-variable.result-type.reference-path :=
                ReferencePath(user self.variable)
            
    func inst check-error-mark()
        if glob.last-char = '!'
            self.expression-init.error-propagated := true
            self.expression-init.error-expected := true
            read-c()
    
    func dynamic find-variable(user String name, user String module-name)->(
            user SyntaxTreeVariable variable)
        if self.parent is glob.root.global-init
            self.module.variable-map.find(user name)->(user variable)
        else
            base(user name, user module-name)->(user variable)
    
    func dynamic analyze()
        base()
        self.expression-init.analyze()
        if not self.expression-init.arguments.parameters.first? and
                (self.variable.type-instance.is-non-zero-integer() or
                self.variable.type-instance.type-data is glob.type-func or
                (self.variable.type-instance.type-data.is-native and
                not self.variable.type-instance.type-data.variables.first?))
            self.variable.is-initialized := false

    func dynamic check-memory(user ReferenceMemoryList refs)
        self.expression-init.check-memory(user refs)
        refs.add(user self.variable)
        base(user refs)
    
    func dynamic write()
        if self.variable.type-instance.type-data.is-primitive and
                not self.expression-init.arguments.parameters.first?
            return
        if self.parent is glob.root.global-init
            write(user "#define LUMI_FILE_NAME ")
            write-string-literal(user self.variable.input-file-name)
            write(user "\n")
        self.expression-init.write()
        if self.parent is glob.root.global-init
            write(user "#undef LUMI_FILE_NAME\n")


class SyntaxTreeConstant(SyntaxTreeVariable)
    var ExpressionValue value
    user Long int-value
    var Bool is-ordered
    var Bool analyzing
    
    func inst parse-new()->(owner SyntaxTreeConstant constant)
        constant := SyntaxTreeConstant(user _)
        constant.parse()
    
    func inst parse()
        self.access := Access.VAR
        self.constant := true
        self.type-instance := TypeInstance()
        self.type-instance.parse(
                user " ", user self, user _, copy INDENTATION-SPACES)
        self.expect-space(user self.type-instance.name)
        read-new(user " ")->(owner self.name)
        if not is-legal-name(user self.name, copy NameGroup.CONSTANT)
            self.syntax-error(user "illegal constant name", user self.name)
        if not self.is-native
            self.expect-space(user self.name)
            self.value.new(user "", user self, user self)
        self.module.variable-map.add(user self.name, user self)
    
    func dynamic link-types()
        self.type-instance.link-types(user self)
    
    func dynamic analyze()
        if self.is-analyzed
            return
        if self.analyzing
            self.syntax-error(
                    user "recursive dependency in constant", user self.name)
        self.analyzing := true
        if not self.type-instance.name.equal(user "Int")
            self.syntax-error(
                    user "Only \"Int\" typed constant supported, got",
                    user self.type-instance.name)
        self.type-instance.analyze-after-link(user self, copy true)
        self.analyze-expression(user self.value, user glob.type-int)
        self.value.check-no-error()
        if not self.value.get-constant-value()->(user self.int-value)?
            self.syntax-error-msg(user "value is not constant")
        self.type-instance.set-int-constant(user self, user self.int-value)
        self.is-analyzed := true
    
    func dynamic order-constants(user NameMap{SyntaxTreeConstant} ordered-list)
        if self.is-ordered
            return
        self.is-ordered := true
        self.value.order-constants(user ordered-list)
        ordered-list.add(user self.name, user self)
    
    func dynamic write()
        if not self.is-ordered
            return
        ; enum { `name` = `value` };
        write(user "\nenum { ")
        self.write-cname()
        write(user " = ")
        write-long(user self.int-value)
        write(user " };\n")
        self.is-ordered := false
