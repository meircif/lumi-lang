~~~ Tests for generic lists ~~~
module list-test


test list-append-test()
    var ds.List{String} list
    list.append(owner String(user "first")!)!
    list.append(owner String(user "second")!)!
    list.append(owner String(user "third")!)!
    var ds.ListIterator{String} iter(user list)
    user String? item
    assert! iter.step()->(user item)!
    assert! item!.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "third")
    assert! not iter.step()->(user item)!


test list-prepend-test()
    var ds.List{String} list
    list.prepend(owner String(user "third")!)!
    list.prepend(owner String(user "second")!)!
    list.prepend(owner String(user "first")!)!
    var ds.ListIterator{String} iter(user list)
    user String? item
    assert! iter.step()->(user item)!
    assert! item!.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "third")
    assert! not iter.step()->(user item)!


test list-mixed-test()
    var ds.List{String} list
    list.prepend(owner String(user "first")!)!
    list.append(owner String(user "second")!)!
    list.prepend(owner String(user "third")!)!
    var ds.ListIterator{String} iter(user list)
    user String? item
    assert! iter.step()->(user item)!
    assert! item!.equal(user "third")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "second")
    assert! not iter.step()->(user item)!


test list-pop-test()
    var ds.List{String} list
    list.append(owner String(user "first")!)!
    list.append(owner String(user "second")!)!
    list.append(owner String(user "third")!)!
    assert! list.pop()!.equal(user "first")
    assert! list.pop()!.equal(user "second")
    assert! list.pop()!.equal(user "third")
    assert-error! list.pop(), "list empty"


test list-is-empty-test()
    var ds.List{String} list
    assert! list.is-empty()
    list.append(owner String(user "first")!)!
    assert! not list.is-empty()
    list.pop()!
    assert! list.is-empty()


test list-iter-test()
    var ds.List{String} list
    list.append(owner String(user "first")!)!
    list.append(owner String(user "second")!)!
    list.append(owner String(user "third")!)!
    owner ds.ListIterator{String} iter
    iter := list.iter()!
    user String? item
    assert! iter.step()->(user item)!
    assert! item!.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.equal(user "third")
    assert! not iter.step()->(user item)!


test list-empty-iter-test()
    var ds.List{String} empty-list
    var ds.ListIterator{String} iter(user empty-list)
    user String? item
    assert! not iter.step()->(user item)!
    assert! not iter.step()->(user item)!
