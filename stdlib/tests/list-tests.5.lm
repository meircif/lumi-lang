~~~ Tests for generic lists ~~~
module list-test


struct StringBox
    owner String value

    new!(user Array{Char} chars)
        new String{chars.length + 1} value(user chars)!
        self.value := value


test list-append-test()
    var ds.List{StringBox} list
    list.append(owner StringBox(user "first")!)!
    list.append(owner StringBox(user "second")!)!
    list.append(owner StringBox(user "third")!)!
    var ds.ListIterator{StringBox} iter(user list)
    user StringBox? item
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "third")
    assert! not iter.step()->(user item)!


test list-prepend-test()
    var ds.List{StringBox} list
    list.prepend(owner StringBox(user "third")!)!
    list.prepend(owner StringBox(user "second")!)!
    list.prepend(owner StringBox(user "first")!)!
    var ds.ListIterator{StringBox} iter(user list)
    user StringBox? item
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "third")
    assert! not iter.step()->(user item)!


test list-mixed-test()
    var ds.List{StringBox} list
    list.prepend(owner StringBox(user "first")!)!
    list.append(owner StringBox(user "second")!)!
    list.prepend(owner StringBox(user "third")!)!
    var ds.ListIterator{StringBox} iter(user list)
    user StringBox? item
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "third")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "second")
    assert! not iter.step()->(user item)!


test list-pop-test()
    var ds.List{StringBox} list
    list.append(owner StringBox(user "first")!)!
    list.append(owner StringBox(user "second")!)!
    list.append(owner StringBox(user "third")!)!
    assert! list.pop()!.value.equal(user "first")
    assert! list.pop()!.value.equal(user "second")
    assert! list.pop()!.value.equal(user "third")
    assert-error! list.pop(), "list empty"


test list-is-empty-test()
    var ds.List{StringBox} list
    assert! list.is-empty()
    list.append(owner StringBox(user "first")!)!
    assert! not list.is-empty()
    list.pop()!
    assert! list.is-empty()


test list-iter-test()
    var ds.List{StringBox} list
    list.append(owner StringBox(user "first")!)!
    list.append(owner StringBox(user "second")!)!
    list.append(owner StringBox(user "third")!)!
    owner ds.ListIterator{StringBox} iter
    iter := list.iter()!
    user StringBox? item
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "first")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "second")
    assert! iter.step()->(user item)!
    assert! item!.value.equal(user "third")
    assert! not iter.step()->(user item)!


test list-empty-iter-test()
    var ds.List{StringBox} empty-list
    var ds.ListIterator{StringBox} iter(user empty-list)
    user StringBox? item
    assert! not iter.step()->(user item)!
    assert! not iter.step()->(user item)!
