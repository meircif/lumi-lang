~~~ Tests for math functions ~~~
module math-tests

test abs-test()
    assert! math.abs(copy 234) = 234
    assert! math.abs(copy 0) = 0
    assert! math.abs(copy -1) = 1
    assert! math.abs(copy -573) = 573


test copysign-test()
    assert! math.copysign(copy 234, copy 480) = 234
    assert! math.copysign(copy 234, copy - 34) = -234
    assert! math.copysign(copy -234, copy 657) = 234
    assert! math.copysign(copy -234, copy - 6) = -234
    assert! math.copysign(copy 0, copy 12) = 0
    assert! math.copysign(copy 0, copy -34) = 0
    assert! math.copysign(copy 234, copy 0) = 234
    assert! math.copysign(copy -234, copy 0) = -234
    assert! math.copysign(copy 0, copy 0) = 0


test power-test()
    assert! math.power(copy 2, copy 6) = 64
    assert! math.power(copy -2, copy 6) = 64
    assert! math.power(copy -2, copy 5) = -32
    assert! math.power(copy 5, copy 3) = 125
    assert! math.power(copy 5, copy 0) = 1
    assert! math.power(copy -5, copy 0) = 1
    assert! math.power(copy 0, copy 0) = 1
    assert! math.power(copy 0, copy 1) = 0
    assert! math.power(copy 0, copy 3) = 0


test factorial-test()
    assert! math.factorial(copy 0) = 1
    assert! math.factorial(copy 1) = 1
    assert! math.factorial(copy 2) = 2
    assert! math.factorial(copy 3) = 6
    assert! math.factorial(copy 4) = 24
    assert! math.factorial(copy 6) = 720


test sum-test()
    s-var Array{4:Sint64} array!
    var MockIntIterator iter(weak array)!
    array[0] := 3
    array[1] := 0
    array[2] := -1
    array[3] := 34
    assert! math.sum(user iter) = 36
    user Sint64? item
    iter.new(weak array)!
    iter.step()->(user item)!
    iter.step()->(user item)!
    assert! math.sum(user iter) = 33
    assert! math.sum(user iter) = 0

class MockIntIterator(math.IntIterator)
    weak Array{Sint64} array
    var Int index
    owner Sint64 value

    new!(weak Array{Sint64} array)
        self.array := array
        self.index := 0
        self.value := Sint64()!
    
    func dynamic user step()->(
            user Sint64? item, var Bool has-another-item)
        item := _
        if-error self.value.value := self.array[self.index]
            has-another-item := false
        else
            has-another-item := true
            self.index clamp+= 1
            item := self.value


class FailIterator(math.IntIterator)
    func dynamic user? step()->(user Sint64? value, var Bool has)
        value := _
        has := true

test abstract-methods()
    user Sint64? item
    assert! not math.IntIterator.step(user _)->(user item)
    var FailIterator fail-iter
    assert! math.sum(user fail-iter) = 0
