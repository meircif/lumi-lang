module time


native include "time.h"

native type CtimeT "time_t"

native const Uint64 CLOCKS-PER-SEC

native func Uint64 c-clock() "clock"

native func CtimeT c-time(copy cdef.Pointer{CtimeT} timer) "time"

native func cdef.Pointer{cdef.Char} c-ctime(
        copy cdef.Pointer{CtimeT} timer) "ctime"

native func Sint64 c-difftime(copy CtimeT time1, copy CtimeT time2) "difftime"

native func cdef.Pointer{cdef.Char} c-asctime(user Time timeptr) "asctime"

native func CtimeT c-mktime(user Time timeptr) "mktime"

native func cdef.Size c-strftime(
        user String target,
        copy cdef.Size maxsize,
        user String format,
        user Time timeptr) "strftime"

native func Time? c-gmtime(copy cdef.Pointer{CtimeT} timer) "gmtime"

native func Time? c-localtime(copy cdef.Pointer{CtimeT} timer) "localtime"


struct Timer
    var CtimeT c-timer
    
    func user time()
        var cdef.Pointer{CtimeT} null
        self.c-timer := c-time(copy null)
    
    func user mktime(user Time tm)
        self.c-timer := c-mktime(user tm)
      
    func user c-pointer()->(var cdef.Pointer{CtimeT} timer-pointer)
        timer-pointer.set-point-to(var self.c-timer)

    func user ! ctime(user String target)
        cdef.copy-to-string(copy c-ctime(copy self.c-pointer()), user target)!
    
    func user gmtime()->(user Time? new-time)
        new-time := c-gmtime(copy self.c-pointer())
    
    func user localtime()->(user Time? new-time)
        new-time := c-localtime(copy self.c-pointer())


struct Time
    var cdef.Int sec
    var cdef.Int min
    var cdef.Int hour
    var cdef.Int mday
    var cdef.Int mon
    var cdef.Int year
    var cdef.Int wday
    var cdef.Int yday
    var cdef.Int isdst
    
    func user ! asctime(user String target)
        cdef.copy-to-string(copy c-asctime(user self), user target)!
    
    func user strftime(user String target, user String format)->(
            var Uint32 copied)
        var Ref timeptr(copy self)
        copied := clamp c-strftime(
                user target,
                copy target.max-length(),
                user format,
                user self)
        cdef.set-null-term-length(user target)


func clock()->(var Uint64 ticks)
    ticks := c-clock()


func difftime(user Timer timer1, user Timer timer2)->(var Sint64 diff)
    diff := c-difftime(copy timer1.c-timer, copy timer2.c-timer)
