module os

; unistd.h porting for files operations.
; **************************************

native include "unistd.h"


native const Int R-OK
native const Int W-OK
native const Int X-OK
native const Int F-OK


native func Int access(copy cdef.Pointer{cdef.Char} path, copy Int amode)

func exists(user String path)->(var Bool exist)
    exist := access(copy path, copy F-OK) <> -1


; dirent.h porting for directory operations.
; ******************************************

native include "dirent.h"

native type Dir "DIR"

native type Dirent "struct dirent"

native func Int strlen(copy cdef.Pointer{Char} str) "strlen"

native func Int closedir(copy cdef.Pointer{Dir} dir) "closedir"

native func cdef.Pointer{Dir} opendir(
        copy cdef.Pointer{cdef.Char} path) "opendir"

native func cdef.Pointer{Dirent} readdir(copy cdef.Pointer{Dir} dir) "readdir"

native code "
char* get_dname(struct dirent* dir) {
  return dir->d_name;
}"

native func cdef.Pointer{cdef.Char} get-dname(
        copy cdef.Pointer{Dirent} dir) "get_dname"

struct Path
    owner String path-r

    new!(copy Int len)
        self.path-r := String{len + 1}()!

func ! list-dir(user String dir-path)->(owner ds.List?{Path} files)
    var cdef.Pointer{Dir} dir
    var cdef.Pointer{Dirent} ent

    files := ds.List{Path}()!

    dir := opendir(copy dir-path)
    if not dir?
        raise! "path is not dir"
    loop
        var cdef.Pointer{Char} c-string
        ent := readdir(copy dir)
        while ent?
        c-string := get-dname(copy ent)
        new Path path(copy strlen(copy c-string))!
        cdef.copy-to-string(copy c-string, user path.path-r)!
        files!.append(owner path)!

    if closedir(copy dir) <> 0
        raise! "failed to close directory"
