module os

; unistd.h porting for files operations.
; **************************************

native include "unistd.h"


native const Int R-OK
native const Int W-OK
native const Int X-OK
native const Int F-OK


native func Int access(copy cdef.CharP path, copy Int amode)

func exists(user String path)->(var Bool exist)
    var cdef.Pointer pathp(copy path.bytes())
    exist := access(copy pathp, copy F-OK) <> -1


; dirent.h porting for directory operations.
; ******************************************

native include "dirent.h"

native struct Dir "DIR"

native struct Dirent "struct dirent"
    var cdef.CharP d-name

native func Int strlen(copy cdef.Pointer{Char} str)

native func Int closedir(copy cdef.Pointer{Dir} dir)

native func cdef.Pointer{Dir} opendir(copy cdef.CharP path)

native func cdef.Pointer{Dirent} readdir(copy cdef.Pointer{Dir} dir)

struct Path
    var String path-r

    new!(copy cdef.Pointer{Dirent} ent)
        cdef.copy-to-string(copy ent!.d-name, user self.path-r)!
        ; self.path-r := String{len + 1}()!

func ! list-dir(user String dir-path)->(owner ds.List?{Path} files)
    var cdef.Pointer{Dir} dir
    var cdef.Pointer{Dirent} ent

    files := ds.List{Path}()!

    var cdef.Pointer dir-path-p(copy dir-path.bytes())
    dir := opendir(copy dir-path-p)
    if not dir?
        raise! "path is not dir"
    loop
        ent := readdir(copy dir)
        while ent?
        new Path path(copy ent)!
        files!.append(owner path)!

    if closedir(copy dir) <> 0
        raise! "failed to close directory"
