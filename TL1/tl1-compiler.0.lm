# TL1 compiler - written in TL0

native func print(user String text)

native type File
native func file-open-read(out File file, user String name)
native func file-open-write(out File file, user String name)
native func file-close(owner File file)
native func file-getc(out Char ch, user File file)
native func file-putc(user File file, copy Char ch)
native func file-write(user File file, user String line)

native func string-clear(out String this)
native func string-length(out Int length, user String this)
native func string-equal(out Bool equal, user String this, user String other)
native func string-get(out Char ch, user String this, copy Int index)
native func string-append(out String this, copy Char ch)
native func string-replace(user String this, copy Char old, copy Char new)
native func int-to-string(out String str, copy Int value)

native func parse-line(out Bool more-lines, user File infile, user File outfile, copy Int spaces)


func write-csyle-char(user File outfile, copy Char ch, copy Char prev)
  if prev == '\''
    file-putc(user outfile, copy ch)
    return
  
  if ch == 45 and prev != ' '
    file-putc(user outfile, copy '_')
    return
  
  if ch == '.'
    file-write(user outfile, copy "->")
    return
  
  if ch == '=' and prev == ' '
    file-write(user outfile, copy "==")
    return
  
  if ch != ':'
    file-putc(user outfile, copy ch)
  
  return


func write-cstyle(user File outfile, user String text)
  var Int length
  string-length(out length, user text)
  var Int index = 0
  var Char prev = ' '
  
  do
    for index in length
    var Char ch
    string-get(out ch, user text, copy index minus 1)
    write-csyle-char(user outfile, copy ch, copy prev)
    prev := ch
  
  return


func read-name(out Char end, user File infile, out String name, copy Char end1, copy Char end2)
  string-clear(user name)
  var Char ch
  var Char q = '\0'
  do
    file-getc(out ch, user infile)
    if q != '\0'
      if ch == '\\'
        string-append(user name, copy ch)
        file-getc(out ch, user infile)
      
      else
        if ch == q
          q := '\0'
        
        while ch != 0x7f
      
    
    else
      while not (ch == 0x7f or ch == end1 or ch == end2 or ch == '\n')
      if ch == '\'' or ch == '"'
        q := ch
      
    
    string-append(user name, copy ch)
  
  out end := ch
  return


func copy-text(out Char end, user File infile, user File outfile, copy Char end1, copy Char end2)
  var String{80} text
  read-name(user end, user infile, out text, copy end1, copy end2)
  write-cstyle(user outfile, user text)
  return


func real-string-length(out Int length, user String text)
  var Int index = 1
  var Int real-length = 1
  var Int text-length
  string-length(out text-length, user text)
  do
    while index + 1 < text-length
    var Char ch
    string-get(out ch, user text, copy index)
    if ch == '\\'
      index := index + 1
    
    real-length := real-length + 1
    index := index + 1
  
  out length := real-length
  return


func is-primitive(out Bool res, user String typename)
  var Bool equal
  string-equal(out equal, user typename, user "Int")
  if equal
    out res := true
    return
  
  string-equal(out equal, user typename, user "Char")
  if equal
    out res := true
    return
  
  string-equal(out equal, user typename, user "Func")
  if equal
    out res := true
    return
  
  string-equal(out equal, user typename, user "Bool")
  out res := equal
  return


func parse-block-body(user File infile, user File outfile, copy Int spaces)
  do
    var Int count = 0
    do
      var Char ch
      for count in spaces
      file-getc(out ch, user infile)
      if ch != ' '
        return
      
      file-putc(user outfile, copy ch)
    
    var Bool more-lines
    parse-line(out more-lines, user infile, user outfile, copy spaces)
    while more-lines
  
  return


func parse-block(user File infile, user File outfile, copy Int spaces)
  file-write(user outfile, user " {\n")
  parse-block-body(user infile, user outfile, copy spaces + 2)
  file-write(user outfile, user "}\n")
  return


func parse-param-type(user File infile, user File outfile, user String access)
  var Char end
  var String{80} typename
  read-name(out end, user infile, out typename, copy ' ', copy '{')
  var Bool equal
  string-equal(out equal, user typename, user "Array")
  if equal
    var String{80} subtypename
    read-name(out end, user infile, out subtypename, copy '}', copy '}')
    file-getc(out end, user infile)
  
  write-cstyle(user outfile, user typename)
  string-equal(out equal, user access, user "copy")
  if not equal
    file-putc(user outfile, copy '*')
  
  return


func parse-func-header(user File infile, user File outfile)
  file-write(user outfile, user "Returncode ")
  var Char end
  copy-text(out end, user infile, user outfile, copy '(', copy '(')
  file-putc(user outfile, copy '(')
  var Bool has-in-params = false
  do
    var String{80} access
    read-name(out end, user infile, out access, copy ' ', copy ')')
    while end == ' '
    has-in-params := true
    parse-param-type(user infile, user outfile, user access)
    file-putc(user outfile, copy ' ')
    copy-text(out end, user infile, user outfile, copy ',', copy ')')
    while end == ','
    file-getc(out end, user infile)
    file-write(user outfile, user ", ")
  
  file-getc(out end, user infile)
  do
    while end != '\n'
    file-getc(out end, user infile)
    if has-in-params
      file-write(user outfile, user ", ")
    
    var String{80} access
    read-name(out end, user infile, out access, copy ' ', copy ' ')
    parse-param-type(user infile, user outfile, user access)
    var Bool is-var
    string-equal(out is-var, user access, user "var")
    if not is-var
      file-putc(user outfile, copy '*')
    
    file-putc(user outfile, copy ' ')
    copy-text(out end, user infile, user outfile, copy ',', copy '\n')
    while end == ','
  
  file-putc(user outfile, copy ')')
  return


func parse-comment(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-write(user outfile, user "/* ")
  var Char end
  var String{80} comment
  read-name(out end, user infile, out comment, copy '\n', copy '\n')
  file-write(user outfile, user comment)
  file-write(user outfile, user " */\n")
  return


func parse-func(user File infile, user File outfile, user String key-word, copy Int spaces)
  parse-func-header(user infile, user outfile)
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-main(user File infile, user File outfile, user String key-word, copy Int spaces)
  parse-func(user infile, user outfile, user key-word, copy spaces)
  file-write(user outfile, user "\nMAIN_FUNC\n")
  return


func parse-native(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} name
  read-name(out end, user infile, out name, copy ' ', copy ' ')
  var Bool equal
  string-equal(out equal, user name, user "func")
  if equal
    parse-func-header(user infile, user outfile)
  
  else
    file-write(user outfile, user "typedef void ")
    copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  
  file-write(user outfile, user ";\n")
  return


func parse-var(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} typename
  read-name(out end, user infile, out typename, copy ' ', copy '{')
  var Bool equal
  string-equal(out equal, user typename, user "String")
  if equal
    var String{80} length
    read-name(out end, user infile, out length, copy '}', copy '}')
    file-getc(out end, user infile)
    file-write(user outfile, user "String* ")
    copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
    file-write(user outfile, user " = &(String){")
    file-write(user outfile, user length)
    file-write(user outfile, user ", 0, (char[")
    file-write(user outfile, user length)
    file-write(user outfile, user "]){0}};\n")
    return
  
  string-equal(out equal, user typename, user "Array")
  if equal
    var String{80} name
    var String{80} length
    var String{80} string-length
    read-name(out end, user infile, out length, copy ':', copy ':')
    read-name(out end, user infile, out typename, copy '{', copy '}')
    string-equal(out equal, user typename, user "String")
    if equal
      read-name(out end, user infile, out string-length, copy '}', copy '}')
      file-getc(out end, user infile)
    
    file-getc(out end, user infile)
    read-name(out end, user infile, out name, copy '\n', copy '\n')
    file-write(user outfile, user "Array* ")
    write-cstyle(user outfile, user name)
    file-write(user outfile, user " = &(Array){")
    file-write(user outfile, user length)
    file-write(user outfile, user ", (")
    write-cstyle(user outfile, user typename)
    file-putc(user outfile, copy '[')
    file-write(user outfile, user length)
    file-write(user outfile, user "]){0}};")
    if equal
      file-write(user outfile, user " char _")
      write-cstyle(user outfile, user name)
      file-write(user outfile, user "_chars[")
      file-write(user outfile, user string-length)
      file-write(user outfile, user "][")
      file-write(user outfile, user length)
      file-write(user outfile, user "]; {int n; for(n=0; n<")
      file-write(user outfile, user length)
      file-write(user outfile, user "; ++n) ((String*)(")
      write-cstyle(user outfile, user name)
      file-write(user outfile, user "->values))[n] = (String){")
      file-write(user outfile, user string-length)
      file-write(user outfile, user ", 0, _")
      write-cstyle(user outfile, user name)
      file-write(user outfile, user "_chars[n]};}")
    
    file-putc(user outfile, copy '\n')
    return
  
  write-cstyle(user outfile, user typename)
  is-primitive(out equal, user typename)
  if equal
    file-putc(user outfile, copy ' ')
    copy-text(out end, user infile, user outfile, copy '(', copy '\n')
    if end == '('
      file-write(user outfile, user " = ")
      copy-text(out end, user infile, user outfile, copy ')', copy ')')
      file-getc(out end, user infile)
    
    file-write(user outfile, user ";\n")
    return
  
  file-write(user outfile, user "* ")
  copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  file-write(user outfile, user " = &(")
  write-cstyle(user outfile, user typename)
  file-write(user outfile, user "){0};\n")
  return


func parse-ref(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var Bool is-init
  var Bool is-array
  var Bool is-split
  var String{80} name
  var String{80} start
  var String{80} length
  var String{80} refname
  var String{80} typename
  var String{80} subtypename
  read-name(out end, user infile, out typename, copy ' ', copy '{')
  string-equal(out is-array, user typename, user "Array")
  if is-array
    read-name(out end, user infile, out subtypename, copy '}', copy '}')
    file-getc(out end, user infile)
  
  read-name(out end, user infile, out refname, copy '(', copy '\n')
  is-init := end == '('
  if is-init
    read-name(out end, user infile, out name, copy ')', copy '[')
    is-split := end == '['
    if is-split
      read-name(out end, user infile, out start, copy ':', copy ':')
      read-name(out end, user infile, out length, copy ']', copy ']')
      file-getc(out end, user infile)
      file-write(user outfile, user "if ((")
      write-cstyle(user outfile, user start)
      file-write(user outfile, user ") + (")
      write-cstyle(user outfile, user length)
      file-write(user outfile, user ") > ")
      write-cstyle(user outfile, user name)
      file-write(user outfile, user "->")
      if not is-array
        file-write(user outfile, user "actual_")
      
      file-write(user outfile, user "length) RAISE ")
    
    file-getc(out end, user infile)
  
  write-cstyle(user outfile, user typename)
  file-write(user outfile, user "* ")
  write-cstyle(user outfile, user refname)
  
  if is-init
    file-write(user outfile, user " = ")
    if is-split
      if is-array
        file-write(user outfile, user "&(Array){")
        write-cstyle(user outfile, user length)
        file-write(user outfile, user ", (Byte*)(")
        write-cstyle(user outfile, user name)
        file-write(user outfile, user "->values) + (")
        write-cstyle(user outfile, user start)
        file-write(user outfile, user ") * sizeof(")
        write-cstyle(user outfile, user subtypename)
        file-write(user outfile, user ")}")
      
      else
        file-write(user outfile, user "&(String){")
        write-cstyle(user outfile, user length)
        file-write(user outfile, user ", ")
        write-cstyle(user outfile, user length)
        file-write(user outfile, user ", ")
        write-cstyle(user outfile, user name)
        file-write(user outfile, user "->chars + ")
        write-cstyle(user outfile, user start)
        file-putc(user outfile, copy '}')
      
    
    else
      write-cstyle(user outfile, user name)
    
  
  file-write(user outfile, user ";\n")
  return


func parse-new(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} name
  var String{80} typename
  var String{80} array-length
  var String{80} string-length
  read-name(out end, user infile, out typename, copy ' ', copy '{')
  var Bool is-array
  var Bool is-string
  string-equal(out is-array, user typename, user "Array")
  string-equal(out is-string, user typename, user "String")
  write-cstyle(user outfile, user typename)
  if is-string
    read-name(out end, user infile, out string-length, copy '}', copy '}')
    file-getc(out end, user infile)
  
  if is-array
    read-name(out end, user infile, out array-length, copy ':', copy ':')
    read-name(out end, user infile, out typename, copy '{', copy '}')
    string-equal(out is-string, user typename, user "String")
    if is-string
      read-name(out end, user infile, out string-length, copy '}', copy '}')
      file-getc(out end, user infile)
    
    file-getc(out end, user infile)
  
  read-name(out end, user infile, out name, copy '\n', copy '\n')
  file-write(user outfile, user "* ")
  write-cstyle(user outfile, user name)
  file-write(user outfile, user " = ")
  
  if is-array
    file-write(user outfile, user "new_array(")
    write-cstyle(user outfile, user array-length)
    file-write(user outfile, user ", sizeof(")
    write-cstyle(user outfile, user typename)
    file-putc(user outfile, copy ')')
    if is-string
      file-write(user outfile, user " + (")
      write-cstyle(user outfile, user string-length)
      file-putc(user outfile, copy ')')
    
  
  else
    if is-string
      file-write(user outfile, user "new_string(")
      write-cstyle(user outfile, user string-length)
    
    else
      file-write(user outfile, user "malloc(sizeof(")
      write-cstyle(user outfile, user typename)
      file-putc(user outfile, copy ')')
    
  
  file-write(user outfile, user "); if (")
  write-cstyle(user outfile, user name)
  file-write(user outfile, user " == NULL) RAISE")
  if is-array and is-string
    file-write(user outfile, user " {int n; for(n=0; n<(")
    write-cstyle(user outfile, user array-length)
    file-write(user outfile, user "); ++n) ((String*)(")
    write-cstyle(user outfile, user name)
    file-write(user outfile, user "->values))[n] = (String){")
    write-cstyle(user outfile, user string-length)
    file-write(user outfile, user ", 0, (Byte*)(")
    write-cstyle(user outfile, user name)
    file-write(user outfile, user "->values) + (")
    write-cstyle(user outfile, user array-length)
    file-write(user outfile, user ") * sizeof(String) + (")
    write-cstyle(user outfile, user string-length)
    file-write(user outfile, user ") * n};}")
  
  file-putc(user outfile, copy '\n')
  return


func parse-delete(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  file-write(user outfile, user "free(")
  copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  file-write(user outfile, user ");\n")
  return


func parse-call-args(user File infile, user File outfile, out String inout-name, out Bool line-end)
  file-write(user outfile, user "CHECK(")
  write-cstyle(user outfile, user inout-name[0])
  file-putc(user outfile, copy '(')
  var Char end
  var Bool equal
  var Bool has-in-params = false
  var String{80} name
  do
    read-name(out end, user infile, out name, copy ' ', copy ')')
    while end == ' '
    has-in-params := true
    read-name(out end, user infile, out name, copy ',', copy ')')
    var Char first
    string-get(out first, user name, user 0)
    if first == '"'
      var Int length
      real-string-length(out length, user name)
      var String{80} length-str
      file-write(user outfile, user "&(String){")
      int-to-string(out length-str, user length)
      file-write(user outfile, user length-str)
      file-write(user outfile, user ", ")
      length := length minus 1
      int-to-string(out length-str, user length)
      file-write(user outfile, user length-str)
      file-write(user outfile, user ", ")
      file-write(user outfile, user name)
      file-write(user outfile, user "}")
    
    else
      if first != '\''
        write-cstyle(user outfile, user name)
      
      else
        file-write(user outfile, user name)
      
    
    while end == ','
    file-getc(out end, user infile)
    file-write(user outfile, user ", ")
  
  file-getc(out end, user infile)
  do
    while end != '\n'
    file-getc(out end, user infile)
    if has-in-params
      file-write(user outfile, user ", ")
    
    read-name(out end, user infile, out name, copy ' ', copy ' ')
    string-equal(out equal, user name, user "var")
    if not equal
      file-putc(user outfile, copy '&')
    
    read-name(out end, user infile, user inout-name, copy ',', copy ' ')
    write-cstyle(user outfile, user inout-name[0])
    while end == ','
  
  file-write(user outfile, user "))")
  out line-end := end == '\n'
  return


func parse-call-in-exp(user File infile, user File outfile, user String key-word, user String prefix)
  var Char end
  var String{80} name
  read-name(out end, user infile, out name, copy ' ', copy '(')
  var Bool line-end = end == '\n'
  if end == '('
    parse-call-args(user infile, user outfile, out name, out line-end)
    file-putc(user outfile, copy ' ')
  
  write-cstyle(user outfile, user key-word)
  file-write(user outfile, user prefix)
  write-cstyle(user outfile, user name)
  
  if not line-end
    file-putc(user outfile, copy ' ')
    copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  
  return


func parse-if(user File infile, user File outfile, user String key-word, copy Int spaces)
  parse-call-in-exp(user infile, user outfile, user key-word, user " (")
  file-putc(user outfile, copy ')')
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-else(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-write(user outfile, user key-word)
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-else-if(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  file-write(user outfile, user "else if (")
  copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  file-putc(user outfile, copy ')')
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-do(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-write(user outfile, user "while (true)")
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-while(user File infile, user File outfile, user String key-word, copy Int spaces)
  parse-call-in-exp(user infile, user outfile, user "if (not(", user "")
  file-write(user outfile, user ")) break;\n")
  return


func parse-for(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} varname
  var String{80} ignore-in
  read-name(out end, user infile, out varname, copy ' ', copy ' ')
  read-name(out end, user infile, out ignore-in, copy ' ', copy ' ')
  file-write(user outfile, user "Int ")
  write-cstyle(user outfile, user varname)
  file-write(user outfile, user "; for (")
  write-cstyle(user outfile, user varname)
  file-write(user outfile, user " = 0; ")
  write-cstyle(user outfile, user varname)
  file-write(user outfile, user " < ")
  copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  file-write(user outfile, user "; ++")
  write-cstyle(user outfile, user varname)
  file-write(user outfile, user ")")
  parse-block(user infile, user outfile, copy spaces)
  return


func parse-return(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-write(user outfile, user key-word)
  file-write(user outfile, user " OK;\n")
  return


func parse-raise(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-write(user outfile, user "RAISE\n")
  return


func parse-out(user File infile, user File outfile, user String key-word, copy Int spaces)
  file-putc(user outfile, copy '*')
  var Char end
  var String{80} ignore-assign
  copy-text(out end, user infile, user outfile, copy ' ', copy ' ')
  read-name(out end, user infile, out ignore-assign, copy ' ', copy ' ')
  file-write(user outfile, user " = ")
  copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  file-write(user outfile, user ";\n")
  return


func parse-class(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} name
  read-name(out end, user infile, out name, copy '\n', copy '\n')
  file-write(user outfile, user "typedef struct ")
  write-cstyle(user outfile, user name)
  file-putc(user outfile, user ' ')
  write-cstyle(user outfile, user name)
  file-write(user outfile, user "; struct ")
  write-cstyle(user outfile, user name)
  file-write(user outfile, user " {\n")
  parse-block-body(user infile, user outfile, copy spaces + 2)
  file-write(user outfile, user "};\n")
  return


func parse-array(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} index
  var String{80} source
  var String{80} target
  var String{80} typename
  read-name(out end, user infile, out typename, copy ' ', copy ' ')
  read-name(out end, user infile, out target, copy ' ', copy '[')
  var Bool is-get = end != '['
  if is-get
    read-name(out end, user infile, out source, copy ' ', copy ' ')
    read-name(out end, user infile, out source, copy '[', copy '[')
    read-name(out end, user infile, out index, copy ']', copy ']')
    file-getc(out end, user infile)
  
  else
    read-name(out end, user infile, out index, copy ']', copy ']')
    file-getc(out end, user infile)
    read-name(out end, user infile, out source, copy ' ', copy ' ')
  
  file-write(user outfile, user "if (")
  write-cstyle(user outfile, user index)
  file-write(user outfile, user " < 0 || ")
  write-cstyle(user outfile, user index)
  file-write(user outfile, user " >= ")
  if is-get
    write-cstyle(user outfile, user source)
  
  else
    write-cstyle(user outfile, user target)
  
  file-write(user outfile, user "->length) RAISE ")
  if is-get
    write-cstyle(user outfile, user target)
    file-write(user outfile, user " = ")
  
  file-write(user outfile, user "((")
  write-cstyle(user outfile, user typename)
  file-write(user outfile, user "*)(")
  if is-get
    write-cstyle(user outfile, user source)
  
  else
    write-cstyle(user outfile, user target)
  
  file-write(user outfile, user "->values))")
  
  var Bool primitive
  is-primitive(out primitive, user typename)
  if not is-get or primitive
    file-putc(user outfile, user '[')
    write-cstyle(user outfile, user index)
    file-putc(user outfile, user ']')
  
  else
    file-write(user outfile, user " + ")
    write-cstyle(user outfile, user index)
  
  if not is-get
    file-write(user outfile, user " = ")
    copy-text(out end, user infile, user outfile, copy '\n', copy '\n')
  
  file-write(user outfile, user ";\n")
  return


func parse-call(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Bool line-end
  parse-call-args(user infile, user outfile, out key-word, out line-end)
  file-putc(user outfile, copy '\n')
  return


func parse-assign(user File infile, user File outfile, user String key-word, copy Int spaces)
  var Char end
  var String{80} ignore-assign
  read-name(out end, user infile, out ignore-assign, copy ' ', copy ' ')
  parse-call-in-exp(user infile, user outfile, user key-word, user " = ")
  file-write(user outfile, user ";\n")
  return


func parse-line(out Bool more-lines, user File infile, user File outfile, copy Int spaces)
  var String{80} key-word
  var Char end
  read-name(out end, user infile, out key-word, user ' ', user '(')
  if end == 0x7f
    out more-lines := false
    return
  
  out more-lines := true
  var Bool equal
  
  string-equal(out equal, user key-word, user "")
  if equal
    file-putc(user outfile, user end)
    return
  
  string-equal(out equal, user key-word, user "#")
  if equal
    parse-comment(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "main")
  if equal
    parse-main(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "func")
  if equal
    parse-func(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "native")
  if equal
    parse-native(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "var")
  if equal
    parse-var(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "owner")
  if equal
    parse-ref(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "user")
  if equal
    parse-ref(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "new")
  if equal
    parse-new(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "delete")
  if equal
    parse-delete(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "if")
  if equal
    parse-if(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "else")
  if equal
    parse-else(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "else-if")
  if equal
    parse-else-if(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "do")
  if equal
    parse-do(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "while")
  if equal
    parse-while(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "for")
  if equal
    parse-for(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "return")
  if equal
    parse-return(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "raise")
  if equal
    parse-raise(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "out")
  if equal
    parse-out(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "class")
  if equal
    parse-class(user infile, user outfile, user key-word, copy spaces)
    return
  
  string-equal(out equal, user key-word, user "[]")
  if equal
    parse-array(user infile, user outfile, user key-word, copy spaces)
    return
  
  if end == '('
    parse-call(user infile, user outfile, user key-word, copy spaces)
  
  else
    parse-assign(user infile, user outfile, user key-word, copy spaces)
  
  return


main func(user String arg1, user String arg2)
  print(user "Lumi compiler start")
  
  owner File infile
  owner File outfile
  file-open-read(out infile, user arg1)
  file-open-write(out outfile, user arg2)
  
  file-write(user outfile, user "#include \"lumi.1.h\"\n\n")
  
  do
    var Bool more-lines
    parse-line(out more-lines, user infile, user outfile, copy 0)
    while more-lines
  
  file-close(owner infile)
  file-close(owner outfile)
  
  print(user "Lumi compiler end")
  return

