# TL3 compiler - global data

# global data object
var String{80} global-key-word-text

static Parsed-key-word(Object)
  user String text
  var Int spaces
  var Char end

var Parsed-key-word global-key-word

static Global-data(Object)
  # data
  owner File infile
  owner File outfile
  owner Array{Node-map-item} key-word-map
  owner Op-map op-map
  owner Type-map type-map
  owner Var-map var-map
  owner String-list test-funcs
  var Int max-type-depth
  # types
  user Mtype type-char
  user Mtype type-bool
  user Mtype type-int
  user Mtype type-type
  user Mtype type-func
  user Mtype type-string
  user Mtype type-array
  user Mtype type-file
  user Mtype type-sys
  # state
  user Parsed-key-word key-word
  user String infile-name
  var Int line-num
  var Int spaces
  user St node
  var Int res-count
  user Mtype mclass
  user Mtype generic-mtype
  var Bool methods
  var Bool debug
  
  func inst init-op-map()
    new Op-map map
    self.op-map := map
    map.init()
    map.add(user ".", user "->")
    map.add(user ":=", user "=")
    map.add-copy(user "+")
    map.add-copy(user "-")
    map.add-copy(user "*")
    map.add-copy(user "/")
    map.add-copy(user "+=")
    map.add-copy(user "-=")
    map.add(user "=", user "==")
    map.add-copy(user "!=")
    map.add-copy(user ">")
    map.add-copy(user "<")
    map.add-copy(user ">=")
    map.add-copy(user "<=")
    map.add(user "not", user "!")
    map.add(user "or", user "||")
    map.add(user "and", user "&&")
    map.add(user "?", user "NULL != ")
  
  func inst init-types()
    new Type-map map
    self.type-map := map
    map.init()
    map.add(user "Char"):(user self.type-char)
    self.type-char.set-primitive(user "'\\0'")
    map.add(user "Bool"):(user self.type-bool)
    self.type-bool.set-primitive(user "false")
    map.add(user "Int"):(user self.type-int)
    self.type-int.set-primitive(user "0")
    map.add(user "Type"):(user self.type-type)
    self.type-type.set-primitive(user "0, NULL")
    map.add(user "Func"):(user self.type-func)
    self.type-func.set-primitive(user "NULL")
    map.add(user "String"):(user self.type-string)
    map.add(user "Array"):(user self.type-array)
    map.add(user "File"):(user self.type-file)
    map.add(user "Sys"):(user self.type-sys)
  
  func inst init()
    self.max-type-depth := 0
    self.line-num := 0
    self.methods := false
    self.res-count := 0
    global-key-word.text := global-key-word-text
    self.key-word := _
    self.debug := false
    self.init-op-map()
    self.init-types()
    f-init-new-string-list():(owner self.test-funcs)

var Global-data glob


# read helpers
func read-c():(copy Char ch)
  glob.infile.getc():(copy ch)
  if ch = '\n'
    glob.line-num := glob.line-num + 1

func read-ignore(copy Int chars)
  for n in chars
    read-c()

func read-cont-spaces()
  read-ignore(copy glob.spaces + 4)

func read-indent(user String ends, copy Bool indent, user String text):(copy Char end, copy Int spaces)
  text.clear()
  var Char ch(0x7f)
  var Char q('\0')
  spaces := 0
  do
    # ignore indent
    read-c():(copy ch)
    if indent
      do
        while ch = ' '
        spaces := spaces + 1
        read-c():(copy ch)
      indent := false
    while ch != 0x7f
    if q = '\0'
      while ch != '\n'
      while not ends.has(copy ch)
      if ch = '\'' or ch = '"'
        q := ch
    else-if ch = '\\'
      text.append(copy ch)
      read-c():(copy ch)
    else-if ch = q
      q := '\0'
    text.append(copy ch)
  end := ch

func read(user String ends, user String text):(copy Char end)
  read-indent(user ends, copy false, user text):(copy end)

func read-new(user String ends):(owner String out-text, copy Char end)
  var String{256} text
  read(user ends, user text):(copy end)
  f-new-copy(user text):(owner out-text)

func read-key-word()
  if ? glob.key-word
    return
  glob.key-word := global-key-word
  read-indent(user " .[(", copy true, user glob.key-word.text):(copy glob.key-word.end, copy glob.key-word.spaces)


# write helpers
func write-c(copy Char ch)
  glob.outfile.putc(copy ch)

func write(user String text)
  glob.outfile.write(user text)

func write-cstyle(user String text)
  if not (? text)
    raise
  for index in text.length
    var Char ch(text[index])
    if ch = '-'
      write-c(copy '_')
    else
      write-c(copy ch)

func write-int(copy Int num)
  var String{64} num-str
  num.str():(var num-str)
  write(user num-str)

func write-line-num()
  write-int(copy glob.line-num)

func write-tb-raise()
  write(user "RAISE(")
  write-line-num()
  write(user ")")

func write-tb-check()
  write(user "CHECK(")
  write-line-num()
  write(user ", ")

func write-spaces()
  for n in glob.spaces
    write-c(copy ' ')

func write-new-indent-line()
  write-c(copy '\n')
  write-spaces()

func write-type-type-params(user Mtype sub-mtype)
  # sizeof(name), name__dtl
  write(user "sizeof(")
  write-cstyle(user sub-mtype.name)
  write(user "), ")
  if ? sub-mtype.dynamic-members
    write-cstyle(user sub-mtype.name)
    write(user "__dtl")
  else
    write(user "NULL")

func write-type-init(user Mtype mtype, user Mtype sub-mtype, copy Bool first)
  if ? mtype.base-mtype
    write-type-init(user mtype.base-mtype, user _, copy first)
    first := false
  else-if mtype = glob.type-type
    if not first
      write(user ", ")
    write-type-type-params(user sub-mtype)
    first := false
  else-if ? mtype.default-value
    if not first
      write(user ", ")
    write(user mtype.default-value)
    first := false
  var Var-map-iter iter
  iter.init(user mtype.members)
  do
    while iter.m-has-data()
    user Mvar mvar
    iter.get-var():(user mvar)
    if not (? mvar.func-dec)
      if mvar.access = ACCESS-VAR
        write-type-init(user mvar.mtype, user mvar.sub-mtype, copy first)
      else
        if not first
          write(user ", ")
        write(user "NULL")
      first := false
    iter.m-next()

# syntax error
func f-syntax-error(user String text, user String item)
  var String{256} msg
  msg.copy(user "Code error in ")
  msg.concat(user glob.infile-name)
  msg.concat(user "[")
  var String{32} line-num-str
  glob.line-num.str():(var line-num-str)
  msg.concat(user line-num-str)
  msg.concat(user "] ")
  msg.concat(user text)
  msg.concat(user " \"")
  msg.concat(user item)
  msg.append(copy '\"')
  sys.print(user msg)
  raise

func f-syntax-error2(user String text1, user String item1, user String text2, user String item2)
  var String{256} msg
  msg.copy(user text1)
  msg.concat(user " \"")
  msg.concat(user item1)
  msg.concat(user "\" ")
  msg.concat(user text2)
  f-syntax-error(user msg, user item2)

func f-syntax-error-c(user String text, copy Char ch)
  var String{2} char-str
  char-str.append(copy ch)
  f-syntax-error(user text, user char-str)

# other helpers
func f-get-access(user String access-text):(copy Int access)
  if access-text.equal(user "copy")
    access := ACCESS-COPY
  else-if access-text.equal(user "user")
    access := ACCESS-USER
  else-if access-text.equal(user "owner")
    access := ACCESS-OWNER
  else-if access-text.equal(user "var")
    access := ACCESS-VAR
  else
    f-syntax-error(user "unknown access", user access-text)


func get-node-type(user String key):(copy Type node-type, copy Bool found)
  for n in glob.key-word-map.length
    user Node-map-item item(glob.key-word-map[n])
    if item.key.equal(user key)
      node-type := item.node-type
      found := true
      return
  found := false


func f-find-type(user String typename):(user Mtype mtype)
  if ? glob.type-map.find(user typename):(user mtype)
    return
  if ? glob.generic-mtype
    if typename.equal(user glob.generic-mtype.base-typename)
      mtype := glob.generic-mtype
      return
  f-syntax-error(user "unknown type", user typename)


func f-new-temp-name(user Mtype mtype):(owner String new-name)
  var String{64} res-count
  glob.res-count.str():(var res-count)
  glob.res-count := glob.res-count + 1
  new String{mtype.name.length + res-count.length + 2} name
  name.append(copy '-')
  name.concat(user mtype.name)
  name.concat(user res-count)
  new-name := name


# basic syntax tree node

class St(Object)
  owner St next-brother
  owner St first-son
  user St last-son
  user St father
  var Int line-num
  owner Var-map var-map
  owner Var-map sons-var-map
  var Bool is-else
  
  func inst init(user St father)
    self.next-brother := _
    self.first-son := _
    self.last-son := _
    self.father := father
    self.line-num := glob.line-num
    self.var-map := _
    self.sons-var-map := _
    self.is-else := false
    if ? father
      if ? father.last-son
        father.last-son.next-brother := self
      father.last-son := self
      if not (? father.first-son)
        father.first-son := self
      if ? father.sons-var-map
        f-copy-new-var-map(user father.sons-var-map):(owner self.var-map)
  
  func dynamic parse()
    # do nothing
  
  # analyze sons
  func dynamic analyze-first()
    user St son(self.first-son)
    do
      while ? son
      glob.line-num := son.line-num
      glob.node := son
      son.analyze-first()
      son := son.next-brother
    glob.node := self
  
  # analyze sons
  func dynamic analyze()
    user St son(self.first-son)
    do
      while ? son
      glob.line-num := son.line-num
      glob.node := son
      son.analyze()
      son := son.next-brother
    glob.node := self
  
  func dynamic write()
    # do nothing
  
  func inst add-var(owner Mvar mvar)
    if ? glob.mclass
      add-var(user glob.mclass.members, owner mvar)
    else-if ? self.father and ? self.father.sons-var-map
      add-var(user self.father.sons-var-map, owner mvar)
    else
      add-var(user glob.var-map, owner mvar)
  
  func inst m-find-var(user String name):(user Mvar mvar)
    if ? self.var-map
      self.var-map.find(user name):(user mvar)
      if ? mvar
        return
    if ? self.father
      self.father.m-find-var(user name):(user mvar)
    else
      glob.var-map.find(user name):(user mvar)

func f-find-var(user String name):(user Mvar mvar)
  glob.node.m-find-var(user name):(user mvar)
