# TL3 compiler main - written in TL2


func add-kwn(copy Int index, user String key, copy Type{St} node-type)
  user Node-map-item item(glob.key-word-map[index])
  f-new-copy(user key):(owner item.key)
  item.node-type := node-type

func f-create-key-word-map()
  new Array{26:Node-map-item} key-word-map
  glob.key-word-map := key-word-map
  add-kwn(copy 0, user "#", copy St-comment)
  add-kwn(copy 1, user "func", copy St-func)
  add-kwn(copy 2, user "native", copy St-native)
  add-kwn(copy 3, user "main", copy St-main)
  add-kwn(copy 4, user "var", copy St-var)
  add-kwn(copy 5, user "owner", copy St-ref)
  add-kwn(copy 6, user "user", copy St-ref)
  add-kwn(copy 7, user "new", copy St-new)
  add-kwn(copy 8, user "delete", copy St-delete)
  add-kwn(copy 9, user "if", copy St-if)
  add-kwn(copy 10, user "else", copy St-else)
  add-kwn(copy 11, user "else-if", copy St-else-if)
  add-kwn(copy 12, user "do", copy St-do)
  add-kwn(copy 13, user "while", copy St-while)
  add-kwn(copy 14, user "for", copy St-for)
  add-kwn(copy 15, user "return", copy St-return)
  add-kwn(copy 16, user "raise", copy St-raise)
  add-kwn(copy 17, user "static", copy St-static-class)
  add-kwn(copy 18, user "class", copy St-dynamic-class)
  add-kwn(copy 19, user "##", copy St-documentation)
  add-kwn(copy 20, user "*", copy St-format)
  add-kwn(copy 21, user "assert", copy St-assert)
  add-kwn(copy 22, user "assert-error", copy St-assert-error)
  add-kwn(copy 23, user "test", copy St-test)
  add-kwn(copy 24, user "mock", copy St-mock)
  add-kwn(copy 25, user "debug", copy St-debug)


func add-global-func(user Mtype mtype, user String name):(owner Mfunc new-meth)
  new Mfunc meth
  meth.init(user name)
  if ? mtype
    add-var(user mtype.members, owner meth.m-new-var())
  else
    add-var(user glob.var-map, owner meth.m-new-var())
  new-meth := meth

func add-new-var(user Mtype mtype, user String name, user Var-map map)
  owner Mvar mvar
  init-new-var(user mtype):(owner mvar)
  f-new-copy(user name):(owner mvar.name)
  f-new-copy(user mtype.name):(owner mvar.typename)
  add-var(user map, owner mvar)

func add-member(user Mtype mtype, user String name, user Mtype member-type)
  add-new-var(user member-type, user name, user mtype.members)

func add-glob-var(user Mtype mtype, user String name)
  add-new-var(user mtype, user name, user glob.var-map)


func f-create-global-var-map()
  new Var-map map
  map.init()
  glob.var-map := map
  owner Mfunc meth
  
  # Int
  add-global-func(user glob.type-int, user "str"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "str")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-int, user "self")
  
  # Bool
  add-glob-var(user glob.type-bool, user "true")
  add-glob-var(user glob.type-bool, user "false")
  
  # Char
  add-glob-var(user glob.type-char, user "EOF")
  
  # String
  add-member(user glob.type-string, user "length", user glob.type-int)
  
  add-global-func(user glob.type-string, user "clear"):(owner meth)
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "equal"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-bool, user "equal")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "pattern")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "get"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-char, user "ch")
  meth.args.add-param(copy ACCESS-COPY, user glob.type-int, user "index")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "append"):(owner meth)
  meth.args.add-param(copy ACCESS-COPY, user glob.type-char, user "ch")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "copy"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "other")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "concat"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "other")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "concat-int"):(owner meth)
  meth.args.add-param(copy ACCESS-COPY, user glob.type-int, user "number")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "find"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-int, user "index")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "pattern")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "replace"):(owner meth)
  meth.args.add-param(copy ACCESS-COPY, user glob.type-char, user "newch")
  meth.args.add-param(copy ACCESS-COPY, user glob.type-char, user "oldch")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  add-global-func(user glob.type-string, user "has"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-bool, user "equal")
  meth.args.add-param(copy ACCESS-COPY, user glob.type-char, user "ch")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-string, user "self")
  
  # Array
  add-member(user glob.type-array, user "length", user glob.type-int)
  
  # File
  add-global-func(user glob.type-file, user "close"):(owner meth)
  meth.args.add-param(copy ACCESS-VAR, user glob.type-file, user "self")
  
  add-global-func(user glob.type-file, user "getc"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-char, user "ch")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-file, user "self")
  
  add-global-func(user glob.type-file, user "putc"):(owner meth)
  meth.args.add-param(copy ACCESS-COPY, user glob.type-char, user "ch")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-file, user "self")
  
  add-global-func(user glob.type-file, user "write"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "text")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-file, user "self")
  
  add-global-func(user _, user "file-open-read"):(owner meth)
  meth.args.add-out(copy ACCESS-OWNER, user glob.type-file, user "file")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "name")
  
  add-global-func(user _, user "file-open-write"):(owner meth)
  meth.args.add-out(copy ACCESS-OWNER, user glob.type-file, user "file")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "name")
  
  # Sys
  add-global-func(user glob.type-sys, user "print"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "text")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-sys, user "self")
  
  add-global-func(user glob.type-sys, user "print-raw"):(owner meth)
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "text")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-sys, user "self")
  
  add-global-func(user glob.type-sys, user "exit"):(owner meth)
  meth.args.add-param(copy ACCESS-COPY, user glob.type-int, user "status")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-sys, user "self")
  
  add-global-func(user glob.type-sys, user "system"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-int, user "status")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "command")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-sys, user "self")
  
  add-global-func(user glob.type-sys, user "getenv"):(owner meth)
  meth.args.add-out(copy ACCESS-COPY, user glob.type-bool, user "exists")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "value")
  meth.args.add-param(copy ACCESS-USER, user glob.type-string, user "name")
  meth.args.add-param(copy ACCESS-VAR, user glob.type-sys, user "self")
  
  add-glob-var(user glob.type-sys, user "sys")


func init-global-data()
  glob.init()
  f-create-key-word-map()
  f-create-global-var-map()


main func(user Array{String} argv)
  sys.print(user "TL3 compiler start")
  
  if argv.length < 2
    sys.print(user "usage: tl3-compiler [input Lumi files]...")
    return
  
  init-global-data()
  var St-root root
  root.init(user argv)
  
  root.parse()
  root.analyze()
  root.write()
  
  sys.print(user "TL3 compiler end")
