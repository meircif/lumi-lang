module examples

; fibonacci start
func fibonacci(copy Uint64 n)->(var Uint64 res)
    var Uint64 prev(copy 1)
    res := 0
    repeat n
        var Uint64 sum(copy res clamp+ prev)
        prev := res
        res := sum

; fibonacci end

; Complex start
struct Complex
    var Sint64 real
    var Sint64 imaginary
    
    new(copy Sint64 real, copy Sint64 imaginary)
        self.real := real
        self.imaginary := imaginary

    func user ! str(user String out-str)
        self.real.str(user out-str)!
        out-str.append(copy ' ')!
        if self.imaginary > 0
            out-str.append(copy '+')!
        else
            out-str.append(copy '-')!
        out-str.append(copy ' ')!
        var String imaginary-str
        if self.imaginary > 0
            self.imaginary.str(user imaginary-str)!
        else
            (- self.imaginary).str(user imaginary-str)!
        out-str.concat(user imaginary-str.bytes())!
        out-str.append(copy 'i')!

func ! usage-example()
    var Complex complex(copy 5, copy 3)
    var String complex-str
    complex.str(user complex-str)!
    sys.println(user complex-str.bytes())!

; Complex end

main!
    fibonacci(copy 3)
    usage-example()!
